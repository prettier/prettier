// Jest Snapshot v1, https://jestjs.io/docs/snapshot-testing

exports[`export.js format 1`] = `
====================================options=====================================
parsers: ["flow"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
export default match (a) {}

=====================================output=====================================
export default match (a) {
};

================================================================================
`;

exports[`expression.js format 1`] = `
====================================options=====================================
parsers: ["flow"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
const e = match (a) {
  1 => true,
  'foo' => false,
  2 => {obj: 'literal'},
};

=====================================output=====================================
const e = match (a) {
  1 => true,
  "foo" => false,
  2 => { obj: "literal" },
};

================================================================================
`;

exports[`expression-empty.js format 1`] = `
====================================options=====================================
parsers: ["flow"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
const e = match (a) {};

=====================================output=====================================
const e = match (a) {
};

================================================================================
`;

exports[`expression-guards.js format 1`] = `
====================================options=====================================
parsers: ["flow"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
const e = match (a) {
  1 if (b) => true,
};

=====================================output=====================================
const e = match (a) {
  1 if (b) => true,
};

================================================================================
`;

exports[`pattern-array.js format 1`] = `
====================================options=====================================
parsers: ["flow"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
const e = match (x) {
  [10] => 1,
  [const y, 1] => y,
  [1, ...] => 1,
  [1, 2, ...const rest] => rest,
  [...let rest] => rest,
  [...var rest] => rest,
  [{nested: [1, const x]}] => x,
};

=====================================output=====================================
const e = match (x) {
  [10] => 1,
  [const y, 1] => y,
  [1, ...] => 1,
  [1, 2, ...const rest] => rest,
  [...let rest] => rest,
  [...var rest] => rest,
  [{nested: [1, const x]}] => x,
};

================================================================================
`;

exports[`pattern-core.js format 1`] = `
====================================options=====================================
parsers: ["flow"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
const e = match (x) {
  "s" => 1,
  true => 1,
  null => 1,
  3 => 1,
  4n => 1,
  +5 => 1,
  -6 => 1,
  +7n => 1,
  -8n => 1,
  y => 1,
  const y => y,
  let y => y,
  var y => y,
  ('s') => 1,
  _ => 1,
};

=====================================output=====================================
const e = match (x) {
  "s" => 1,
  true => 1,
  null => 1,
  3 => 1,
  4n => 1,
  +5 => 1,
  -6 => 1,
  +7n => 1,
  -8n => 1,
  y => 1,
  const y => y,
  let y => y,
  var y => y,
  "s" => 1,
  _ => 1,
};

================================================================================
`;

exports[`pattern-member.js format 1`] = `
====================================options=====================================
parsers: ["flow"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
const e = match (x) {
  foo.bar => true,
  foo[1] => true,
  foo[1n] => true,
  foo["bar"] => true,
  foo.bar[1] => true,
  foo[1].bar["baz"] => true,
};

=====================================output=====================================
const e = match (x) {
  foo.bar => true,
  foo[1] => true,
  foo[1n] => true,
  foo["bar"] => true,
  foo.bar[1] => true,
  foo[1].bar["baz"] => true,
};

================================================================================
`;

exports[`pattern-object.js format 1`] = `
====================================options=====================================
parsers: ["flow"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
const e = match (x) {
  {foo: 1, bar: 2} => 1,
  {'foo': 1} => 1,
  {111: true} => 1,
  {foo: const y} => y,
  {const x, let y, var z} => y,
  {const x, ...const y} => y,
  {const x, ...let y} => y,
  {const x, ...} => x,
};

=====================================output=====================================
const e = match (x) {
  {foo: 1, bar: 2} => 1,
  {"foo": 1} => 1,
  {111: true} => 1,
  {foo: const y} => y,
  {const x, let y, var z} => y,
  {const x, ...const y} => y,
  {const x, ...let y} => y,
  {const x, ...} => x,
};

================================================================================
`;

exports[`pattern-or-as.js format 1`] = `
====================================options=====================================
parsers: ["flow"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
const e = match (x) {
  "s" | true | null => 1,
  | "s"
  | true
  | null => 1,
  {foo: 1 | 2} => 2,
  {foo: | 1
        | 2} => 2,
  {foo: [1] as y} => y,
  {foo: 1 | 2 | 3 as y} => y,
  {foo: (1 | 2 | 3) as y} => y,
  {foo: [1] as const y} => y,
};

=====================================output=====================================
const e = match (x) {
  "s" | true | null => 1,
  "s" | true | null => 1,
  {foo: 1 | 2} => 2,
  {foo: 1 | 2} => 2,
  {foo: [1] as y} => y,
  {foo: (1 | 2 | 3) as y} => y,
  {foo: (1 | 2 | 3) as y} => y,
  {foo: [1] as const y} => y,
};

================================================================================
`;

exports[`regression.js format 1`] = `
====================================options=====================================
parsers: ["flow"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
type match = number;
{
  const match = 1;
}
function match(match: match) {}
const a = match(1);
const b = match(1).f();
const c = match(1)
{
  // block statement
}
const d = match(1) + 2;
const e = match(1)[2];
const f = match(1) ? 2 : 3;
const g = match(1) < 2;
const h = match(1) && 2;
const i = match();
const j = match(...b);
match(1);
match(1).f();
match(1)
{
  // block statement
}
match(1) + 2;
match(1)[2];
match(1) ? 2 : 3;
match(1) < 2;
match(1) && 2;
match();
match(...b);

=====================================output=====================================
type match = number;
{
  const match = 1;
}
function match(match: match) {}
const a = match(1);
const b = match(1).f();
const c = match(1);
{
  // block statement
}
const d = match(1) + 2;
const e = match(1)[2];
const f = match(1) ? 2 : 3;
const g = match(1) < 2;
const h = match(1) && 2;
const i = match();
const j = match(...b);
match(1);
match(1).f();
match(1);
{
  // block statement
}
match(1) + 2;
match(1)[2];
match(1) ? 2 : 3;
match(1) < 2;
match(1) && 2;
match();
match(...b);

================================================================================
`;

exports[`statement.js format 1`] = `
====================================options=====================================
parsers: ["flow"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
match (a) {
  1 => {
    const x = 1;
    f(x);
  },
  'foo' => {
    // empty
  },
  2 => {
    label: 'literal'
  },
}

=====================================output=====================================
match (a) {
  1 => {
    const x = 1;
    f(x);
  }
  "foo" => {
    // empty
  }
  2 => {
    label: "literal";
  }
}

================================================================================
`;

exports[`statement-empty.js format 1`] = `
====================================options=====================================
parsers: ["flow"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
match (a) {}

=====================================output=====================================
match (a) {
}

================================================================================
`;

exports[`statement-guards.js format 1`] = `
====================================options=====================================
parsers: ["flow"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
match (a) {
  1 if (b) => {
    const x = 1;
  },
  'foo' if (f()) => {
    const x = 2;
  },
  2 if (x < y) => {
    const x = 3;
  },
}

=====================================output=====================================
match (a) {
  1 if (b) => {
    const x = 1;
  }
  "foo" if (f()) => {
    const x = 2;
  }
  2 if (x < y) => {
    const x = 3;
  }
}

================================================================================
`;

exports[`statement-sequence-arg.js format 1`] = `
====================================options=====================================
parsers: ["flow"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
match (a, b) {}

=====================================output=====================================
match ((a, b)) {
}

================================================================================
`;
