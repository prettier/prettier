// Jest Snapshot v1, https://jestjs.io/docs/snapshot-testing

exports[`declare-hook.js format 1`] = `
====================================options=====================================
parsers: ["flow"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
declare hook useFoo(): void;

declare hook useFoo(): SomeComponent;

declare hook useFoo(): React.Element<typeof SomeComponentLonnnnnnnnnnnnnnnnnnnnnnnnnnnnng>;

declare hook useFoo<T>(): void;

declare hook useFoo<T>(): Array<Fooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo>;

declare hook useFoo<T: Fooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo>(): void;

declare hook useFoo(bar: string): string;

declare hook useFoo(bar?: string): string;

declare hook useFoo(data: string): string;

declare hook useFoo(...restProps: $ReadOnly<{k: string}>): {k: string};

declare hook useFoo(...$ReadOnly<{k: string}>): {k: string};

declare hook useFoo(bar: string, baz: $ReadOnly<{k: string}>): void;

declare hook useFoo(bar: string, baz: $ReadOnly<{k: string}>, realllllllllllllllllllyLong: string): void;

// Attached comment
declare hook useFoo(
  /**
   * Commet block
   */
  bar: string, // Trailing comment

  // preceding comment
  baz: $ReadOnly<{k: string, reallllllllllllllllllllllllllllllllllllllyLong: string}>
  // Trailing comment
): void;

declare hook useFoo(
  ...props: $ReadOnly<{k: string, reallllllllllllllllllllllllllllllllllllllyLong: string}>
  // Trailing comment
): SomeComponent;

declare hook useFoo(
  ...props: $ReadOnly<{k: string, reallllllllllllllllllllllllllllllllllllllyLong: string}>
  // Trailing comment
): SomeComponent;

=====================================output=====================================
declare hook useFoo(): void;

declare hook useFoo(): SomeComponent;

declare hook useFoo(): React.Element<
  typeof SomeComponentLonnnnnnnnnnnnnnnnnnnnnnnnnnnnng,
>;

declare hook useFoo<T>(): void;

declare hook useFoo<
  T,
>(): Array<Fooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo>;

declare hook useFoo<
  T: Fooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo,
>(): void;

declare hook useFoo(bar: string): string;

declare hook useFoo(bar?: string): string;

declare hook useFoo(data: string): string;

declare hook useFoo(...restProps: $ReadOnly<{ k: string }>): { k: string };

declare hook useFoo(...$ReadOnly<{ k: string }>): { k: string };

declare hook useFoo(bar: string, baz: $ReadOnly<{ k: string }>): void;

declare hook useFoo(
  bar: string,
  baz: $ReadOnly<{ k: string }>,
  realllllllllllllllllllyLong: string,
): void;

// Attached comment
declare hook useFoo(
  /**
   * Commet block
   */
  bar: string, // Trailing comment

  // preceding comment
  baz: $ReadOnly<{
    k: string,
    reallllllllllllllllllllllllllllllllllllllyLong: string,
  }>,
): // Trailing comment
void;

declare hook useFoo(
  ...props: $ReadOnly<{
    k: string,
    reallllllllllllllllllllllllllllllllllllllyLong: string,
  }>
): // Trailing comment
SomeComponent;

declare hook useFoo(
  ...props: $ReadOnly<{
    k: string,
    reallllllllllllllllllllllllllllllllllllllyLong: string,
  }>
): // Trailing comment
SomeComponent;

================================================================================
`;

exports[`hook-declaration.js format 1`] = `
====================================options=====================================
parsers: ["flow"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
hook useFoo1() {}

export default hook useFoo2() {}

export hook useFoo3() {}

hook useFoo4(): string {}

hook useFoo5<T>() {}

hook useFoo6(...foo) {}

hook useFoo7(...rest?: Foo) {}

hook useFoo8(foo, ...bar) {}

hook useFoo9(foo: Foo, ...bar: Bar) {}

hook useFoo10(foo: () => void,): number { return; }

hook useFoo11(o: { f(string): void }) {}

hook useFoo12(foo, ...bar): React.Element<typeof SomeComponentLonnnnnnnnnnnnnnnnnnnnnnnnnnnnng> {}

hook useFoo13(foo: Array<Fooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo>, ...bar): void {}

hook useFoo14<
  T: Fooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo,
>(): any {};

=====================================output=====================================
hook useFoo1() {}

export default hook useFoo2() {}

export hook useFoo3() {}

hook useFoo4(): string {}

hook useFoo5<T>() {}

hook useFoo6(...foo) {}

hook useFoo7(...rest?: Foo) {}

hook useFoo8(foo, ...bar) {}

hook useFoo9(foo: Foo, ...bar: Bar) {}

hook useFoo10(foo: () => void): number {
  return;
}

hook useFoo11(o: { f(string): void }) {}

hook useFoo12(
  foo,
  ...bar
): React.Element<typeof SomeComponentLonnnnnnnnnnnnnnnnnnnnnnnnnnnnng> {}

hook useFoo13(
  foo: Array<Fooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo>,
  ...bar
): void {}

hook useFoo14<
  T: Fooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo,
>(): any {}

================================================================================
`;

exports[`hook-type-annotation.js format 1`] = `
====================================options=====================================
parsers: ["flow"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
type T = hook () => void;

type T = hook (bar) => SomeComponent;

type T = hook () => React.Element<typeof SomeComponentLonnnnnnnnnnnnnnnnnnnnnnnnnnnnng>;

type T = hook <T>() => void;

type T = hook <T>() => Array<Fooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo>;

type T = hook <T: Fooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo>() => void;

type T = hook (bar: string) => string;

type T = hook (bar?: string) => string;

type T = hook (data: string) => string;

type T = hook (...restProps: $ReadOnly<{k: string}>) => {k: string};

type T = hook (...$ReadOnly<{k: string}>) => {k: string};

type T = hook (bar: string, baz: $ReadOnly<{k: string}>) => void;

type T = hook (bar: string, baz: $ReadOnly<{k: string}>, realllllllllllllllllllyLong: string) => void;

type Banana = {
  useFoo: hook (string) => boolean,
};

interface F2 { m: hook (string) => number }

type f3 = hook (...arg) => void;

type f4 = hook (/* comment */ arg) => void;

type f5 = hook (arg /* comment */) => void;

type f6 = hook (?arg) => void;

class Y {
  constructor(
    ideConnectionFactory: hook (child_process$ChildProcess) => FlowIDEConnection =
        defaultIDEConnectionFactory,
  ) {
  }
}

interface F {
  ideConnectionFactoryLongLongLong: hook (child_process$ChildProcess) => FlowIDEConnection
}

type ExtractType = hook <A>(B<C>) => D

// Attached comment
type T = hook (
  /**
   * Commet block
   */
  bar: string, // Trailing comment

  // preceding comment
  baz: $ReadOnly<{k: string, reallllllllllllllllllllllllllllllllllllllyLong: string}>
  // Trailing comment
) => void;

type T = hook (
  ...props: $ReadOnly<{k: string, reallllllllllllllllllllllllllllllllllllllyLong: string}>
  // Trailing comment
) => SomeComponent;

type T = hook (
  ...props: $ReadOnly<{k: string, reallllllllllllllllllllllllllllllllllllllyLong: string}>
  // Trailing comment
) => SomeComponent;

=====================================output=====================================
type T = hook () => void;

type T = hook (bar) => SomeComponent;

type T = hook () => React.Element<
  typeof SomeComponentLonnnnnnnnnnnnnnnnnnnnnnnnnnnnng,
>;

type T = hook <T>() => void;

type T = hook <
  T,
>() => Array<Fooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo>;

type T = hook <
  T: Fooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo,
>() => void;

type T = hook (bar: string) => string;

type T = hook (bar?: string) => string;

type T = hook (data: string) => string;

type T = hook (...restProps: $ReadOnly<{ k: string }>) => { k: string };

type T = hook (...$ReadOnly<{ k: string }>) => { k: string };

type T = hook (bar: string, baz: $ReadOnly<{ k: string }>) => void;

type T = hook (
  bar: string,
  baz: $ReadOnly<{ k: string }>,
  realllllllllllllllllllyLong: string,
) => void;

type Banana = {
  useFoo: hook (string) => boolean,
};

interface F2 {
  m: hook (string) => number;
}

type f3 = hook (...arg) => void;

type f4 = hook (/* comment */ arg) => void;

type f5 = hook (arg /* comment */) => void;

type f6 = hook (?arg) => void;

class Y {
  constructor(
    ideConnectionFactory: hook (
      child_process$ChildProcess,
    ) => FlowIDEConnection = defaultIDEConnectionFactory,
  ) {}
}

interface F {
  ideConnectionFactoryLongLongLong: hook (
    child_process$ChildProcess,
  ) => FlowIDEConnection;
}

type ExtractType = hook <A>(B<C>) => D;

// Attached comment
type T = hook (
  /**
   * Commet block
   */
  bar: string, // Trailing comment

  // preceding comment
  baz: $ReadOnly<{
    k: string,
    reallllllllllllllllllllllllllllllllllllllyLong: string,
  }>,
) => // Trailing comment
void;

type T = hook (
  ...props: $ReadOnly<{
    k: string,
    reallllllllllllllllllllllllllllllllllllllyLong: string,
  }>
) => // Trailing comment
SomeComponent;

type T = hook (
  ...props: $ReadOnly<{
    k: string,
    reallllllllllllllllllllllllllllllllllllllyLong: string,
  }>
) => // Trailing comment
SomeComponent;

================================================================================
`;
