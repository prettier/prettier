// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`enum-boolean-explicit.js - {"trailingComma":"all"} format 1`] = `
====================================options=====================================
parsers: ["flow", "babel-flow"]
printWidth: 80
trailingComma: "all"
                                                                                | printWidth
=====================================input======================================
// @flow

enum E of boolean {
  A = true,
  B = false,
}

=====================================output=====================================
// @flow

enum E of boolean {
  A = true,
  B = false,
}

================================================================================
`;

exports[`enum-boolean-implicit.js - {"trailingComma":"all"} format 1`] = `
====================================options=====================================
parsers: ["flow", "babel-flow"]
printWidth: 80
trailingComma: "all"
                                                                                | printWidth
=====================================input======================================
// @flow

enum E {
  A = true,
  B = false,
}

=====================================output=====================================
// @flow

enum E {
  A = true,
  B = false,
}

================================================================================
`;

exports[`enum-comments.js - {"trailingComma":"all"} format 1`] = `
====================================options=====================================
parsers: ["flow", "babel-flow"]
printWidth: 80
trailingComma: "all"
                                                                                | printWidth
=====================================input======================================
enum E1 {
  A = 0,
  // B = 1,
  C = 2
}

enum E2 of number {
  // AA = -1,
  A = 0,
  // B = 1,
  C = 2
  // D = 100
}

enum E3 {/*Q*/}

enum E4 of /*Q*/ string {
  Foo = "foo"
}

enum E5 of string { // Q
  Bar = "bar"
}

enum /*Q*/ E6 of string {}

=====================================output=====================================
enum E1 {
  A = 0,
  // B = 1,
  C = 2,
}

enum E2 of number {
  // AA = -1,
  A = 0,
  // B = 1,
  C = 2,
  // D = 100
}

enum E3 {
  /*Q*/
}

enum E4 of string {
  /*Q*/ Foo = "foo",
}

enum E5 of string {
  // Q
  Bar = "bar",
}

enum /*Q*/ E6 of string {}

================================================================================
`;

exports[`enum-empty.js - {"trailingComma":"all"} format 1`] = `
====================================options=====================================
parsers: ["flow", "babel-flow"]
printWidth: 80
trailingComma: "all"
                                                                                | printWidth
=====================================input======================================
// @flow

enum E { }

=====================================output=====================================
// @flow

enum E {}

================================================================================
`;

exports[`enum-export.js - {"trailingComma":"all"} format 1`] = `
====================================options=====================================
parsers: ["flow", "babel-flow"]
printWidth: 80
trailingComma: "all"
                                                                                | printWidth
=====================================input======================================
// @flow

export enum A {}

export default enum B {}

=====================================output=====================================
// @flow

export enum A {}

export default enum B {}

================================================================================
`;

exports[`enum-name.js - {"trailingComma":"all"} format 1`] = `
====================================options=====================================
parsers: ["flow", "babel-flow"]
printWidth: 80
trailingComma: "all"
                                                                                | printWidth
=====================================input======================================
// @flow

enum type {
}

=====================================output=====================================
// @flow

enum type {}

================================================================================
`;

exports[`enum-no-trailing-comma.js - {"trailingComma":"all"} format 1`] = `
====================================options=====================================
parsers: ["flow", "babel-flow"]
printWidth: 80
trailingComma: "all"
                                                                                | printWidth
=====================================input======================================
// @flow

enum E {
  A
}

=====================================output=====================================
// @flow

enum E {
  A,
}

================================================================================
`;

exports[`enum-number-explicit.js - {"trailingComma":"all"} format 1`] = `
====================================options=====================================
parsers: ["flow", "babel-flow"]
printWidth: 80
trailingComma: "all"
                                                                                | printWidth
=====================================input======================================
// @flow

enum E of number {
  A = 1,
  B = 2,
}

=====================================output=====================================
// @flow

enum E of number {
  A = 1,
  B = 2,
}

================================================================================
`;

exports[`enum-number-implicit.js - {"trailingComma":"all"} format 1`] = `
====================================options=====================================
parsers: ["flow", "babel-flow"]
printWidth: 80
trailingComma: "all"
                                                                                | printWidth
=====================================input======================================
// @flow

enum E {
  A = 0,
  B = 1,
}

=====================================output=====================================
// @flow

enum E {
  A = 0,
  B = 1,
}

================================================================================
`;

exports[`enum-string-explicit-defaulted.js - {"trailingComma":"all"} format 1`] = `
====================================options=====================================
parsers: ["flow", "babel-flow"]
printWidth: 80
trailingComma: "all"
                                                                                | printWidth
=====================================input======================================
// @flow

enum E of string {
  A,
  B,
}

=====================================output=====================================
// @flow

enum E of string {
  A,
  B,
}

================================================================================
`;

exports[`enum-string-explicit-initialized.js - {"trailingComma":"all"} format 1`] = `
====================================options=====================================
parsers: ["flow", "babel-flow"]
printWidth: 80
trailingComma: "all"
                                                                                | printWidth
=====================================input======================================
// @flow

enum E of string {
  A = "a",
  B = "b",
}

=====================================output=====================================
// @flow

enum E of string {
  A = "a",
  B = "b",
}

================================================================================
`;

exports[`enum-string-implicit-defaulted.js - {"trailingComma":"all"} format 1`] = `
====================================options=====================================
parsers: ["flow", "babel-flow"]
printWidth: 80
trailingComma: "all"
                                                                                | printWidth
=====================================input======================================
// @flow

enum E {
  A,
  B,
}

=====================================output=====================================
// @flow

enum E {
  A,
  B,
}

================================================================================
`;

exports[`enum-string-implicit-initialized.js - {"trailingComma":"all"} format 1`] = `
====================================options=====================================
parsers: ["flow", "babel-flow"]
printWidth: 80
trailingComma: "all"
                                                                                | printWidth
=====================================input======================================
// @flow

enum E {
  A = "a",
  B = "b",
}

=====================================output=====================================
// @flow

enum E {
  A = "a",
  B = "b",
}

================================================================================
`;

exports[`enum-symbol.js - {"trailingComma":"all"} format 1`] = `
====================================options=====================================
parsers: ["flow", "babel-flow"]
printWidth: 80
trailingComma: "all"
                                                                                | printWidth
=====================================input======================================
// @flow

enum E of symbol {
  A,
  B,
}

=====================================output=====================================
// @flow

enum E of symbol {
  A,
  B,
}

================================================================================
`;
