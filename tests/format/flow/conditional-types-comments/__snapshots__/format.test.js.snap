// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`comments.js [babel-flow] format 1`] = `
"Unexpected token (3:12)
  1 | // @flow
  2 |
> 3 | type A = B extends T
    |            ^
  4 |   ? // comment
  5 |     foo
  6 |   : bar;
Cause: Unexpected token (3:11)"
`;

exports[`comments.js format 1`] = `
====================================options=====================================
parsers: ["flow"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
// @flow

type A = B extends T
  ? // comment
    foo
  : bar;

type A = B extends test /* comment
  comment
      comment
*/
  ? foo
  : bar;

type T = test extends B
  ? /* comment
          comment
    comment
          comment
  */
    foo
  : bar;

type T = test extends B
  ? /* comment
       comment
       comment
       comment
    */
    foo
  : test extends B
  ? /* comment
  comment
    comment */
    foo
  : bar;

type T = test extends B
  ? /* comment */
    foo
  : bar;

type T = test extends B
  ? foo
  : /* comment
         comment
     comment
           comment
    */
  bar;

type T = test extends B
  ? foo
  : /* comment
         comment
     comment
           comment
    */
  test extends B
  ? foo
  : /* comment
  comment
    comment
   */
    bar;

type T = test extends B
  ? foo
  : /* comment */
  bar;

type T = test extends B ? test extends B /* c
c */? foo : bar : bar;

=====================================output=====================================
// @flow

type A = B extends T
  ? // comment
    foo
  : bar;

type A = B extends test /* comment
  comment
      comment
*/
  ? foo
  : bar;

type T = test extends B
  ? /* comment
          comment
    comment
          comment
  */
    foo
  : bar;

type T = test extends B
  ? /* comment
       comment
       comment
       comment
    */
    foo
  : test extends B
    ? /* comment
  comment
    comment */
      foo
    : bar;

type T = test extends B ? /* comment */ foo : bar;

type T = test extends B
  ? foo
  : /* comment
         comment
     comment
           comment
    */
    bar;

type T = test extends B
  ? foo
  : /* comment
         comment
     comment
           comment
    */
    test extends B
    ? foo
    : /* comment
  comment
    comment
   */
      bar;

type T = test extends B ? foo : /* comment */ bar;

type T = test extends B
  ? test extends B /* c
c */
    ? foo
    : bar
  : bar;

================================================================================
`;
