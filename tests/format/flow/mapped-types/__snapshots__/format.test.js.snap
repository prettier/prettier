// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`comments.js [babel-flow] format 1`] = `
"Unexpected token, expected "]" (3:7)
  1 | type Type = {
  2 |   // comment
> 3 |   +[T in number]: number;
    |       ^
  4 | };
  5 |
  6 | type Type = {
Cause: Unexpected token, expected "]" (3:6)"
`;

exports[`comments.js [babel-ts] format 1`] = `
"Unexpected token (3:3)
  1 | type Type = {
  2 |   // comment
> 3 |   +[T in number]: number;
    |   ^
  4 | };
  5 |
  6 | type Type = {
Cause: Unexpected token (3:2)"
`;

exports[`comments.js [typescript] format 1`] = `
"Property or signature expected. (3:3)
  1 | type Type = {
  2 |   // comment
> 3 |   +[T in number]: number;
    |   ^
  4 | };
  5 |
  6 | type Type = {
Cause: Property or signature expected."
`;

exports[`comments.js format 1`] = `
====================================options=====================================
parsers: ["flow", "typescript"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
type Type = {
  // comment
  +[T in number]: number;
};

type Type = {
  // comment1
  // comment2
  +[T in number]: number;
};

type Type = {
  // comment
  -[T in number]: number;
};

type Type = {
  // comment
  +    [T in number]: number;
};

type Type = {
  // comment
  +     [T in number]: number;
};

type Type = {
  // comment
  +       [T in number]: number;
};

type Type = {
  // comment
  [T in number]: number;
};

type Type = {
  + // foo
  /* bar */ [T in number]: number;
};

=====================================output=====================================
type Type = {
  // comment
  +[T in number]: number,
};

type Type = {
  // comment1
  // comment2
  +[T in number]: number,
};

type Type = {
  // comment
  -[T in number]: number,
};

type Type = {
  // comment
  +[T in number]: number,
};

type Type = {
  // comment
  +[T in number]: number,
};

type Type = {
  // comment
  +[T in number]: number,
};

type Type = {
  // comment
  [T in number]: number,
};

type Type = {
  +[/* bar */ T in number]: number, // foo
};

================================================================================
`;

exports[`mapped-types.js [babel-flow] format 1`] = `
"Unexpected token, expected "]" (3:21)
  1 | //@flow
  2 |
> 3 | type Mapped = {[key in keyof O]: O[key]};
    |                     ^
  4 | type MappedLong = {[key in keyof AReallyLongNameThatShouldReallyMostDefinitelyCauseALineWrap]: number};
  5 | type MappedWithVariance = {+[key in keyof O]: number};
  6 | type MappedWithVarianceLong = {-[key in keyof AReallyLongNameThatShouldReallyMostDefinitelyCauseALineWrap]: number};
Cause: Unexpected token, expected "]" (3:20)"
`;

exports[`mapped-types.js [babel-ts] format 1`] = `
"Unexpected token (5:28)
  3 | type Mapped = {[key in keyof O]: O[key]};
  4 | type MappedLong = {[key in keyof AReallyLongNameThatShouldReallyMostDefinitelyCauseALineWrap]: number};
> 5 | type MappedWithVariance = {+[key in keyof O]: number};
    |                            ^
  6 | type MappedWithVarianceLong = {-[key in keyof AReallyLongNameThatShouldReallyMostDefinitelyCauseALineWrap]: number};
  7 | type MappedWithPlusOptional = {[key in keyof O]+?: number};
  8 | type MappedWithMinusOptional = {[key in keyof O]-?: number};
Cause: Unexpected token (5:27)"
`;

exports[`mapped-types.js [typescript] format 1`] = `
"Property or signature expected. (5:28)
  3 | type Mapped = {[key in keyof O]: O[key]};
  4 | type MappedLong = {[key in keyof AReallyLongNameThatShouldReallyMostDefinitelyCauseALineWrap]: number};
> 5 | type MappedWithVariance = {+[key in keyof O]: number};
    |                            ^
  6 | type MappedWithVarianceLong = {-[key in keyof AReallyLongNameThatShouldReallyMostDefinitelyCauseALineWrap]: number};
  7 | type MappedWithPlusOptional = {[key in keyof O]+?: number};
  8 | type MappedWithMinusOptional = {[key in keyof O]-?: number};
Cause: Property or signature expected."
`;

exports[`mapped-types.js format 1`] = `
====================================options=====================================
parsers: ["flow", "typescript"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
//@flow

type Mapped = {[key in keyof O]: O[key]};
type MappedLong = {[key in keyof AReallyLongNameThatShouldReallyMostDefinitelyCauseALineWrap]: number};
type MappedWithVariance = {+[key in keyof O]: number};
type MappedWithVarianceLong = {-[key in keyof AReallyLongNameThatShouldReallyMostDefinitelyCauseALineWrap]: number};
type MappedWithPlusOptional = {[key in keyof O]+?: number};
type MappedWithMinusOptional = {[key in keyof O]-?: number};
type MappedWithOptional = {[key in keyof O]?: number};
type MappedWithPlusOptionalLong = {[key in keyof AReallyLongNameThatShouldReallyMostDefinitelyCauseALineWrap]+?: number};
type MappedWithMinusOptionalLong = {[key in keyof AReallyLongNameThatShouldReallyMostDefinitelyCauseALineWrap]-?: number};
type MappedWithOptionalLong = {[key in keyof AReallyLongNameThatShouldReallyMostDefinitelyCauseALineWrap]?: number};
type MappedWithOptionalAndVariance = {+[key in keyof O]+?: number};
type MappedWithOptionalAndVarianceLong = {+[key in keyof AReallyLongNameThatShouldReallyMostDefinitelyCauseALineWrap]+?: number};
type MappedWithComments = {/*comment about variance */+[key /* comment about key name */ in /* comment before source type */ keyof O /* comment after source type */]/* comment about optionality */? /*comment before colon */:number /*comment about the prop type */};

=====================================output=====================================
//@flow

type Mapped = { [key in keyof O]: O[key] };
type MappedLong = {
  [key in keyof AReallyLongNameThatShouldReallyMostDefinitelyCauseALineWrap]: number,
};
type MappedWithVariance = { +[key in keyof O]: number };
type MappedWithVarianceLong = {
  -[key in keyof AReallyLongNameThatShouldReallyMostDefinitelyCauseALineWrap]: number,
};
type MappedWithPlusOptional = { [key in keyof O]+?: number };
type MappedWithMinusOptional = { [key in keyof O]-?: number };
type MappedWithOptional = { [key in keyof O]?: number };
type MappedWithPlusOptionalLong = {
  [key in keyof AReallyLongNameThatShouldReallyMostDefinitelyCauseALineWrap]+?: number,
};
type MappedWithMinusOptionalLong = {
  [key in keyof AReallyLongNameThatShouldReallyMostDefinitelyCauseALineWrap]-?: number,
};
type MappedWithOptionalLong = {
  [key in keyof AReallyLongNameThatShouldReallyMostDefinitelyCauseALineWrap]?: number,
};
type MappedWithOptionalAndVariance = { +[key in keyof O]+?: number };
type MappedWithOptionalAndVarianceLong = {
  +[key in keyof AReallyLongNameThatShouldReallyMostDefinitelyCauseALineWrap]+?: number,
};
type MappedWithComments = {
  /*comment about variance */ +[key /* comment about key name */ in /* comment before source type */ keyof O /* comment after source type */ /* comment about optionality */ /*comment before colon */]?: number /*comment about the prop type */,
};

================================================================================
`;

exports[`ts-compatibility.js [babel-flow] format 1`] = `
"Unexpected token, expected "]" (3:19)
  1 | // Tests that on single-line mapped types Flow and TS make the same formatting decisions
  2 |
> 3 | type Test = {[key in T]: number};
    |                   ^
  4 | type Test = {[key in keyof T]: number};
  5 | type Test = {[otherKeyName     in keyof T]: number};
  6 | type Test = {[key in T]:number};
Cause: Unexpected token, expected "]" (3:18)"
`;

exports[`ts-compatibility.js format 1`] = `
====================================options=====================================
parsers: ["flow", "typescript"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
// Tests that on single-line mapped types Flow and TS make the same formatting decisions

type Test = {[key in T]: number};
type Test = {[key in keyof T]: number};
type Test = {[otherKeyName     in keyof T]: number};
type Test = {[key in T]:number};
type Test = {[key in T]+?:number};
type Test = {[key in T]-?:                   number};

=====================================output=====================================
// Tests that on single-line mapped types Flow and TS make the same formatting decisions

type Test = { [key in T]: number };
type Test = { [key in keyof T]: number };
type Test = { [otherKeyName in keyof T]: number };
type Test = { [key in T]: number };
type Test = { [key in T]+?: number };
type Test = { [key in T]-?: number };

================================================================================
`;
