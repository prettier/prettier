// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`declare_function.js - {"trailingComma":"all"} format 1`] = `
====================================options=====================================
parsers: ["flow", "babel-flow"]
printWidth: 80
trailingComma: "all"
                                                                                | printWidth
=====================================input======================================
// @flow

declare function foo (this : number, a : string, b) : void

declare function bar (this : number): void

declare function baz (this : number, ...a : any): void

=====================================output=====================================
// @flow

declare function foo(this: number, a: string, b): void;

declare function bar(this: number): void;

declare function baz(this: number, ...a: any): void;

================================================================================
`;

exports[`function_declaration.js - {"trailingComma":"all"} format 1`] = `
====================================options=====================================
parsers: ["flow", "babel-flow"]
printWidth: 80
trailingComma: "all"
                                                                                | printWidth
=====================================input======================================
// @flow

function foo (this : number, a : string, b) {}

function bar (this : number) {}

function baz (this : number, ...a) {}

=====================================output=====================================
// @flow

function foo(this: number, a: string, b) {}

function bar(this: number) {}

function baz(this: number, ...a) {}

================================================================================
`;

exports[`function_type.js - {"trailingComma":"all"} format 1`] = `
====================================options=====================================
parsers: ["flow", "babel-flow"]
printWidth: 80
trailingComma: "all"
                                                                                | printWidth
=====================================input======================================
// @flow

type T = (this : number, a : string, b : number) => void

type U = (this : number, ...c : any) => void

type V = (this : number) => void

=====================================output=====================================
// @flow

type T = (this: number, a: string, b: number) => void;

type U = (this: number, ...c: any) => void;

type V = (this: number) => void;

================================================================================
`;

exports[`line_break.js - {"trailingComma":"all"} format 1`] = `
====================================options=====================================
parsers: ["flow", "babel-flow"]
printWidth: 80
trailingComma: "all"
                                                                                | printWidth
=====================================input======================================
// @flow

type T = (this: boolean,
          a: number,

          b: number,
         ) => boolean;

type T2 = (_this: boolean,
          a: number,

          b: number,
         ) => boolean;

type A = (
  this: SupperLongLongLongLongLongLongLongLongLongLongLongType,

  b: number,
) => boolean;

type B = (
  _this: SupperLongLongLongLongLongLongLongLongLongLongLongType,

  b: number,
) => boolean

=====================================output=====================================
// @flow

type T = (
  this: boolean,
  a: number,

  b: number,
) => boolean;

type T2 = (
  _this: boolean,
  a: number,

  b: number,
) => boolean;

type A = (
  this: SupperLongLongLongLongLongLongLongLongLongLongLongType,

  b: number,
) => boolean;

type B = (
  _this: SupperLongLongLongLongLongLongLongLongLongLongLongType,

  b: number,
) => boolean;

================================================================================
`;

exports[`method.js - {"trailingComma":"all"} format 1`] = `
====================================options=====================================
parsers: ["flow", "babel-flow"]
printWidth: 80
trailingComma: "all"
                                                                                | printWidth
=====================================input======================================
// @flow

class A {
    m(this : number, a : number, b : string) {}
    n(this : number, ...c) {}
    o(this : number) {}
}

=====================================output=====================================
// @flow

class A {
  m(this: number, a: number, b: string) {}
  n(this: number, ...c) {}
  o(this: number) {}
}

================================================================================
`;

exports[`union_type.js - {"trailingComma":"all"} format 1`] = `
====================================options=====================================
parsers: ["flow", "babel-flow"]
printWidth: 80
trailingComma: "all"
                                                                                | printWidth
=====================================input======================================
// @flow

type A = (
  this: | SupperLongLongLongLongLongLongLongLongLongLongLongType | FooBarBazLorem12345,
  b: number,
) => boolean;

type B = (
  _this: | SupperLongLongLongLongLongLongLongLongLongLongLongType | FooBarBazLorem12345,
  b: number,
) => boolean

=====================================output=====================================
// @flow

type A = (
  this:
    | SupperLongLongLongLongLongLongLongLongLongLongLongType
    | FooBarBazLorem12345,
  b: number,
) => boolean;

type B = (
  _this:
    | SupperLongLongLongLongLongLongLongLongLongLongLongType
    | FooBarBazLorem12345,
  b: number,
) => boolean;

================================================================================
`;
