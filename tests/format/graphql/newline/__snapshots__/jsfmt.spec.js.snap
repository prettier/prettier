// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`directive_decl.graphql format 1`] = `
====================================options=====================================
parsers: ["graphql"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
directive @dir(
  # comment
  arg1: String


  # comment
  arg2: String
  arg3: String

) on QUERY

=====================================output=====================================
directive @dir(
  # comment
  arg1: String

  # comment
  arg2: String
  arg3: String
) on QUERY

================================================================================
`;

exports[`directives.graphql format 1`] = `
====================================options=====================================
parsers: ["graphql"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
query MyQuery @directive(
  arg: 5

  # comment
  arg2: 10

) {
  field @skip(
    if: true

    # comment
    cursor: 10

  ) @nope
  otherField
  ...fragmentSpread, @include(if: ["this isn't even a boolean", "wow, that's really odd",,,,,])
}

=====================================output=====================================
query MyQuery
@directive(
  arg: 5

  # comment
  arg2: 10
) {
  field
    @skip(
      if: true

      # comment
      cursor: 10
    )
    @nope
  otherField
  ...fragmentSpread
    @include(if: ["this isn't even a boolean", "wow, that's really odd"])
}

================================================================================
`;

exports[`enum.graphql format 1`] = `
====================================options=====================================
parsers: ["graphql"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
enum State {
  # pending state
  PENDING

  # visible states
  VISIBLE
  INVISIBLE

  # archive state
  ARCHIVED
}

=====================================output=====================================
enum State {
  # pending state
  PENDING

  # visible states
  VISIBLE
  INVISIBLE

  # archive state
  ARCHIVED
}

================================================================================
`;

exports[`fields.graphql format 1`] = `
====================================options=====================================
parsers: ["graphql"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
query MyFirstQuery {
  # comment
  field {

    subfield

    # comment
    subfield

  }

  field
  #comment
  field

}

mutation MyFirstMutation {

  # comment
  name

  comment # comment
  kind

}

subscription MySubscription {

  name

  comment
  kind

}

=====================================output=====================================
query MyFirstQuery {
  # comment
  field {
    subfield

    # comment
    subfield
  }

  field
  #comment
  field
}

mutation MyFirstMutation {
  # comment
  name

  comment # comment
  kind
}

subscription MySubscription {
  name

  comment
  kind
}

================================================================================
`;

exports[`input.graphql format 1`] = `
====================================options=====================================
parsers: ["graphql"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
input Params {
  # Id
  id: ID

  # Name
  name: String

}

=====================================output=====================================
input Params {
  # Id
  id: ID

  # Name
  name: String
}

================================================================================
`;

exports[`interface.graphql format 1`] = `
====================================options=====================================
parsers: ["graphql"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
interface Actor {
  # Id
  id: ID

  # Actor fields
  name: String
  kind: String

}

=====================================output=====================================
interface Actor {
  # Id
  id: ID

  # Actor fields
  name: String
  kind: String
}

================================================================================
`;

exports[`object_type_def.graphql format 1`] = `
====================================options=====================================
parsers: ["graphql"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
type Artist implements Node, Entity {
  # The ID of an object
  id: ID!

  # The MBID of the entity.
  mbid: MBID!

  # A list of recordings linked to this entity.
  recordings(after: String, first: Int): RecordingConnection

  # A list of releases linked to this entity.
  releases(
    # Filter by one or more release group types.
    type: [ReleaseGroupType]

    # Filter by one or more release statuses.
    status: [ReleaseStatus]
    after: String
    first: Int
  ): ReleaseConnection

}

=====================================output=====================================
type Artist implements Node, Entity {
  # The ID of an object
  id: ID!

  # The MBID of the entity.
  mbid: MBID!

  # A list of recordings linked to this entity.
  recordings(after: String, first: Int): RecordingConnection

  # A list of releases linked to this entity.
  releases(
    # Filter by one or more release group types.
    type: [ReleaseGroupType]

    # Filter by one or more release statuses.
    status: [ReleaseStatus]
    after: String
    first: Int
  ): ReleaseConnection
}

================================================================================
`;

exports[`schema.graphql format 1`] = `
====================================options=====================================
parsers: ["graphql"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
# Schema
schema {
  # Query and Mutation
  query: Root
  mutation: Mutation

  # Subscription
  subscription: Subscription

}

=====================================output=====================================
# Schema
schema {
  # Query and Mutation
  query: Root
  mutation: Mutation

  # Subscription
  subscription: Subscription
}

================================================================================
`;
