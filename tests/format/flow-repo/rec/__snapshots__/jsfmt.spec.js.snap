// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`issue-598.js format 1`] = `
====================================options=====================================
parsers: ["flow"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
/* @flow */

type F<A> = { foo<B>(x: A): F<B> }
declare function foo(x: any): F<any>;
({ foo }: F<any>);

function bar(y: F<number>): F<string> { return y; }
function bar1<X>(y: F<X>): F<any> { return y; }
function bar2<X>(y: F<any>): F<X> { return y; }

type Functor<A> = {
  map<B>(f: (val: A) => B): Functor<B>
}

function identity<A>(val: A): Functor<A> {
  return {
    map<B>(f: (_: typeof val) => B): Functor<B> { return identity(f(val)) }
  }
}

=====================================output=====================================
/* @flow */

type F<A> = { foo<B>(x: A): F<B> };
declare function foo(x: any): F<any>;
({ foo }: F<any>);

function bar(y: F<number>): F<string> {
  return y;
}
function bar1<X>(y: F<X>): F<any> {
  return y;
}
function bar2<X>(y: F<any>): F<X> {
  return y;
}

type Functor<A> = {
  map<B>(f: (val: A) => B): Functor<B>,
};

function identity<A>(val: A): Functor<A> {
  return {
    map<B>(f: (_: typeof val) => B): Functor<B> {
      return identity(f(val));
    },
  };
}

================================================================================
`;

exports[`issue-1228.js format 1`] = `
====================================options=====================================
parsers: ["flow"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
/* @flow */

type Task <error, value>
  = { chain<tagged>(next:(input:value) => Task<error, tagged>):
          Task<error, tagged>
    }

function id(x: Task<any,any>): Task<any,any> { return x; }

=====================================output=====================================
/* @flow */

type Task<error, value> = {
  chain<tagged>(
    next: (input: value) => Task<error, tagged>
  ): Task<error, tagged>,
};

function id(x: Task<any, any>): Task<any, any> {
  return x;
}

================================================================================
`;

exports[`test.js format 1`] = `
====================================options=====================================
parsers: ["flow"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
class P<X> { x: X; } // this is like Promise

type Pstar<X> = X | Pstar<P<X>>; // this is like Promise*

var p: P<number> = new P;
(p.x: string); // error

var pstar: Pstar<number> = 0; // OK
(pstar: number); // error, but limit potentially unbounded number of errors!
                 // e.g., P<number> ~/~ number, P<P<number>> ~/~ number, ...

pstar = p; // OK
(pstar.x: string); // error

pstar = (new P: P<P<number>>); // OK
(pstar.x: string); // error

=====================================output=====================================
class P<X> {
  x: X;
} // this is like Promise

type Pstar<X> = X | Pstar<P<X>>; // this is like Promise*

var p: P<number> = new P();
(p.x: string); // error

var pstar: Pstar<number> = 0; // OK
(pstar: number); // error, but limit potentially unbounded number of errors!
// e.g., P<number> ~/~ number, P<P<number>> ~/~ number, ...

pstar = p; // OK
(pstar.x: string); // error

pstar = (new P(): P<P<number>>); // OK
(pstar.x: string); // error

================================================================================
`;

exports[`test2.js format 1`] = `
====================================options=====================================
parsers: ["flow"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
var a = []; // Array<X> ~> a
function bar() {
  a = a.concat([]); // terminate despite expanding types:
  // a ~> .concat(Array<Y>)
  // Array<X> ~> .concat(Array<Y>)
  // Array<X|Y> ~> a
  // Array<X|Y> ~> .concat(Array<Y>)
  // Array<X|Y|Y> ~> a
};

class A<X> {
  x: A<A<X>>;
}
var a_ = new A;
function foo0() {
  a_ = a_.x; // terminate despite expanding types
}

type T<X> = { y: S<X> };
type S<X> = T<S<X>>;
function foo1(b: S<*>) {
  b = b.y; // terminate despite expanding types, OK
  // S<*> = { y: S<S<*>> }
  // Both S<S<*>> and S<*> expand to { y: { y: ... }}.
}

class D<X> { }
class B<X> extends D<X> { }
class C<X> extends B<X> { }
((new C: C<number>): D<string>) // error: number ~/~ string

=====================================output=====================================
var a = []; // Array<X> ~> a
function bar() {
  a = a.concat([]); // terminate despite expanding types:
  // a ~> .concat(Array<Y>)
  // Array<X> ~> .concat(Array<Y>)
  // Array<X|Y> ~> a
  // Array<X|Y> ~> .concat(Array<Y>)
  // Array<X|Y|Y> ~> a
}

class A<X> {
  x: A<A<X>>;
}
var a_ = new A();
function foo0() {
  a_ = a_.x; // terminate despite expanding types
}

type T<X> = { y: S<X> };
type S<X> = T<S<X>>;
function foo1(b: S<*>) {
  b = b.y; // terminate despite expanding types, OK
  // S<*> = { y: S<S<*>> }
  // Both S<S<*>> and S<*> expand to { y: { y: ... }}.
}

class D<X> {}
class B<X> extends D<X> {}
class C<X> extends B<X> {}
((new C(): C<number>): D<string>); // error: number ~/~ string

================================================================================
`;

exports[`test3.js format 1`] = `
====================================options=====================================
parsers: ["flow"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
type I<X> = () => I<I<X>>;
type J<X> = () => J<J<X>>;

function foo(x: I<number>): J<number> {
  return x; // terminate despite expanding types, OK
  // I<number> and J<number> both expand to () => () => ...
}

type Q<X> = { x: X; }
type P<X> = () => Q<P<X>>;

function bar(x: P<number>): () => P<number> {
  return x; // terminate despite expanding types, error
  // P<number> = () => { x: P<number> }
  // () => P<number> = () => () => { x: P<number> }
}

=====================================output=====================================
type I<X> = () => I<I<X>>;
type J<X> = () => J<J<X>>;

function foo(x: I<number>): J<number> {
  return x; // terminate despite expanding types, OK
  // I<number> and J<number> both expand to () => () => ...
}

type Q<X> = { x: X };
type P<X> = () => Q<P<X>>;

function bar(x: P<number>): () => P<number> {
  return x; // terminate despite expanding types, error
  // P<number> = () => { x: P<number> }
  // () => P<number> = () => () => { x: P<number> }
}

================================================================================
`;

exports[`test4.js format 1`] = `
====================================options=====================================
parsers: ["flow"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
type T = T // cycle in type alias should not cause non-termination

=====================================output=====================================
type T = T; // cycle in type alias should not cause non-termination

================================================================================
`;

exports[`test5.js format 1`] = `
====================================options=====================================
parsers: ["flow"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
/* @flow */

type NestedArray<T> = Array<T | NestedArray<T>>;

function flatten<T>(arrArg: NestedArray<T>) {
  let arr = arrArg;
  while (true) {
    arr = Array.prototype.concat.apply([], arr);
  }
}

=====================================output=====================================
/* @flow */

type NestedArray<T> = Array<T | NestedArray<T>>;

function flatten<T>(arrArg: NestedArray<T>) {
  let arr = arrArg;
  while (true) {
    arr = Array.prototype.concat.apply([], arr);
  }
}

================================================================================
`;
