// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`abnormal.js format 1`] = `
====================================options=====================================
parsers: ["flow"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
/* @flow */

function foo(x: boolean) {
  var max = 10;
  for (var ii = 0; ii < max; ii++) {
    if (x) {
      continue;
    }
    return;
  }
  console.log('this is still reachable');
}

function bar(x: boolean) {
  var max = 0;
  for (var ii = 0; ii < max; ii++) {
    return;
  }
  console.log('this is still reachable');
}

function baz(x: boolean) {
  var max = 0;
  for (var ii = 0; ii < max; ii++) {
    continue;
  }
  console.log('this is still reachable');
}

function bliffl(x: boolean) {
  var max = 10;
  loop1: for (var ii = 0; ii < max; ii++) {
    loop2: for (var jj = 0; jj < max; jj++) {
      break loop1;
    }
    console.log('this is still reachable');
  }
  console.log('this is still reachable');
}

function corge(x: boolean) {
  var max = 0;
  for (var ii = 0; ii < max; ii++) {
    break;
  }
  console.log('this is still reachable');
}

=====================================output=====================================
/* @flow */

function foo(x: boolean) {
  var max = 10;
  for (var ii = 0; ii < max; ii++) {
    if (x) {
      continue;
    }
    return;
  }
  console.log("this is still reachable");
}

function bar(x: boolean) {
  var max = 0;
  for (var ii = 0; ii < max; ii++) {
    return;
  }
  console.log("this is still reachable");
}

function baz(x: boolean) {
  var max = 0;
  for (var ii = 0; ii < max; ii++) {
    continue;
  }
  console.log("this is still reachable");
}

function bliffl(x: boolean) {
  var max = 10;
  loop1: for (var ii = 0; ii < max; ii++) {
    loop2: for (var jj = 0; jj < max; jj++) {
      break loop1;
    }
    console.log("this is still reachable");
  }
  console.log("this is still reachable");
}

function corge(x: boolean) {
  var max = 0;
  for (var ii = 0; ii < max; ii++) {
    break;
  }
  console.log("this is still reachable");
}

================================================================================
`;

exports[`abnormal_for_in.js format 1`] = `
====================================options=====================================
parsers: ["flow"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
function foo(x: boolean) {
  var obj = { a: 1, b: 2};
  for (var prop in obj) {
    if (x) {
      continue;
    }
    return;
  }
  console.log('this is still reachable');
}

function bar(x: boolean) {
  for (var prop in {}) {
    return;
  }
  console.log('this is still reachable');
}

function baz(x: boolean) {
  for (var prop in {}) {
    continue;
  }
  console.log('this is still reachable');
}

function bliffl(x: boolean) {
  var obj = { a: 1, b: 2};
  loop1: for (var prop1 in obj) {
    loop2: for (var prop2 in obj) {
      break loop1;
    }
    console.log('this is still reachable');
  }
  console.log('this is still reachable');
}

function corge(x: boolean) {
  for (var prop in {}) {
    break;
  }
  console.log('this is still reachable');
}

=====================================output=====================================
function foo(x: boolean) {
  var obj = { a: 1, b: 2 };
  for (var prop in obj) {
    if (x) {
      continue;
    }
    return;
  }
  console.log("this is still reachable");
}

function bar(x: boolean) {
  for (var prop in {}) {
    return;
  }
  console.log("this is still reachable");
}

function baz(x: boolean) {
  for (var prop in {}) {
    continue;
  }
  console.log("this is still reachable");
}

function bliffl(x: boolean) {
  var obj = { a: 1, b: 2 };
  loop1: for (var prop1 in obj) {
    loop2: for (var prop2 in obj) {
      break loop1;
    }
    console.log("this is still reachable");
  }
  console.log("this is still reachable");
}

function corge(x: boolean) {
  for (var prop in {}) {
    break;
  }
  console.log("this is still reachable");
}

================================================================================
`;

exports[`abnormal_for_of.js format 1`] = `
====================================options=====================================
parsers: ["flow"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
function foo(x: boolean) {
  var arr = [1, 2, 3];
  for (var elem of arr) {
    if (x) {
      continue;
    }
    return;
  }
  console.log('this is still reachable');
}

function bar(x: boolean) {
  for (var elem of []) {
    return;
  }
  console.log('this is still reachable');
}

function baz(x: boolean) {
  for (var elem of []) {
    continue;
  }
  console.log('this is still reachable');
}

function bliffl(x: boolean) {
  var arr = [1, 2, 3];
  loop1: for (var elem of arr) {
    loop2: for (var elem of arr) {
      break loop1;
    }
    console.log('this is still reachable');
  }
  console.log('this is still reachable');
}

function corge(x: boolean) {
  for (var elem of []) {
    break;
  }
  console.log('this is still reachable');
}

=====================================output=====================================
function foo(x: boolean) {
  var arr = [1, 2, 3];
  for (var elem of arr) {
    if (x) {
      continue;
    }
    return;
  }
  console.log("this is still reachable");
}

function bar(x: boolean) {
  for (var elem of []) {
    return;
  }
  console.log("this is still reachable");
}

function baz(x: boolean) {
  for (var elem of []) {
    continue;
  }
  console.log("this is still reachable");
}

function bliffl(x: boolean) {
  var arr = [1, 2, 3];
  loop1: for (var elem of arr) {
    loop2: for (var elem of arr) {
      break loop1;
    }
    console.log("this is still reachable");
  }
  console.log("this is still reachable");
}

function corge(x: boolean) {
  for (var elem of []) {
    break;
  }
  console.log("this is still reachable");
}

================================================================================
`;
