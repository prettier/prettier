
.foo {
  prop: -($grid-gutter-width / 2);
  prop1: -(  $grid-gutter-width  /  2  );
  prop2: -$grid-gutter-width / 2;
  prop3: +($grid-gutter-width / 2);
  prop4: 10px/8px; /* Plain CSS, no division */
  prop5: $width / 2; /* Uses a variable, does division */
  prop6: round(1.5) / 2; /* Uses a function, does division */
  prop7: (500px / 2); /* Uses parentheses, does division */
  prop8: 5px + 8px / 2px; //* Uses +, does division */
  prop9: (italic bold 10px/8px); /* In a list, parentheses don't count */
  prop10: #010203 + #040506;
  prop11: #010203 * 2;
  prop12: rgba(255, 0, 0, 0.75) + rgba(0, 255, 0, 0.75);
  prop13: progid:DXImageTransform.Microsoft.gradient(enabled='false', startColorstr='#{ie-hex-str($green)}', endColorstr='#{ie-hex-str($translucent-red)}');
  prop14: e + -resize;
  prop15: sans- + "serif";
  prop16: 1em + (2em * 3);
  prop17: rotate(-2deg);
  prop18:  rotate(  -2deg  )  ;
  _:_;
  prop19: 10 - ($grid-gutter-width / 2);
  prop20: 10 + -($grid-gutter-width / 2);
  prop21:  10  +  -  (  $grid-gutter-width  /  2  )  ;
  prop22: - ( $grid-gutter-width / 2 ) ;
  prop23:  -  (  $grid-gutter-width  /  2  )  ;
  prop24: -$grid-gutter-width;
  prop25: + ( $grid-gutter-width / 2 ) ;
  prop26:  +  (  $grid-gutter-width  /  2  )  ;
  prop27: +$grid-gutter-width;
  prop28: --($grid-gutter-width / 2);
  prop28: ++($grid-gutter-width / 2);
  prop29:  rotate(  -  2deg  )  ;
}

$last:nth($juggler,length($juggler));
$x:if($last%2==0,1/2,3/2);
$new:pow($last,$x);
$sequence:1,1 1,2 1,1 2 1 1, 1 1 1 2 2 1;
$new-entry:();
$new-entry : ( ) ;
$new-entry  :  (  )  ;
$new-entry
:
(
)
;

body:before {
  content: quote(to-string(fibonacci(100), ' \A '));
  white-space: pre-wrap;
}

width: ((100% - (($numPerRow - 1) * $margin)) / $numPerRow);
width
:
(
(
100%
-
(
(
$numPerRow
-
1
)
*
$margin
)
)
/
$numPerRow
)
;

a:nth-child(#{$numPerRow}n) {
  margin-right: 0;
  margin-bottom: 0;
}

@function em($pixels, $context: $browser-context) {
  @return #{ $pixels / $context }em
}

.navigation {
  @extend %updated-#{$flag};
  @extend .selected-#{$flag};
  @extend %#{$item};
}

.icon-#{$icon-name} {
  background-image: '/images/#{$icon-name}.svg';
}

$extmods:(eot:"?",svg:"#" + str-replace($name," ","_"));

@mixin keyframes {@-moz-keyframes{@content;}@-webkit-keyframes{@content;}}

@function gcd($a,$b){
  // From: http://rosettacode.org/wiki/Greatest_common_divisor#JavaScript
  @if ($b != 0) {
    @return gcd($b,$a % $b);
  }@else{
    @return abs($a);
  }
}

$colors: (
primary: (
base: #00abc9,
light: #daf1f6,
dark: #12799a
),
secondary: (
base: #424d55,
light: #ccc,
lightest: #efefef,
dark: #404247
),
success: (
base: #bbd33e,
light: #eaf0c6
)
);

@function color($color, $tone: "base") {
@return map-get(map-get($colors, $color), $tone);
}
