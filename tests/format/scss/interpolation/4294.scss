
a {
  content: "#{".5"}";
  content: my-fn("_");
  content: "#{my-fn("_")}";
  content: my-fn("-");
  content: "#{my-fn("-")}";
  content: my-fn("-a");
  content: "#{my-fn("-a")}";
  content: my-fn("a-");
  content: "#{my-fn("a-")}";
  content: my-fn("foo");
  content: "#{my-fn("foo")}";
  content: 1 "#{my-fn("foo")}" 2;
  content: foo "#{my-fn("foo")}" bar;
  content: "foo #{$description} bar";

  content: "#{my-fn("foo","bar")}";
  content: "#{my-fn( "foo" , "bar" )}";
  content: "#{my-fn(  "foo"  ,  "bar"  )}";

  content: '#{my-fn("foo")}';
  content: '#{my-fn('foo')}';
  content: "#{my-fn('foo')}";
  content: "#{my-fn("foo")}";
}

@mixin theme($css-property, $css-value, $theme-classes: t) {
  @each $selector in & {
    @each $class in $theme-classes {
      @each $theme, $theme-properties in c(themes) {
      $value: $css-value;

        @each $theme-name, $theme-value in $theme-properties {
          $rgba-value: "rgba(#{red($theme-value)}, #{green($theme-value)}, #{blue($theme-value)}";
          $value: str-replace($value, "rgba(${#{$theme-name}}", $rgba-value);
          $value: str-replace($value, "${#{$theme-name}}", $theme-value);
        }

        @at-root .#{$class}-#{join($theme, $selector)} {
          #{$css-property}: unquote($value);
        }
      }
    }
  }
}
