// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`3719.scss - {"trailingComma":"es5"} format 1`] = `
====================================options=====================================
parsers: ["scss"]
printWidth: 80
trailingComma: "es5"
                                                                                | printWidth
=====================================input======================================
$sm-only: '(min-width: 768px) and (max-width: 991px)';
$lg-and-up: '(min-width: 1200px)';

@media screen and #{$sm-only, $lg-and-up} {
  color: #000;
}

=====================================output=====================================
$sm-only: "(min-width: 768px) and (max-width: 991px)";
$lg-and-up: "(min-width: 1200px)";

@media screen and #{$sm-only, $lg-and-up} {
  color: #000;
}

================================================================================
`;

exports[`3719.scss - {"trailingComma":"none"} format 1`] = `
====================================options=====================================
parsers: ["scss"]
printWidth: 80
trailingComma: "none"
                                                                                | printWidth
=====================================input======================================
$sm-only: '(min-width: 768px) and (max-width: 991px)';
$lg-and-up: '(min-width: 1200px)';

@media screen and #{$sm-only, $lg-and-up} {
  color: #000;
}

=====================================output=====================================
$sm-only: "(min-width: 768px) and (max-width: 991px)";
$lg-and-up: "(min-width: 1200px)";

@media screen and #{$sm-only, $lg-and-up} {
  color: #000;
}

================================================================================
`;

exports[`3943.scss - {"trailingComma":"es5"} format 1`] = `
====================================options=====================================
parsers: ["scss"]
printWidth: 80
trailingComma: "es5"
                                                                                | printWidth
=====================================input======================================
.class-#{$var} {
  #{$var}: #7b3d66;
  #{$attr}-color: blue;
  #{$prop}-#{$side}: $value;
  background-#{$var}: #7b3d66;
  animation-name: #{var};
  line-height: #{strip-unit($line-height)}em;
  height: 1#{$var};
  width: calc(100% - #{$sidebar-width});
  max-width: calc(#{$m*100}vw #{$sign} #{$b});
  font: #{$font-size}/#{$line-height};
  content: "I have #{8 + 2} books on SASS!";
  border: #{$var} #{$var} #{$var};
  filter: #{$var}#{$var}#{$var};
  prop:  #{  $var  +  $var  }  #{  $var  +  $var  }  #{  $var  +  $var  };
  prop2:
      #{
      $var
      +
      $var
      }

      #{
      $var
      +
      $var
      }

      #{
      $var
      +
      $var
      }
      ;
  prop3:

      #{

      $var

      +

      $var

      }

      #{

      $var

      +

      $var

      }

      #{

      $var

      +

      $var

      }
      ;
  prop4: -#{$loader-icon-duration};
  prop5: +#{$loader-icon-duration};
  prop6: calc(-#{$loader-icon-duration} + 10);
  prop7: calc(10 + -#{$loader-icon-duration});
}

/* Framework version for the generated CSS is #{$version}. */

.selector {
  foo: bar;
  #{$active} {
    baz: qux;
  }
}

.el:nth-of-type(#{$i}) {}

@media #{$value} {}

$foundation-dir: 'foundation';
@import url('#{$foundation-dir}/components/grid');
@import url(#{$foundation-dir}/components/grid);
@import url($foundation-dir/components/grid);
@import url($foundation-dir+"/components/grid");

@function get-font-family($family) {
  @return $family;
}
@import url("//fonts.googleapis.com/css?family=#{ get-font-family('Roboto') }:100,300,500,700,900&display=swap");
@import url(//fonts.googleapis.com/css?family=#{ get-font-family('Roboto') }:100,300,500,700,900&display=swap);


@keyframes loader {
  0% {
    transform: translate3d(0, 0, 0);
  }

  #{50% - $loader-icon-duration} {
    transform: translate3d(0, $bounce-height, 0);
  }

  50% {
    transform: translate3d(0, $bounce-height, 0) scale($loader-bounce-horizontal-expansion, $loader-bounce-vertical-compression);
  }
}

$icons: wifi "\\600", wifi-hotspot "\\601", weather "\\602";

@each $icon in $icons {
  .icon-#{nth($icon, 1)}, %icon-#{nth($icon, 1)} {
    content: "#{nth($icon, 2)}";
  }
}

=====================================output=====================================
.class-#{$var} {
  #{$var}: #7b3d66;
  #{$attr}-color: blue;
  #{$prop}-#{$side}: $value;
  background-#{$var}: #7b3d66;
  animation-name: #{var};
  line-height: #{strip-unit($line-height)}em;
  height: 1#{$var};
  width: calc(100% - #{$sidebar-width});
  max-width: calc(#{$m * 100}vw #{$sign} #{$b});
  font: #{$font-size}/#{$line-height};
  content: "I have #{8 + 2} books on SASS!";
  border: #{$var} #{$var} #{$var};
  filter: #{$var}#{$var}#{$var};
  prop: #{$var + $var} #{$var + $var} #{$var + $var};
  prop2: #{$var + $var} #{$var + $var} #{$var + $var};
  prop3: #{$var + $var} #{$var + $var} #{$var + $var};
  prop4: -#{$loader-icon-duration};
  prop5: +#{$loader-icon-duration};
  prop6: calc(-#{$loader-icon-duration} + 10);
  prop7: calc(10 + -#{$loader-icon-duration});
}

/* Framework version for the generated CSS is #{$version}. */

.selector {
  foo: bar;
  #{$active} {
    baz: qux;
  }
}

.el:nth-of-type(#{$i}) {
}

@media #{$value} {
}

$foundation-dir: "foundation";
@import url("#{$foundation-dir}/components/grid");
@import url(#{$foundation-dir}/components/grid);
@import url($foundation-dir/components/grid);
@import url($foundation-dir + "/components/grid");

@function get-font-family($family) {
  @return $family;
}
@import url("//fonts.googleapis.com/css?family=#{ get-font-family('Roboto') }:100,300,500,700,900&display=swap");
@import url(//fonts.googleapis.com/css?family=#{ get-font-family('Roboto') }:100,300,500,700,900&display=swap);

@keyframes loader {
  0% {
    transform: translate3d(0, 0, 0);
  }

  #{50% - $loader-icon-duration} {
    transform: translate3d(0, $bounce-height, 0);
  }

  50% {
    transform: translate3d(0, $bounce-height, 0)
      scale(
        $loader-bounce-horizontal-expansion,
        $loader-bounce-vertical-compression
      );
  }
}

$icons:
  wifi "\\600",
  wifi-hotspot "\\601",
  weather "\\602";

@each $icon in $icons {
  .icon-#{nth($icon, 1)},
  %icon-#{nth($icon, 1)} {
    content: "#{nth($icon, 2)}";
  }
}

================================================================================
`;

exports[`3943.scss - {"trailingComma":"none"} format 1`] = `
====================================options=====================================
parsers: ["scss"]
printWidth: 80
trailingComma: "none"
                                                                                | printWidth
=====================================input======================================
.class-#{$var} {
  #{$var}: #7b3d66;
  #{$attr}-color: blue;
  #{$prop}-#{$side}: $value;
  background-#{$var}: #7b3d66;
  animation-name: #{var};
  line-height: #{strip-unit($line-height)}em;
  height: 1#{$var};
  width: calc(100% - #{$sidebar-width});
  max-width: calc(#{$m*100}vw #{$sign} #{$b});
  font: #{$font-size}/#{$line-height};
  content: "I have #{8 + 2} books on SASS!";
  border: #{$var} #{$var} #{$var};
  filter: #{$var}#{$var}#{$var};
  prop:  #{  $var  +  $var  }  #{  $var  +  $var  }  #{  $var  +  $var  };
  prop2:
      #{
      $var
      +
      $var
      }

      #{
      $var
      +
      $var
      }

      #{
      $var
      +
      $var
      }
      ;
  prop3:

      #{

      $var

      +

      $var

      }

      #{

      $var

      +

      $var

      }

      #{

      $var

      +

      $var

      }
      ;
  prop4: -#{$loader-icon-duration};
  prop5: +#{$loader-icon-duration};
  prop6: calc(-#{$loader-icon-duration} + 10);
  prop7: calc(10 + -#{$loader-icon-duration});
}

/* Framework version for the generated CSS is #{$version}. */

.selector {
  foo: bar;
  #{$active} {
    baz: qux;
  }
}

.el:nth-of-type(#{$i}) {}

@media #{$value} {}

$foundation-dir: 'foundation';
@import url('#{$foundation-dir}/components/grid');
@import url(#{$foundation-dir}/components/grid);
@import url($foundation-dir/components/grid);
@import url($foundation-dir+"/components/grid");

@function get-font-family($family) {
  @return $family;
}
@import url("//fonts.googleapis.com/css?family=#{ get-font-family('Roboto') }:100,300,500,700,900&display=swap");
@import url(//fonts.googleapis.com/css?family=#{ get-font-family('Roboto') }:100,300,500,700,900&display=swap);


@keyframes loader {
  0% {
    transform: translate3d(0, 0, 0);
  }

  #{50% - $loader-icon-duration} {
    transform: translate3d(0, $bounce-height, 0);
  }

  50% {
    transform: translate3d(0, $bounce-height, 0) scale($loader-bounce-horizontal-expansion, $loader-bounce-vertical-compression);
  }
}

$icons: wifi "\\600", wifi-hotspot "\\601", weather "\\602";

@each $icon in $icons {
  .icon-#{nth($icon, 1)}, %icon-#{nth($icon, 1)} {
    content: "#{nth($icon, 2)}";
  }
}

=====================================output=====================================
.class-#{$var} {
  #{$var}: #7b3d66;
  #{$attr}-color: blue;
  #{$prop}-#{$side}: $value;
  background-#{$var}: #7b3d66;
  animation-name: #{var};
  line-height: #{strip-unit($line-height)}em;
  height: 1#{$var};
  width: calc(100% - #{$sidebar-width});
  max-width: calc(#{$m * 100}vw #{$sign} #{$b});
  font: #{$font-size}/#{$line-height};
  content: "I have #{8 + 2} books on SASS!";
  border: #{$var} #{$var} #{$var};
  filter: #{$var}#{$var}#{$var};
  prop: #{$var + $var} #{$var + $var} #{$var + $var};
  prop2: #{$var + $var} #{$var + $var} #{$var + $var};
  prop3: #{$var + $var} #{$var + $var} #{$var + $var};
  prop4: -#{$loader-icon-duration};
  prop5: +#{$loader-icon-duration};
  prop6: calc(-#{$loader-icon-duration} + 10);
  prop7: calc(10 + -#{$loader-icon-duration});
}

/* Framework version for the generated CSS is #{$version}. */

.selector {
  foo: bar;
  #{$active} {
    baz: qux;
  }
}

.el:nth-of-type(#{$i}) {
}

@media #{$value} {
}

$foundation-dir: "foundation";
@import url("#{$foundation-dir}/components/grid");
@import url(#{$foundation-dir}/components/grid);
@import url($foundation-dir/components/grid);
@import url($foundation-dir + "/components/grid");

@function get-font-family($family) {
  @return $family;
}
@import url("//fonts.googleapis.com/css?family=#{ get-font-family('Roboto') }:100,300,500,700,900&display=swap");
@import url(//fonts.googleapis.com/css?family=#{ get-font-family('Roboto') }:100,300,500,700,900&display=swap);

@keyframes loader {
  0% {
    transform: translate3d(0, 0, 0);
  }

  #{50% - $loader-icon-duration} {
    transform: translate3d(0, $bounce-height, 0);
  }

  50% {
    transform: translate3d(0, $bounce-height, 0)
      scale(
        $loader-bounce-horizontal-expansion,
        $loader-bounce-vertical-compression
      );
  }
}

$icons:
  wifi "\\600",
  wifi-hotspot "\\601",
  weather "\\602";

@each $icon in $icons {
  .icon-#{nth($icon, 1)},
  %icon-#{nth($icon, 1)} {
    content: "#{nth($icon, 2)}";
  }
}

================================================================================
`;

exports[`4294.scss - {"trailingComma":"es5"} format 1`] = `
====================================options=====================================
parsers: ["scss"]
printWidth: 80
trailingComma: "es5"
                                                                                | printWidth
=====================================input======================================

a {
  content: "#{".5"}";
  content: my-fn("_");
  content: "#{my-fn("_")}";
  content: my-fn("-");
  content: "#{my-fn("-")}";
  content: my-fn("-a");
  content: "#{my-fn("-a")}";
  content: my-fn("a-");
  content: "#{my-fn("a-")}";
  content: my-fn("foo");
  content: "#{my-fn("foo")}";
  content: 1 "#{my-fn("foo")}" 2;
  content: foo "#{my-fn("foo")}" bar;
  content: "foo #{$description} bar";

  content: "#{my-fn("foo","bar")}";
  content: "#{my-fn( "foo" , "bar" )}";
  content: "#{my-fn(  "foo"  ,  "bar"  )}";

  content: '#{my-fn("foo")}';
  content: '#{my-fn('foo')}';
  content: "#{my-fn('foo')}";
  content: "#{my-fn("foo")}";
}

@mixin theme($css-property, $css-value, $theme-classes: t) {
  @each $selector in & {
    @each $class in $theme-classes {
      @each $theme, $theme-properties in c(themes) {
      $value: $css-value;

        @each $theme-name, $theme-value in $theme-properties {
          $rgba-value: "rgba(#{red($theme-value)}, #{green($theme-value)}, #{blue($theme-value)}";
          $value: str-replace($value, "rgba(\${#{$theme-name}}", $rgba-value);
          $value: str-replace($value, "\${#{$theme-name}}", $theme-value);
        }

        @at-root .#{$class}-#{join($theme, $selector)} {
          #{$css-property}: unquote($value);
        }
      }
    }
  }
}

=====================================output=====================================
a {
  content: "#{"0.5"}";
  content: my-fn("_");
  content: "#{my-fn("_")}";
  content: my-fn("-");
  content: "#{my-fn("-")}";
  content: my-fn("-a");
  content: "#{my-fn("-a")}";
  content: my-fn("a-");
  content: "#{my-fn("a-")}";
  content: my-fn("foo");
  content: "#{my-fn("foo")}";
  content: 1 "#{my-fn("foo")}" 2;
  content: foo "#{my-fn("foo")}" bar;
  content: "foo #{$description} bar";

  content: "#{my-fn("foo","bar")}";
  content: "#{my-fn( "foo" , "bar" )}";
  content: "#{my-fn(  "foo"  ,  "bar"  )}";

  content: '#{my-fn("foo")}';
  content: "#{my-fn("foo")}";
  content: "#{my-fn('foo')}";
  content: "#{my-fn("foo")}";
}

@mixin theme($css-property, $css-value, $theme-classes: t) {
  @each $selector in & {
    @each $class in $theme-classes {
      @each $theme, $theme-properties in c(themes) {
        $value: $css-value;

        @each $theme-name, $theme-value in $theme-properties {
          $rgba-value: "rgba(#{red($theme-value)}, #{green($theme-value)}, #{blue($theme-value)}";
          $value: str-replace($value, "rgba(\${#{$theme-name}}", $rgba-value);
          $value: str-replace($value, "\${#{$theme-name}}", $theme-value);
        }

        @at-root .#{$class}-#{join($theme, $selector)} {
          #{$css-property}: unquote($value);
        }
      }
    }
  }
}

================================================================================
`;

exports[`4294.scss - {"trailingComma":"none"} format 1`] = `
====================================options=====================================
parsers: ["scss"]
printWidth: 80
trailingComma: "none"
                                                                                | printWidth
=====================================input======================================

a {
  content: "#{".5"}";
  content: my-fn("_");
  content: "#{my-fn("_")}";
  content: my-fn("-");
  content: "#{my-fn("-")}";
  content: my-fn("-a");
  content: "#{my-fn("-a")}";
  content: my-fn("a-");
  content: "#{my-fn("a-")}";
  content: my-fn("foo");
  content: "#{my-fn("foo")}";
  content: 1 "#{my-fn("foo")}" 2;
  content: foo "#{my-fn("foo")}" bar;
  content: "foo #{$description} bar";

  content: "#{my-fn("foo","bar")}";
  content: "#{my-fn( "foo" , "bar" )}";
  content: "#{my-fn(  "foo"  ,  "bar"  )}";

  content: '#{my-fn("foo")}';
  content: '#{my-fn('foo')}';
  content: "#{my-fn('foo')}";
  content: "#{my-fn("foo")}";
}

@mixin theme($css-property, $css-value, $theme-classes: t) {
  @each $selector in & {
    @each $class in $theme-classes {
      @each $theme, $theme-properties in c(themes) {
      $value: $css-value;

        @each $theme-name, $theme-value in $theme-properties {
          $rgba-value: "rgba(#{red($theme-value)}, #{green($theme-value)}, #{blue($theme-value)}";
          $value: str-replace($value, "rgba(\${#{$theme-name}}", $rgba-value);
          $value: str-replace($value, "\${#{$theme-name}}", $theme-value);
        }

        @at-root .#{$class}-#{join($theme, $selector)} {
          #{$css-property}: unquote($value);
        }
      }
    }
  }
}

=====================================output=====================================
a {
  content: "#{"0.5"}";
  content: my-fn("_");
  content: "#{my-fn("_")}";
  content: my-fn("-");
  content: "#{my-fn("-")}";
  content: my-fn("-a");
  content: "#{my-fn("-a")}";
  content: my-fn("a-");
  content: "#{my-fn("a-")}";
  content: my-fn("foo");
  content: "#{my-fn("foo")}";
  content: 1 "#{my-fn("foo")}" 2;
  content: foo "#{my-fn("foo")}" bar;
  content: "foo #{$description} bar";

  content: "#{my-fn("foo","bar")}";
  content: "#{my-fn( "foo" , "bar" )}";
  content: "#{my-fn(  "foo"  ,  "bar"  )}";

  content: '#{my-fn("foo")}';
  content: "#{my-fn("foo")}";
  content: "#{my-fn('foo')}";
  content: "#{my-fn("foo")}";
}

@mixin theme($css-property, $css-value, $theme-classes: t) {
  @each $selector in & {
    @each $class in $theme-classes {
      @each $theme, $theme-properties in c(themes) {
        $value: $css-value;

        @each $theme-name, $theme-value in $theme-properties {
          $rgba-value: "rgba(#{red($theme-value)}, #{green($theme-value)}, #{blue($theme-value)}";
          $value: str-replace($value, "rgba(\${#{$theme-name}}", $rgba-value);
          $value: str-replace($value, "\${#{$theme-name}}", $theme-value);
        }

        @at-root .#{$class}-#{join($theme, $selector)} {
          #{$css-property}: unquote($value);
        }
      }
    }
  }
}

================================================================================
`;
