// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`escaped.js - {"trailingComma":"all"} format 1`] = `
====================================options=====================================
parsers: ["babel", "flow"]
printWidth: 80
trailingComma: "all"
                                                                                | printWidth
=====================================input======================================
export const MSG_GENERIC_OPERATION_FAILURE_BODY_1 =
  goog.getMsg("That's all we know");

export const MSG_GENERIC_OPERATION_FAILURE_BODY_2 =
  goog.getMsg("That\\'s all we know");

=====================================output=====================================
export const MSG_GENERIC_OPERATION_FAILURE_BODY_1 =
  goog.getMsg("That's all we know");

export const MSG_GENERIC_OPERATION_FAILURE_BODY_2 =
  goog.getMsg("That's all we know");

================================================================================
`;

exports[`escaped.js - {"trailingComma":"es5"} format 1`] = `
====================================options=====================================
parsers: ["babel", "flow"]
printWidth: 80
trailingComma: "es5"
                                                                                | printWidth
=====================================input======================================
export const MSG_GENERIC_OPERATION_FAILURE_BODY_1 =
  goog.getMsg("That's all we know");

export const MSG_GENERIC_OPERATION_FAILURE_BODY_2 =
  goog.getMsg("That\\'s all we know");

=====================================output=====================================
export const MSG_GENERIC_OPERATION_FAILURE_BODY_1 =
  goog.getMsg("That's all we know");

export const MSG_GENERIC_OPERATION_FAILURE_BODY_2 =
  goog.getMsg("That's all we know");

================================================================================
`;

exports[`multiline-literal.js - {"trailingComma":"all"} format 1`] = `
====================================options=====================================
parsers: ["babel", "flow"]
printWidth: 80
trailingComma: "all"
                                                                                | printWidth
=====================================input======================================
// https://github.com/prettier/prettier/pull/13274

const loremIpsumFooBazBar1 = 'Multiline string\\
         Multiline string\\
'

const loremIpsumFooBazBar2 = 'Multiline string\\
         Multiline string\\
         Multiline string'

=====================================output=====================================
// https://github.com/prettier/prettier/pull/13274

const loremIpsumFooBazBar1 =
  "Multiline string\\
         Multiline string\\
";

const loremIpsumFooBazBar2 =
  "Multiline string\\
         Multiline string\\
         Multiline string";

================================================================================
`;

exports[`multiline-literal.js - {"trailingComma":"es5"} format 1`] = `
====================================options=====================================
parsers: ["babel", "flow"]
printWidth: 80
trailingComma: "es5"
                                                                                | printWidth
=====================================input======================================
// https://github.com/prettier/prettier/pull/13274

const loremIpsumFooBazBar1 = 'Multiline string\\
         Multiline string\\
'

const loremIpsumFooBazBar2 = 'Multiline string\\
         Multiline string\\
         Multiline string'

=====================================output=====================================
// https://github.com/prettier/prettier/pull/13274

const loremIpsumFooBazBar1 =
  "Multiline string\\
         Multiline string\\
";

const loremIpsumFooBazBar2 =
  "Multiline string\\
         Multiline string\\
         Multiline string";

================================================================================
`;

exports[`non-octal-eight-and-nine.js - {"trailingComma":"all"} [acorn] format 1`] = `
"Invalid escape sequence (3:3)
  1 | // https://github.com/babel/babel/pull/11852
  2 |
> 3 | "\\8","\\9";
    |   ^
  4 | () => {
  5 |   "use strict";
  6 |   "\\8", "\\9";
Cause: Invalid escape sequence (3:2)"
`;

exports[`non-octal-eight-and-nine.js - {"trailingComma":"all"} [espree] format 1`] = `
"Invalid escape sequence (3:3)
  1 | // https://github.com/babel/babel/pull/11852
  2 |
> 3 | "\\8","\\9";
    |   ^
  4 | () => {
  5 |   "use strict";
  6 |   "\\8", "\\9";
Cause: Invalid escape sequence"
`;

exports[`non-octal-eight-and-nine.js - {"trailingComma":"all"} [meriyah] format 1`] = `
"Escapes \\8 or \\9 are not syntactically valid escapes (3:1)
  1 | // https://github.com/babel/babel/pull/11852
  2 |
> 3 | "\\8","\\9";
    | ^^
  4 | () => {
  5 |   "use strict";
  6 |   "\\8", "\\9";
Cause: [3:0-3:2]: Escapes \\8 or \\9 are not syntactically valid escapes"
`;

exports[`non-octal-eight-and-nine.js - {"trailingComma":"all"} format 1`] = `
====================================options=====================================
parsers: ["babel", "flow"]
printWidth: 80
trailingComma: "all"
                                                                                | printWidth
=====================================input======================================
// https://github.com/babel/babel/pull/11852

"\\8","\\9";
() => {
  "use strict";
  "\\8", "\\9";
}

=====================================output=====================================
// https://github.com/babel/babel/pull/11852

"\\8", "\\9";
() => {
  "use strict";
  "\\8", "\\9";
};

================================================================================
`;

exports[`non-octal-eight-and-nine.js - {"trailingComma":"es5"} [acorn] format 1`] = `
"Invalid escape sequence (3:3)
  1 | // https://github.com/babel/babel/pull/11852
  2 |
> 3 | "\\8","\\9";
    |   ^
  4 | () => {
  5 |   "use strict";
  6 |   "\\8", "\\9";
Cause: Invalid escape sequence (3:2)"
`;

exports[`non-octal-eight-and-nine.js - {"trailingComma":"es5"} [espree] format 1`] = `
"Invalid escape sequence (3:3)
  1 | // https://github.com/babel/babel/pull/11852
  2 |
> 3 | "\\8","\\9";
    |   ^
  4 | () => {
  5 |   "use strict";
  6 |   "\\8", "\\9";
Cause: Invalid escape sequence"
`;

exports[`non-octal-eight-and-nine.js - {"trailingComma":"es5"} [meriyah] format 1`] = `
"Escapes \\8 or \\9 are not syntactically valid escapes (3:1)
  1 | // https://github.com/babel/babel/pull/11852
  2 |
> 3 | "\\8","\\9";
    | ^^
  4 | () => {
  5 |   "use strict";
  6 |   "\\8", "\\9";
Cause: [3:0-3:2]: Escapes \\8 or \\9 are not syntactically valid escapes"
`;

exports[`non-octal-eight-and-nine.js - {"trailingComma":"es5"} format 1`] = `
====================================options=====================================
parsers: ["babel", "flow"]
printWidth: 80
trailingComma: "es5"
                                                                                | printWidth
=====================================input======================================
// https://github.com/babel/babel/pull/11852

"\\8","\\9";
() => {
  "use strict";
  "\\8", "\\9";
}

=====================================output=====================================
// https://github.com/babel/babel/pull/11852

"\\8", "\\9";
() => {
  "use strict";
  "\\8", "\\9";
};

================================================================================
`;

exports[`strings.js - {"trailingComma":"all"} format 1`] = `
====================================options=====================================
parsers: ["babel", "flow"]
printWidth: 80
trailingComma: "all"
                                                                                | printWidth
=====================================input======================================
[
  "abc",
  'abc',

  '\\'',

  '"',
  '\\"',
  '\\\\"',

  "'",
  "\\'",
  "\\\\'",

  "'\\"",
  '\\'"',

  '\\\\',
  "\\\\",

  '\\0',
  'üê∂',

  '\\uD801\\uDC28',
];

=====================================output=====================================
[
  "abc",
  "abc",

  "'",

  '"',
  '"',
  '\\\\"',

  "'",
  "'",
  "\\\\'",

  "'\\"",
  "'\\"",

  "\\\\",
  "\\\\",

  "\\0",
  "üê∂",

  "\\uD801\\uDC28",
];

================================================================================
`;

exports[`strings.js - {"trailingComma":"es5"} format 1`] = `
====================================options=====================================
parsers: ["babel", "flow"]
printWidth: 80
trailingComma: "es5"
                                                                                | printWidth
=====================================input======================================
[
  "abc",
  'abc',

  '\\'',

  '"',
  '\\"',
  '\\\\"',

  "'",
  "\\'",
  "\\\\'",

  "'\\"",
  '\\'"',

  '\\\\',
  "\\\\",

  '\\0',
  'üê∂',

  '\\uD801\\uDC28',
];

=====================================output=====================================
[
  "abc",
  "abc",

  "'",

  '"',
  '"',
  '\\\\"',

  "'",
  "'",
  "\\\\'",

  "'\\"",
  "'\\"",

  "\\\\",
  "\\\\",

  "\\0",
  "üê∂",

  "\\uD801\\uDC28",
];

================================================================================
`;

exports[`template-literals.js - {"trailingComma":"all"} format 1`] = `
====================================options=====================================
parsers: ["babel", "flow"]
printWidth: 80
trailingComma: "all"
                                                                                | printWidth
=====================================input======================================
foo(\`a long string \${ 1 + 2 + 3 + 2 + 3 + 2 + 3 + 2 + 3 + 2 + 3 + 2 + 3 + 2 + 3 + 2 + 3 } with expr\`);

const x = \`a long string \${ 1 + 2 + 3 + 2 + 3 + 2 + 3 + 2 + 3 + 2 + 3 + 2 + ( function() {return 3 })() + 3 + 2 + 3 + 2 + 3 } with expr\`;

foo(\`a long string \${ 1 + 2 + 3 + 2 + 3 + 2 + 3 + 2 + 3 + 2 + 3 + 2 + ( function() {
  const x = 5;

  return x;
 })() + 3 + 2 + 3 + 2 + 3 } with expr\`);

pipe.write(
  \`\\n  \${chalk.dim(\`\\u203A and \${more} more \${more} more \${more} more \${more}\`)}\`,
);

// https://github.com/prettier/prettier/issues/1662#issue-230406820
const content = \`
const env = \${ JSON.stringify({
	assetsRootUrl: env.assetsRootUrl,
	env: env.env,
	role: "client",
	adsfafa: "sdfsdff",
	asdfasff: "wefwefw",
  	fefef: "sf sdfs fdsfdsf s dfsfds"
}, null, "\\t") });
\`;

// https://github.com/prettier/prettier/issues/821#issue-210557749
f(\`\${{
  a: 4,
  b: 9,
}}\`);

// https://github.com/prettier/prettier/issues/1183#issue-220863505
const makeBody = (store, assets, html) =>
  \`<!doctype html>\${
    ReactDOMServer.renderToStaticMarkup(
      <Html
        headScripts={compact([ assets.javascript.head ])}
        headStyles={compact([ assets.styles.body, assets.styles.head ])}
        bodyScripts={compact([ assets.javascript.body ])}
        bodyStyles={[]}
        stringScripts={[
          \`window.__INITIAL_STATE__ = \${
            JSON.stringify(store.getState(), null, 2)
          };\`,
        ]}
        content={[
          { id: 'app-container', dangerouslySetInnerHTML: { __html: html } },
        ]}
      />
    )
  }\`

// https://github.com/prettier/prettier/issues/1626#issue-229655106
const Bar = styled.div\`
  color: \${props => (props.highlight.length > 0 ? palette(['text', 'dark', 'tertiary'])(props) : palette(['text', 'dark', 'primary'])(props))} !important;
\`

// https://github.com/prettier/prettier/issues/3368
let message = \`this is a long message which contains an interpolation: \${format(data)} <- like this\`;

let otherMessage = \`this template contains two interpolations: \${this(one)}, which should be kept on its line,
and this other one: \${
  this(long.placeholder.text.goes.here.so.we.get.a.linebreak)
}
which already had a linebreak so can be broken up
\`;

// https://github.com/prettier/prettier/issues/16114
message = \`this is a long messsage a simple interpolation without a linebreak \${foo} <- like this\`;

message = \`whereas this messsage has a linebreak in the interpolation \${
  foo} <- like this\`;

=====================================output=====================================
foo(
  \`a long string \${1 + 2 + 3 + 2 + 3 + 2 + 3 + 2 + 3 + 2 + 3 + 2 + 3 + 2 + 3 + 2 + 3} with expr\`,
);

const x = \`a long string \${
  1 +
  2 +
  3 +
  2 +
  3 +
  2 +
  3 +
  2 +
  3 +
  2 +
  3 +
  2 +
  (function () {
    return 3;
  })() +
  3 +
  2 +
  3 +
  2 +
  3
} with expr\`;

foo(
  \`a long string \${
    1 +
    2 +
    3 +
    2 +
    3 +
    2 +
    3 +
    2 +
    3 +
    2 +
    3 +
    2 +
    (function () {
      const x = 5;

      return x;
    })() +
    3 +
    2 +
    3 +
    2 +
    3
  } with expr\`,
);

pipe.write(
  \`\\n  \${chalk.dim(\`\\u203A and \${more} more \${more} more \${more} more \${more}\`)}\`,
);

// https://github.com/prettier/prettier/issues/1662#issue-230406820
const content = \`
const env = \${JSON.stringify(
  {
    assetsRootUrl: env.assetsRootUrl,
    env: env.env,
    role: "client",
    adsfafa: "sdfsdff",
    asdfasff: "wefwefw",
    fefef: "sf sdfs fdsfdsf s dfsfds",
  },
  null,
  "\\t",
)});
\`;

// https://github.com/prettier/prettier/issues/821#issue-210557749
f(
  \`\${{
    a: 4,
    b: 9,
  }}\`,
);

// https://github.com/prettier/prettier/issues/1183#issue-220863505
const makeBody = (store, assets, html) =>
  \`<!doctype html>\${ReactDOMServer.renderToStaticMarkup(
    <Html
      headScripts={compact([assets.javascript.head])}
      headStyles={compact([assets.styles.body, assets.styles.head])}
      bodyScripts={compact([assets.javascript.body])}
      bodyStyles={[]}
      stringScripts={[
        \`window.__INITIAL_STATE__ = \${JSON.stringify(
          store.getState(),
          null,
          2,
        )};\`,
      ]}
      content={[
        { id: "app-container", dangerouslySetInnerHTML: { __html: html } },
      ]}
    />,
  )}\`;

// https://github.com/prettier/prettier/issues/1626#issue-229655106
const Bar = styled.div\`
  color: \${(props) =>
    props.highlight.length > 0
      ? palette(["text", "dark", "tertiary"])(props)
      : palette(["text", "dark", "primary"])(props)} !important;
\`;

// https://github.com/prettier/prettier/issues/3368
let message = \`this is a long message which contains an interpolation: \${format(data)} <- like this\`;

let otherMessage = \`this template contains two interpolations: \${this(one)}, which should be kept on its line,
and this other one: \${this(
  long.placeholder.text.goes.here.so.we.get.a.linebreak,
)}
which already had a linebreak so can be broken up
\`;

// https://github.com/prettier/prettier/issues/16114
message = \`this is a long messsage a simple interpolation without a linebreak \${foo} <- like this\`;

message = \`whereas this messsage has a linebreak in the interpolation \${
  foo
} <- like this\`;

================================================================================
`;

exports[`template-literals.js - {"trailingComma":"es5"} format 1`] = `
====================================options=====================================
parsers: ["babel", "flow"]
printWidth: 80
trailingComma: "es5"
                                                                                | printWidth
=====================================input======================================
foo(\`a long string \${ 1 + 2 + 3 + 2 + 3 + 2 + 3 + 2 + 3 + 2 + 3 + 2 + 3 + 2 + 3 + 2 + 3 } with expr\`);

const x = \`a long string \${ 1 + 2 + 3 + 2 + 3 + 2 + 3 + 2 + 3 + 2 + 3 + 2 + ( function() {return 3 })() + 3 + 2 + 3 + 2 + 3 } with expr\`;

foo(\`a long string \${ 1 + 2 + 3 + 2 + 3 + 2 + 3 + 2 + 3 + 2 + 3 + 2 + ( function() {
  const x = 5;

  return x;
 })() + 3 + 2 + 3 + 2 + 3 } with expr\`);

pipe.write(
  \`\\n  \${chalk.dim(\`\\u203A and \${more} more \${more} more \${more} more \${more}\`)}\`,
);

// https://github.com/prettier/prettier/issues/1662#issue-230406820
const content = \`
const env = \${ JSON.stringify({
	assetsRootUrl: env.assetsRootUrl,
	env: env.env,
	role: "client",
	adsfafa: "sdfsdff",
	asdfasff: "wefwefw",
  	fefef: "sf sdfs fdsfdsf s dfsfds"
}, null, "\\t") });
\`;

// https://github.com/prettier/prettier/issues/821#issue-210557749
f(\`\${{
  a: 4,
  b: 9,
}}\`);

// https://github.com/prettier/prettier/issues/1183#issue-220863505
const makeBody = (store, assets, html) =>
  \`<!doctype html>\${
    ReactDOMServer.renderToStaticMarkup(
      <Html
        headScripts={compact([ assets.javascript.head ])}
        headStyles={compact([ assets.styles.body, assets.styles.head ])}
        bodyScripts={compact([ assets.javascript.body ])}
        bodyStyles={[]}
        stringScripts={[
          \`window.__INITIAL_STATE__ = \${
            JSON.stringify(store.getState(), null, 2)
          };\`,
        ]}
        content={[
          { id: 'app-container', dangerouslySetInnerHTML: { __html: html } },
        ]}
      />
    )
  }\`

// https://github.com/prettier/prettier/issues/1626#issue-229655106
const Bar = styled.div\`
  color: \${props => (props.highlight.length > 0 ? palette(['text', 'dark', 'tertiary'])(props) : palette(['text', 'dark', 'primary'])(props))} !important;
\`

// https://github.com/prettier/prettier/issues/3368
let message = \`this is a long message which contains an interpolation: \${format(data)} <- like this\`;

let otherMessage = \`this template contains two interpolations: \${this(one)}, which should be kept on its line,
and this other one: \${
  this(long.placeholder.text.goes.here.so.we.get.a.linebreak)
}
which already had a linebreak so can be broken up
\`;

// https://github.com/prettier/prettier/issues/16114
message = \`this is a long messsage a simple interpolation without a linebreak \${foo} <- like this\`;

message = \`whereas this messsage has a linebreak in the interpolation \${
  foo} <- like this\`;

=====================================output=====================================
foo(
  \`a long string \${1 + 2 + 3 + 2 + 3 + 2 + 3 + 2 + 3 + 2 + 3 + 2 + 3 + 2 + 3 + 2 + 3} with expr\`
);

const x = \`a long string \${
  1 +
  2 +
  3 +
  2 +
  3 +
  2 +
  3 +
  2 +
  3 +
  2 +
  3 +
  2 +
  (function () {
    return 3;
  })() +
  3 +
  2 +
  3 +
  2 +
  3
} with expr\`;

foo(
  \`a long string \${
    1 +
    2 +
    3 +
    2 +
    3 +
    2 +
    3 +
    2 +
    3 +
    2 +
    3 +
    2 +
    (function () {
      const x = 5;

      return x;
    })() +
    3 +
    2 +
    3 +
    2 +
    3
  } with expr\`
);

pipe.write(
  \`\\n  \${chalk.dim(\`\\u203A and \${more} more \${more} more \${more} more \${more}\`)}\`
);

// https://github.com/prettier/prettier/issues/1662#issue-230406820
const content = \`
const env = \${JSON.stringify(
  {
    assetsRootUrl: env.assetsRootUrl,
    env: env.env,
    role: "client",
    adsfafa: "sdfsdff",
    asdfasff: "wefwefw",
    fefef: "sf sdfs fdsfdsf s dfsfds",
  },
  null,
  "\\t"
)});
\`;

// https://github.com/prettier/prettier/issues/821#issue-210557749
f(
  \`\${{
    a: 4,
    b: 9,
  }}\`
);

// https://github.com/prettier/prettier/issues/1183#issue-220863505
const makeBody = (store, assets, html) =>
  \`<!doctype html>\${ReactDOMServer.renderToStaticMarkup(
    <Html
      headScripts={compact([assets.javascript.head])}
      headStyles={compact([assets.styles.body, assets.styles.head])}
      bodyScripts={compact([assets.javascript.body])}
      bodyStyles={[]}
      stringScripts={[
        \`window.__INITIAL_STATE__ = \${JSON.stringify(
          store.getState(),
          null,
          2
        )};\`,
      ]}
      content={[
        { id: "app-container", dangerouslySetInnerHTML: { __html: html } },
      ]}
    />
  )}\`;

// https://github.com/prettier/prettier/issues/1626#issue-229655106
const Bar = styled.div\`
  color: \${(props) =>
    props.highlight.length > 0
      ? palette(["text", "dark", "tertiary"])(props)
      : palette(["text", "dark", "primary"])(props)} !important;
\`;

// https://github.com/prettier/prettier/issues/3368
let message = \`this is a long message which contains an interpolation: \${format(data)} <- like this\`;

let otherMessage = \`this template contains two interpolations: \${this(one)}, which should be kept on its line,
and this other one: \${this(
  long.placeholder.text.goes.here.so.we.get.a.linebreak
)}
which already had a linebreak so can be broken up
\`;

// https://github.com/prettier/prettier/issues/16114
message = \`this is a long messsage a simple interpolation without a linebreak \${foo} <- like this\`;

message = \`whereas this messsage has a linebreak in the interpolation \${
  foo
} <- like this\`;

================================================================================
`;
