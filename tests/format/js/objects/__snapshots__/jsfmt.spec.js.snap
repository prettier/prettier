// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`escape-sequence-key.js format 1`] = `
====================================options=====================================
parsers: ["babel", "typescript"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
// #6235
const a = {
  '\\u2139': 'why "\\\\u2139" is converted to "i"?',
};

const b = {
  "\\x66\\x69\\x73\\x6b\\x65\\x72": "\\x66\\x69\\x73\\x6b\\x65\\x72",
};

=====================================output=====================================
// #6235
const a = {
  "\\u2139": 'why "\\\\u2139" is converted to "i"?',
};

const b = {
  "\\x66\\x69\\x73\\x6b\\x65\\x72": "\\x66\\x69\\x73\\x6b\\x65\\x72",
};

================================================================================
`;

exports[`expand.js format 1`] = `
====================================options=====================================
parsers: ["babel", "typescript"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
const Component1 = ({ props }) => (
  <Text>Test</Text>
);

const Component2 = ({
  props
}) => (
  <Text>Test</Text>
);

=====================================output=====================================
const Component1 = ({ props }) => <Text>Test</Text>;

const Component2 = ({ props }) => <Text>Test</Text>;

================================================================================
`;

exports[`expression.js [__typescript_estree] format 1`] = `
"')' expected. (5:4)
  3 | a = () => ({}).x;
  4 | ({} && a, b);
> 5 | ({}::b, 0);
    |    ^
  6 | ({}::b()\`\`[''].c++ && 0 ? 0 : 0, 0);
  7 | ({}(), 0);
  8 | ({} = 0);"
`;

exports[`expression.js [espree] format 1`] = `
"Unexpected token : (5:4)
  3 | a = () => ({}).x;
  4 | ({} && a, b);
> 5 | ({}::b, 0);
    |    ^
  6 | ({}::b()\`\`[''].c++ && 0 ? 0 : 0, 0);
  7 | ({}(), 0);
  8 | ({} = 0);"
`;

exports[`expression.js [meriyah] format 1`] = `
"[5:4]: Expected ')' (5:4)
  3 | a = () => ({}).x;
  4 | ({} && a, b);
> 5 | ({}::b, 0);
    |    ^
  6 | ({}::b()\`\`[''].c++ && 0 ? 0 : 0, 0);
  7 | ({}(), 0);
  8 | ({} = 0);"
`;

exports[`expression.js [typescript] format 1`] = `
"')' expected. (5:4)
  3 | a = () => ({}).x;
  4 | ({} && a, b);
> 5 | ({}::b, 0);
    |    ^
  6 | ({}::b()\`\`[''].c++ && 0 ? 0 : 0, 0);
  7 | ({}(), 0);
  8 | ({} = 0);"
`;

exports[`expression.js format 1`] = `
====================================options=====================================
parsers: ["babel", "typescript"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
() => ({}\`\`);
({})\`\`;
a = () => ({}).x;
({} && a, b);
({}::b, 0);
({}::b()\`\`[''].c++ && 0 ? 0 : 0, 0);
({}(), 0);
({} = 0);
(({} = 0), 1);

const a1 = {
  someKey:
    (shortName, shortName)
};

const a2 = {
  someKey:
    (longLongLongLongLongLongLongLongLongLongLongLongLongLongName, shortName)
};

const a3 = {
  someKey:
    (longLongLongLongLongLongLongLongLongLongLongLongLongLongName, longLongLongLongLongLongLongLongLongLongLongLongLongLongName, longLongLongLongLongLongLongLongLongLongLongLongLongLongName)
};

=====================================output=====================================
() => ({}\`\`);
({}\`\`);
a = () => ({}.x);
({} && a, b);
({}::b, 0);
({}::b()\`\`[""].c++ && 0 ? 0 : 0, 0);
({}(), 0);
({} = 0);
({} = 0), 1;

const a1 = {
  someKey: (shortName, shortName),
};

const a2 = {
  someKey:
    (longLongLongLongLongLongLongLongLongLongLongLongLongLongName, shortName),
};

const a3 = {
  someKey:
    (longLongLongLongLongLongLongLongLongLongLongLongLongLongName,
    longLongLongLongLongLongLongLongLongLongLongLongLongLongName,
    longLongLongLongLongLongLongLongLongLongLongLongLongLongName),
};

================================================================================
`;

exports[`getter-setter.js format 1`] = `
====================================options=====================================
parsers: ["babel", "typescript"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
({ set x(foo) {} });
({ get x() { return 1 } });
({ set x(a) {} });
({ get x() {} });

=====================================output=====================================
({ set x(foo) {} });
({
  get x() {
    return 1;
  },
});
({ set x(a) {} });
({ get x() {} });

================================================================================
`;

exports[`method.js format 1`] = `
====================================options=====================================
parsers: ["babel", "typescript"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
a = { f() {} }

=====================================output=====================================
a = { f() {} };

================================================================================
`;

exports[`range.js format 1`] = `
====================================options=====================================
parsers: ["babel", "typescript"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
group(
  concat([
    "(",
    indent(
      options.tabWidth,
      concat([line, join(concat([",", line]), printed)])
    ),
    options.trailingComma ? "," : "",
    line,
    ")"
  ]),
  {shouldBreak: true}
)

=====================================output=====================================
group(
  concat([
    "(",
    indent(
      options.tabWidth,
      concat([line, join(concat([",", line]), printed)])
    ),
    options.trailingComma ? "," : "",
    line,
    ")",
  ]),
  { shouldBreak: true }
);

================================================================================
`;

exports[`right-break.js format 1`] = `
====================================options=====================================
parsers: ["babel", "typescript"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
const blablah =
  "aldkfkladfskladklsfkladklfkaldfadfkdaf" +
  "adlfasdklfkldsklfakldsfkladsfkadsfladsfa" +
  "dflkadfkladsfklkadlfkladlfkadklfjadlfdfdaf";

const k = {
  blablah: "aldkfkladfskladklsfkladklfkaldfadfkdaf" +
    "adlfasdklfkldsklfakldsfkladsfkadsfladsfa" +
    "dflkadfkladsfklkadlfkladlfkadklfjadlfdfdaf"
};

somethingThatsAReallyLongPropName =
  this.props.cardType === AwesomizerCardEnum.SEEFIRST;

const o = {
  somethingThatsAReallyLongPropName:
    this.props.cardType === AwesomizerCardEnum.SEEFIRST,
};

=====================================output=====================================
const blablah =
  "aldkfkladfskladklsfkladklfkaldfadfkdaf" +
  "adlfasdklfkldsklfakldsfkladsfkadsfladsfa" +
  "dflkadfkladsfklkadlfkladlfkadklfjadlfdfdaf";

const k = {
  blablah:
    "aldkfkladfskladklsfkladklfkaldfadfkdaf" +
    "adlfasdklfkldsklfakldsfkladsfkadsfladsfa" +
    "dflkadfkladsfklkadlfkladlfkadklfjadlfdfdaf",
};

somethingThatsAReallyLongPropName =
  this.props.cardType === AwesomizerCardEnum.SEEFIRST;

const o = {
  somethingThatsAReallyLongPropName:
    this.props.cardType === AwesomizerCardEnum.SEEFIRST,
};

================================================================================
`;
