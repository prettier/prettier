// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`assignment.js format 1`] = `
====================================options=====================================
parsers: ["babel", "flow", "typescript"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
aaaaaaaa.bbbbbbbb.cccccccc.dddddddd.eeeeeeee.ffffffff.gggggggg2 = class extends (
  aaaaaaaa.bbbbbbbb.cccccccc.dddddddd.eeeeeeee.ffffffff.gggggggg1
) {
  method () {
    console.log("foo");
  }
};

foo = class extends bar {
  method() {
    console.log("foo");
  }
};

aaaaaaaa.bbbbbbbb.cccccccc.dddddddd.eeeeeeee.ffffffff.gggggggg2 = class extends bar {
  method() {
    console.log("foo");
  }
};

foo = class extends aaaaaaaa.bbbbbbbb.cccccccc.dddddddd.eeeeeeee.ffffffff.gggggggg2 {
  method() {
    console.log("foo");
  }
};

module.exports = class A extends B {
  method () {
    console.log("foo");
  }
};

=====================================output=====================================
aaaaaaaa.bbbbbbbb.cccccccc.dddddddd.eeeeeeee.ffffffff.gggggggg2 = class extends (
  aaaaaaaa.bbbbbbbb.cccccccc.dddddddd.eeeeeeee.ffffffff.gggggggg1
) {
  method() {
    console.log("foo");
  }
};

foo = class extends bar {
  method() {
    console.log("foo");
  }
};

aaaaaaaa.bbbbbbbb.cccccccc.dddddddd.eeeeeeee.ffffffff.gggggggg2 = class extends (
  bar
) {
  method() {
    console.log("foo");
  }
};

foo = class extends (
  aaaaaaaa.bbbbbbbb.cccccccc.dddddddd.eeeeeeee.ffffffff.gggggggg2
) {
  method() {
    console.log("foo");
  }
};

module.exports = class A extends B {
  method() {
    console.log("foo");
  }
};

================================================================================
`;

exports[`binary.js format 1`] = `
====================================options=====================================
parsers: ["babel", "flow", "typescript"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
(class {}) + 1;
(class a {}) + 1;
(class extends b {}) + 1;
(class a extends b {}) + 1;

=====================================output=====================================
(class {} + 1);
(class a {} + 1);
(class extends b {} + 1);
(class a extends b {} + 1);

================================================================================
`;

exports[`call.js format 1`] = `
====================================options=====================================
parsers: ["babel", "flow", "typescript"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
(class {})(class {});

=====================================output=====================================
(class {}(class {}));

================================================================================
`;

exports[`empty.js format 1`] = `
====================================options=====================================
parsers: ["babel", "flow", "typescript"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
class A1 {
  // comment
}

class A2 { // comment
}

class A3 {
}

class A4 {
  m() {}
}

=====================================output=====================================
class A1 {
  // comment
}

class A2 {
  // comment
}

class A3 {}

class A4 {
  m() {}
}

================================================================================
`;

exports[`member.js format 1`] = `
====================================options=====================================
parsers: ["babel", "flow", "typescript"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
(class {})[1];
(class {}).a;

=====================================output=====================================
(class {}[1]);
(class {}.a);

================================================================================
`;

exports[`method.js format 1`] = `
====================================options=====================================
parsers: ["babel", "flow", "typescript"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================

class C {
  name/*comment*/() {
  }
};


({
  name/*comment*/() {
  }
});

=====================================output=====================================
class C {
  name /*comment*/() {}
}

({
  name /*comment*/() {},
});

================================================================================
`;

exports[`new.js format 1`] = `
====================================options=====================================
parsers: ["babel", "flow", "typescript"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
new class {};
new Ctor(class {});

=====================================output=====================================
new (class {})();
new Ctor(class {});

================================================================================
`;

exports[`property.js format 1`] = `
====================================options=====================================
parsers: ["babel", "flow", "typescript"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
class A {
  foobar =
    // comment to break
    1 +
    // comment to break again
    2;
}

class B {
  someInstanceProperty = this.props.foofoofoofoofoofoo &&
    this.props.barbarbarbar;
  
  someInstanceProperty2 = { foo: this.props.foofoofoofoofoofoo &&
    this.props.barbarbarbar };
  
    someInstanceProperty3 =
  "foo";
}

=====================================output=====================================
class A {
  foobar =
    // comment to break
    1 +
    // comment to break again
    2;
}

class B {
  someInstanceProperty =
    this.props.foofoofoofoofoofoo && this.props.barbarbarbar;

  someInstanceProperty2 = {
    foo: this.props.foofoofoofoofoofoo && this.props.barbarbarbar,
  };

  someInstanceProperty3 = "foo";
}

================================================================================
`;

exports[`ternary.js format 1`] = `
====================================options=====================================
parsers: ["babel", "flow", "typescript"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
if (1) (class {}) ? 1 : 2;

=====================================output=====================================
if (1) (class {} ? 1 : 2);

================================================================================
`;
