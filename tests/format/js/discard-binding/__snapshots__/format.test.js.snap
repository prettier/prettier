// Jest Snapshot v1, https://jestjs.io/docs/snapshot-testing

exports[`array-pattern.js [acorn] format 1`] = `
"Unexpected keyword 'void' (3:12)
  1 | {
  2 |   // destructuring binding
> 3 |   const [, void, ] = value;
    |            ^
  4 | }
  5 | {
  6 |   // for-of destructuring binding
Cause: Unexpected keyword 'void' (3:11)"
`;

exports[`array-pattern.js [espree] format 1`] = `
"Unexpected keyword 'void' (3:12)
  1 | {
  2 |   // destructuring binding
> 3 |   const [, void, ] = value;
    |            ^
  4 | }
  5 | {
  6 |   // for-of destructuring binding
Cause: Unexpected keyword 'void'"
`;

exports[`array-pattern.js [flow] format 1`] = `
"Unexpected reserved word (3:12)
  1 | {
  2 |   // destructuring binding
> 3 |   const [, void, ] = value;
    |            ^^^^
  4 | }
  5 | {
  6 |   // for-of destructuring binding"
`;

exports[`array-pattern.js [hermes] format 1`] = `
"identifier, '{' or '[' expected in binding pattern (3:11)
  1 | {
  2 |   // destructuring binding
> 3 |   const [, void, ] = value;
    |           ^
  4 | }
  5 | {
  6 |   // for-of destructuring binding
Cause: identifier, '{' or '[' expected in binding pattern (3:11)
  const [, void, ] = value;
           ^"
`;

exports[`array-pattern.js [meriyah] format 1`] = `
"Unexpected token: ',' (3:16)
  1 | {
  2 |   // destructuring binding
> 3 |   const [, void, ] = value;
    |                ^
  4 | }
  5 | {
  6 |   // for-of destructuring binding
Cause: [3:15-3:16]: Unexpected token: ','"
`;

exports[`array-pattern.js [oxc] format 1`] = `
"Identifier expected. 'void' is a reserved word that cannot be used here. (3:12)
  1 | {
  2 |   // destructuring binding
> 3 |   const [, void, ] = value;
    |            ^^^^
  4 | }
  5 | {
  6 |   // for-of destructuring binding"
`;

exports[`array-pattern.js [oxc-ts] format 1`] = `
"Identifier expected. 'void' is a reserved word that cannot be used here. (3:12)
  1 | {
  2 |   // destructuring binding
> 3 |   const [, void, ] = value;
    |            ^^^^
  4 | }
  5 | {
  6 |   // for-of destructuring binding"
`;

exports[`array-pattern.js [typescript] format 1`] = `
"Array element destructuring pattern expected. (3:12)
  1 | {
  2 |   // destructuring binding
> 3 |   const [, void, ] = value;
    |            ^
  4 | }
  5 | {
  6 |   // for-of destructuring binding
Cause: Array element destructuring pattern expected."
`;

exports[`array-pattern.js format 1`] = `
====================================options=====================================
parsers: ["babel", "flow", "typescript"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
{
  // destructuring binding
  const [, void, ] = value;
}
{
  // for-of destructuring binding
  for (const [void] of []);
}
{
  // destructuring assignment
  [void] = [];
}
{
  // for-of destructuring assignment;
  for ([void] of []);
}
{
  // function param;
  function f([[[void], void, ], void]) {}
}
{
  // arrow function param
  ([[[void], void, ], void]) => {}
}
{
  // async arrow function param
  async ([[[void], void, ], void]) => {}
}
{
  // destructuring assignment in async call";
  async([void] = []);
}
{
  // catch param
  try {} catch ([void]) {}
}

=====================================output=====================================
{
  // destructuring binding
  const [, void] = value;
}
{
  // for-of destructuring binding
  for (const [void] of []);
}
{
  // destructuring assignment
  [void] = [];
}
{
  // for-of destructuring assignment;
  for ([void] of []);
}
{
  // function param;
  function f([[[void], void], void]) {}
}
{
  // arrow function param
  ([[[void], void], void]) => {};
}
{
  // async arrow function param
  async ([[[void], void], void]) => {};
}
{
  // destructuring assignment in async call";
  async(([void] = []));
}
{
  // catch param
  try {
  } catch ([void]) {}
}

================================================================================
`;

exports[`basic.js [acorn] format 1`] = `
"Unexpected keyword 'void' (1:8)
> 1 | const [void] = [,void] = [void,] = [];
    |        ^
  2 |
  3 | function f(void, { p: void }, [ void ]) {}
  4 |
Cause: Unexpected keyword 'void' (1:7)"
`;

exports[`basic.js [espree] format 1`] = `
"Unexpected keyword 'void' (1:8)
> 1 | const [void] = [,void] = [void,] = [];
    |        ^
  2 |
  3 | function f(void, { p: void }, [ void ]) {}
  4 |
Cause: Unexpected keyword 'void'"
`;

exports[`basic.js [flow] format 1`] = `
"Unexpected reserved word (1:8)
> 1 | const [void] = [,void] = [void,] = [];
    |        ^^^^
  2 |
  3 | function f(void, { p: void }, [ void ]) {}
  4 |"
`;

exports[`basic.js [hermes] format 1`] = `
"identifier, '{' or '[' expected in binding pattern (1:7)
> 1 | const [void] = [,void] = [void,] = [];
    |       ^
  2 |
  3 | function f(void, { p: void }, [ void ]) {}
  4 |
Cause: identifier, '{' or '[' expected in binding pattern (1:7)
const [void] = [,void] = [void,] = [];
       ^"
`;

exports[`basic.js [meriyah] format 1`] = `
"Unexpected token: ']' (1:12)
> 1 | const [void] = [,void] = [void,] = [];
    |            ^
  2 |
  3 | function f(void, { p: void }, [ void ]) {}
  4 |
Cause: [1:11-1:12]: Unexpected token: ']'"
`;

exports[`basic.js [oxc] format 1`] = `
"Identifier expected. 'void' is a reserved word that cannot be used here. (1:8)
> 1 | const [void] = [,void] = [void,] = [];
    |        ^^^^
  2 |
  3 | function f(void, { p: void }, [ void ]) {}
  4 |"
`;

exports[`basic.js [oxc-ts] format 1`] = `
"Identifier expected. 'void' is a reserved word that cannot be used here. (1:8)
> 1 | const [void] = [,void] = [void,] = [];
    |        ^^^^
  2 |
  3 | function f(void, { p: void }, [ void ]) {}
  4 |"
`;

exports[`basic.js [typescript] format 1`] = `
"Array element destructuring pattern expected. (1:8)
> 1 | const [void] = [,void] = [void,] = [];
    |        ^
  2 |
  3 | function f(void, { p: void }, [ void ]) {}
  4 |
Cause: Array element destructuring pattern expected."
`;

exports[`basic.js format 1`] = `
====================================options=====================================
parsers: ["babel", "flow", "typescript"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
const [void] = [,void] = [void,] = [];

function f(void, { p: void }, [ void ]) {}

(void, { p: void }, [ void ]) => {}

async (void, { p: void }, [ void ]) => {}

=====================================output=====================================
const [void] = ([, void] = [void] = []);

function f(void, { p: void }, [void]) {}

(void, { p: void }, [void]) => {};

async (void, { p: void }, [void]) => {};

================================================================================
`;

exports[`discard-binding-arrow-params.js [acorn] format 1`] = `
"Unexpected token (1:6)
> 1 | (void) => {}
    |      ^
  2 |
Cause: Unexpected token (1:5)"
`;

exports[`discard-binding-arrow-params.js [espree] format 1`] = `
"Unexpected token ) (1:6)
> 1 | (void) => {}
    |      ^
  2 |
Cause: Unexpected token )"
`;

exports[`discard-binding-arrow-params.js [flow] format 1`] = `
"Unexpected token \`)\` (1:6)
> 1 | (void) => {}
    |      ^
  2 |"
`;

exports[`discard-binding-arrow-params.js [hermes] format 1`] = `
"invalid expression (1:5)
> 1 | (void) => {}
    |     ^
  2 |
Cause: invalid expression (1:5)
(void) => {}
     ^"
`;

exports[`discard-binding-arrow-params.js [meriyah] format 1`] = `
"Unexpected token: ')' (1:6)
> 1 | (void) => {}
    |      ^
  2 |
Cause: [1:5-1:6]: Unexpected token: ')'"
`;

exports[`discard-binding-arrow-params.js [oxc] format 1`] = `
"Unexpected token (1:6)
> 1 | (void) => {}
    |      ^
  2 |"
`;

exports[`discard-binding-arrow-params.js [oxc-ts] format 1`] = `
"Unexpected token (1:6)
> 1 | (void) => {}
    |      ^
  2 |"
`;

exports[`discard-binding-arrow-params.js [typescript] format 1`] = `
"Expression expected. (1:6)
> 1 | (void) => {}
    |      ^
  2 |
Cause: Expression expected."
`;

exports[`discard-binding-arrow-params.js format 1`] = `
====================================options=====================================
parsers: ["babel", "flow", "typescript"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
(void) => {}

=====================================output=====================================
(void) => {};

================================================================================
`;

exports[`discard-binding-assignment.js [acorn] format 1`] = `
"Unexpected token (1:7)
> 1 | ([void] = []);
    |       ^
  2 |
Cause: Unexpected token (1:6)"
`;

exports[`discard-binding-assignment.js [espree] format 1`] = `
"Unexpected token ] (1:7)
> 1 | ([void] = []);
    |       ^
  2 |
Cause: Unexpected token ]"
`;

exports[`discard-binding-assignment.js [flow] format 1`] = `
"Unexpected token \`]\` (1:7)
> 1 | ([void] = []);
    |       ^
  2 |"
`;

exports[`discard-binding-assignment.js [hermes] format 1`] = `
"invalid expression (1:6)
> 1 | ([void] = []);
    |      ^
  2 |
Cause: invalid expression (1:6)
([void] = []);
      ^"
`;

exports[`discard-binding-assignment.js [meriyah] format 1`] = `
"Unexpected token: ']' (1:7)
> 1 | ([void] = []);
    |       ^
  2 |
Cause: [1:6-1:7]: Unexpected token: ']'"
`;

exports[`discard-binding-assignment.js [oxc] format 1`] = `
"Unexpected token (1:7)
> 1 | ([void] = []);
    |       ^
  2 |"
`;

exports[`discard-binding-assignment.js [oxc-ts] format 1`] = `
"Unexpected token (1:7)
> 1 | ([void] = []);
    |       ^
  2 |"
`;

exports[`discard-binding-assignment.js [typescript] format 1`] = `
"Expression expected. (1:7)
> 1 | ([void] = []);
    |       ^
  2 |
Cause: Expression expected."
`;

exports[`discard-binding-assignment.js format 1`] = `
====================================options=====================================
parsers: ["babel", "flow", "typescript"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
([void] = []);

=====================================output=====================================
[void] = [];

================================================================================
`;

exports[`discard-binding-async-arrow-params.js [acorn] format 1`] = `
"Unexpected token (1:12)
> 1 | async (void) => {}
    |            ^
  2 |
Cause: Unexpected token (1:11)"
`;

exports[`discard-binding-async-arrow-params.js [espree] format 1`] = `
"Unexpected token ) (1:12)
> 1 | async (void) => {}
    |            ^
  2 |
Cause: Unexpected token )"
`;

exports[`discard-binding-async-arrow-params.js [flow] format 1`] = `
"Unexpected token \`)\` (1:12)
> 1 | async (void) => {}
    |            ^
  2 |"
`;

exports[`discard-binding-async-arrow-params.js [hermes] format 1`] = `
"invalid expression (1:11)
> 1 | async (void) => {}
    |           ^
  2 |
Cause: invalid expression (1:11)
async (void) => {}
           ^"
`;

exports[`discard-binding-async-arrow-params.js [meriyah] format 1`] = `
"Unexpected token: ')' (1:12)
> 1 | async (void) => {}
    |            ^
  2 |
Cause: [1:11-1:12]: Unexpected token: ')'"
`;

exports[`discard-binding-async-arrow-params.js [oxc] format 1`] = `
"Unexpected token (1:12)
> 1 | async (void) => {}
    |            ^
  2 |"
`;

exports[`discard-binding-async-arrow-params.js [oxc-ts] format 1`] = `
"Unexpected token (1:12)
> 1 | async (void) => {}
    |            ^
  2 |"
`;

exports[`discard-binding-async-arrow-params.js [typescript] format 1`] = `
"Expression expected. (1:12)
> 1 | async (void) => {}
    |            ^
  2 |
Cause: Expression expected."
`;

exports[`discard-binding-async-arrow-params.js format 1`] = `
====================================options=====================================
parsers: ["babel", "flow", "typescript"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
async (void) => {}

=====================================output=====================================
async (void) => {};

================================================================================
`;

exports[`discard-binding-bindings.js [acorn] format 1`] = `
"Unexpected keyword 'void' (1:12)
> 1 | const { p: void } = {};
    |            ^
  2 |
Cause: Unexpected keyword 'void' (1:11)"
`;

exports[`discard-binding-bindings.js [espree] format 1`] = `
"Unexpected keyword 'void' (1:12)
> 1 | const { p: void } = {};
    |            ^
  2 |
Cause: Unexpected keyword 'void'"
`;

exports[`discard-binding-bindings.js [flow] format 1`] = `
"Unexpected reserved word (1:12)
> 1 | const { p: void } = {};
    |            ^^^^
  2 |"
`;

exports[`discard-binding-bindings.js [hermes] format 1`] = `
"identifier, '{' or '[' expected in binding pattern (1:11)
> 1 | const { p: void } = {};
    |           ^
  2 |
Cause: identifier, '{' or '[' expected in binding pattern (1:11)
const { p: void } = {};
           ^"
`;

exports[`discard-binding-bindings.js [meriyah] format 1`] = `
"Unexpected token: '}' (1:17)
> 1 | const { p: void } = {};
    |                 ^
  2 |
Cause: [1:16-1:17]: Unexpected token: '}'"
`;

exports[`discard-binding-bindings.js [oxc] format 1`] = `
"Identifier expected. 'void' is a reserved word that cannot be used here. (1:12)
> 1 | const { p: void } = {};
    |            ^^^^
  2 |"
`;

exports[`discard-binding-bindings.js [oxc-ts] format 1`] = `
"Identifier expected. 'void' is a reserved word that cannot be used here. (1:12)
> 1 | const { p: void } = {};
    |            ^^^^
  2 |"
`;

exports[`discard-binding-bindings.js [typescript] format 1`] = `
"Identifier expected. 'void' is a reserved word that cannot be used here. (1:12)
> 1 | const { p: void } = {};
    |            ^
  2 |
Cause: Identifier expected. 'void' is a reserved word that cannot be used here."
`;

exports[`discard-binding-bindings.js format 1`] = `
====================================options=====================================
parsers: ["babel", "flow", "typescript"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
const { p: void } = {};

=====================================output=====================================
const { p: void } = {};

================================================================================
`;

exports[`discard-binding-for-await-using-binding.js [acorn] format 1`] = `
"Unexpected keyword 'void' (2:19)
  1 | async () => {
> 2 |   for(await using void of []);
    |                   ^
  3 | }
  4 |
Cause: Unexpected keyword 'void' (2:18)"
`;

exports[`discard-binding-for-await-using-binding.js [espree] format 1`] = `
"Unexpected keyword 'void' (2:19)
  1 | async () => {
> 2 |   for(await using void of []);
    |                   ^
  3 | }
  4 |
Cause: Unexpected keyword 'void'"
`;

exports[`discard-binding-for-await-using-binding.js [flow] format 1`] = `
"Unexpected token \`void\`, expected the token \`;\` (2:19)
  1 | async () => {
> 2 |   for(await using void of []);
    |                   ^^^^
  3 | }
  4 |"
`;

exports[`discard-binding-for-await-using-binding.js [hermes] format 1`] = `
"';' or 'in' expected inside 'for' (2:18)
  1 | async () => {
> 2 |   for(await using void of []);
    |                  ^
  3 | }
  4 |
Cause: ';' or 'in' expected inside 'for' (2:18)
  for(await using void of []);
  ~~~~~~~~~~~~~~~~^"
`;

exports[`discard-binding-for-await-using-binding.js [meriyah] format 1`] = `
"Expected ';' (2:19)
  1 | async () => {
> 2 |   for(await using void of []);
    |                   ^^^^
  3 | }
  4 |
Cause: [2:18-2:22]: Expected ';'"
`;

exports[`discard-binding-for-await-using-binding.js [oxc] format 1`] = `
"Identifier expected. 'void' is a reserved word that cannot be used here. (2:19)
  1 | async () => {
> 2 |   for(await using void of []);
    |                   ^^^^
  3 | }
  4 |"
`;

exports[`discard-binding-for-await-using-binding.js [oxc-ts] format 1`] = `
"Identifier expected. 'void' is a reserved word that cannot be used here. (2:19)
  1 | async () => {
> 2 |   for(await using void of []);
    |                   ^^^^
  3 | }
  4 |"
`;

exports[`discard-binding-for-await-using-binding.js [typescript] format 1`] = `
"';' expected. (2:19)
  1 | async () => {
> 2 |   for(await using void of []);
    |                   ^
  3 | }
  4 |
Cause: ';' expected."
`;

exports[`discard-binding-for-await-using-binding.js format 1`] = `
====================================options=====================================
parsers: ["babel", "flow", "typescript"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
async () => {
  for(await using void of []);
}

=====================================output=====================================
async () => {
  for (await using void of []);
};

================================================================================
`;

exports[`discard-binding-for-bindings.js [acorn] format 1`] = `
"Unexpected keyword 'void' (1:16)
> 1 | for(const { p: void } of []);
    |                ^
  2 |
Cause: Unexpected keyword 'void' (1:15)"
`;

exports[`discard-binding-for-bindings.js [espree] format 1`] = `
"Unexpected keyword 'void' (1:16)
> 1 | for(const { p: void } of []);
    |                ^
  2 |
Cause: Unexpected keyword 'void'"
`;

exports[`discard-binding-for-bindings.js [flow] format 1`] = `
"Unexpected reserved word (1:16)
> 1 | for(const { p: void } of []);
    |                ^^^^
  2 |"
`;

exports[`discard-binding-for-bindings.js [hermes] format 1`] = `
"identifier, '{' or '[' expected in binding pattern (1:15)
> 1 | for(const { p: void } of []);
    |               ^
  2 |
Cause: identifier, '{' or '[' expected in binding pattern (1:15)
for(const { p: void } of []);
               ^"
`;

exports[`discard-binding-for-bindings.js [meriyah] format 1`] = `
"Unexpected token: '}' (1:21)
> 1 | for(const { p: void } of []);
    |                     ^
  2 |
Cause: [1:20-1:21]: Unexpected token: '}'"
`;

exports[`discard-binding-for-bindings.js [oxc] format 1`] = `
"Identifier expected. 'void' is a reserved word that cannot be used here. (1:16)
> 1 | for(const { p: void } of []);
    |                ^^^^
  2 |"
`;

exports[`discard-binding-for-bindings.js [oxc-ts] format 1`] = `
"Identifier expected. 'void' is a reserved word that cannot be used here. (1:16)
> 1 | for(const { p: void } of []);
    |                ^^^^
  2 |"
`;

exports[`discard-binding-for-bindings.js [typescript] format 1`] = `
"Identifier expected. 'void' is a reserved word that cannot be used here. (1:16)
> 1 | for(const { p: void } of []);
    |                ^
  2 |
Cause: Identifier expected. 'void' is a reserved word that cannot be used here."
`;

exports[`discard-binding-for-bindings.js format 1`] = `
====================================options=====================================
parsers: ["babel", "flow", "typescript"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
for(const { p: void } of []);

=====================================output=====================================
for (const { p: void } of []);

================================================================================
`;

exports[`discard-binding-for-lhs.js [acorn] format 1`] = `
"Unexpected token (1:15)
> 1 | for({ p: void } of []);
    |               ^
  2 |
Cause: Unexpected token (1:14)"
`;

exports[`discard-binding-for-lhs.js [espree] format 1`] = `
"Unexpected token } (1:15)
> 1 | for({ p: void } of []);
    |               ^
  2 |
Cause: Unexpected token }"
`;

exports[`discard-binding-for-lhs.js [flow] format 1`] = `
"Unexpected token \`}\` (1:15)
> 1 | for({ p: void } of []);
    |               ^
  2 |"
`;

exports[`discard-binding-for-lhs.js [hermes] format 1`] = `
"invalid expression (1:14)
> 1 | for({ p: void } of []);
    |              ^
  2 |
Cause: invalid expression (1:14)
for({ p: void } of []);
              ^"
`;

exports[`discard-binding-for-lhs.js [meriyah] format 1`] = `
"Unexpected token: '}' (1:15)
> 1 | for({ p: void } of []);
    |               ^
  2 |
Cause: [1:14-1:15]: Unexpected token: '}'"
`;

exports[`discard-binding-for-lhs.js [oxc] format 1`] = `
"Unexpected token (1:15)
> 1 | for({ p: void } of []);
    |               ^
  2 |"
`;

exports[`discard-binding-for-lhs.js [oxc-ts] format 1`] = `
"Unexpected token (1:15)
> 1 | for({ p: void } of []);
    |               ^
  2 |"
`;

exports[`discard-binding-for-lhs.js [typescript] format 1`] = `
"Expression expected. (1:15)
> 1 | for({ p: void } of []);
    |               ^
  2 |
Cause: Expression expected."
`;

exports[`discard-binding-for-lhs.js format 1`] = `
====================================options=====================================
parsers: ["babel", "flow", "typescript"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
for({ p: void } of []);

=====================================output=====================================
for ({ p: void } of []);

================================================================================
`;

exports[`discard-binding-for-using-binding.js [acorn] format 1`] = `
"Unexpected keyword 'void' (2:13)
  1 | {
> 2 |   for(using void of []);
    |             ^
  3 | }
  4 |
Cause: Unexpected keyword 'void' (2:12)"
`;

exports[`discard-binding-for-using-binding.js [espree] format 1`] = `
"Unexpected keyword 'void' (2:13)
  1 | {
> 2 |   for(using void of []);
    |             ^
  3 | }
  4 |
Cause: Unexpected keyword 'void'"
`;

exports[`discard-binding-for-using-binding.js [flow] format 1`] = `
"Unexpected token \`void\`, expected the token \`;\` (2:13)
  1 | {
> 2 |   for(using void of []);
    |             ^^^^
  3 | }
  4 |"
`;

exports[`discard-binding-for-using-binding.js [hermes] format 1`] = `
"';' or 'in' expected inside 'for' (2:12)
  1 | {
> 2 |   for(using void of []);
    |            ^
  3 | }
  4 |
Cause: ';' or 'in' expected inside 'for' (2:12)
  for(using void of []);
  ~~~~~~~~~~^"
`;

exports[`discard-binding-for-using-binding.js [meriyah] format 1`] = `
"Expected ';' (2:13)
  1 | {
> 2 |   for(using void of []);
    |             ^^^^
  3 | }
  4 |
Cause: [2:12-2:16]: Expected ';'"
`;

exports[`discard-binding-for-using-binding.js [oxc] format 1`] = `
"Expected \`;\` but found \`void\` (2:13)
  1 | {
> 2 |   for(using void of []);
    |             ^^^^
  3 | }
  4 |"
`;

exports[`discard-binding-for-using-binding.js [oxc-ts] format 1`] = `
"Expected \`;\` but found \`void\` (2:13)
  1 | {
> 2 |   for(using void of []);
    |             ^^^^
  3 | }
  4 |"
`;

exports[`discard-binding-for-using-binding.js [typescript] format 1`] = `
"';' expected. (2:13)
  1 | {
> 2 |   for(using void of []);
    |             ^
  3 | }
  4 |
Cause: ';' expected."
`;

exports[`discard-binding-for-using-binding.js format 1`] = `
====================================options=====================================
parsers: ["babel", "flow", "typescript"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
{
  for(using void of []);
}

=====================================output=====================================
{
  for (using void of []);
}

================================================================================
`;

exports[`function-parameter.js [acorn] format 1`] = `
"Unexpected keyword 'void' (3:14)
  1 | {
  2 |   // function parameter
> 3 |   function f(void) {}
    |              ^
  4 | }
  5 | {
  6 |   // arrow function parameter
Cause: Unexpected keyword 'void' (3:13)"
`;

exports[`function-parameter.js [espree] format 1`] = `
"Unexpected keyword 'void' (3:14)
  1 | {
  2 |   // function parameter
> 3 |   function f(void) {}
    |              ^
  4 | }
  5 | {
  6 |   // arrow function parameter
Cause: Unexpected keyword 'void'"
`;

exports[`function-parameter.js [flow] format 1`] = `
"Unexpected reserved word (3:14)
  1 | {
  2 |   // function parameter
> 3 |   function f(void) {}
    |              ^^^^
  4 | }
  5 | {
  6 |   // arrow function parameter"
`;

exports[`function-parameter.js [hermes] format 1`] = `
"identifier, '{' or '[' expected in binding pattern (3:13)
  1 | {
  2 |   // function parameter
> 3 |   function f(void) {}
    |             ^
  4 | }
  5 | {
  6 |   // arrow function parameter
Cause: identifier, '{' or '[' expected in binding pattern (3:13)
  function f(void) {}
             ^"
`;

exports[`function-parameter.js [meriyah] format 1`] = `
"Invalid keyword (3:14)
  1 | {
  2 |   // function parameter
> 3 |   function f(void) {}
    |              ^^^^
  4 | }
  5 | {
  6 |   // arrow function parameter
Cause: [3:13-3:17]: Invalid keyword"
`;

exports[`function-parameter.js [oxc] format 1`] = `
"Identifier expected. 'void' is a reserved word that cannot be used here. (3:14)
  1 | {
  2 |   // function parameter
> 3 |   function f(void) {}
    |              ^^^^
  4 | }
  5 | {
  6 |   // arrow function parameter"
`;

exports[`function-parameter.js [oxc-ts] format 1`] = `
"Identifier expected. 'void' is a reserved word that cannot be used here. (3:14)
  1 | {
  2 |   // function parameter
> 3 |   function f(void) {}
    |              ^^^^
  4 | }
  5 | {
  6 |   // arrow function parameter"
`;

exports[`function-parameter.js [typescript] format 1`] = `
"Identifier expected. 'void' is a reserved word that cannot be used here. (3:14)
  1 | {
  2 |   // function parameter
> 3 |   function f(void) {}
    |              ^
  4 | }
  5 | {
  6 |   // arrow function parameter
Cause: Identifier expected. 'void' is a reserved word that cannot be used here."
`;

exports[`function-parameter.js format 1`] = `
====================================options=====================================
parsers: ["babel", "flow", "typescript"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
{
  // function parameter
  function f(void) {}
}
{
  // arrow function parameter
  (x, void) => {}
}
{
  // async arrow function parameter
  async (void, x) => {}
}
{
  // object method parameter
  ({ f(x, void, y) {} });
}
{
  // class method parameter
  class C { m(void,) {} }
}

=====================================output=====================================
{
  // function parameter
  function f(void) {}
}
{
  // arrow function parameter
  (x, void) => {};
}
{
  // async arrow function parameter
  async (void, x) => {};
}
{
  // object method parameter
  ({ f(x, void, y) {} });
}
{
  // class method parameter
  class C {
    m(void) {}
  }
}

================================================================================
`;

exports[`object-pattern.js [acorn] format 1`] = `
"Unexpected keyword 'void' (3:17)
  1 | {
  2 |   // destructuring binding
> 3 |   const { void: void } = value;
    |                 ^
  4 | }
  5 | {
  6 |   // for-of destructuring binding
Cause: Unexpected keyword 'void' (3:16)"
`;

exports[`object-pattern.js [espree] format 1`] = `
"Unexpected keyword 'void' (3:17)
  1 | {
  2 |   // destructuring binding
> 3 |   const { void: void } = value;
    |                 ^
  4 | }
  5 | {
  6 |   // for-of destructuring binding
Cause: Unexpected keyword 'void'"
`;

exports[`object-pattern.js [flow] format 1`] = `
"Unexpected reserved word (3:17)
  1 | {
  2 |   // destructuring binding
> 3 |   const { void: void } = value;
    |                 ^^^^
  4 | }
  5 | {
  6 |   // for-of destructuring binding"
`;

exports[`object-pattern.js [hermes] format 1`] = `
"identifier, '{' or '[' expected in binding pattern (3:16)
  1 | {
  2 |   // destructuring binding
> 3 |   const { void: void } = value;
    |                ^
  4 | }
  5 | {
  6 |   // for-of destructuring binding
Cause: identifier, '{' or '[' expected in binding pattern (3:16)
  const { void: void } = value;
                ^"
`;

exports[`object-pattern.js [meriyah] format 1`] = `
"Unexpected token: '}' (3:22)
  1 | {
  2 |   // destructuring binding
> 3 |   const { void: void } = value;
    |                      ^
  4 | }
  5 | {
  6 |   // for-of destructuring binding
Cause: [3:21-3:22]: Unexpected token: '}'"
`;

exports[`object-pattern.js [oxc] format 1`] = `
"Identifier expected. 'void' is a reserved word that cannot be used here. (3:17)
  1 | {
  2 |   // destructuring binding
> 3 |   const { void: void } = value;
    |                 ^^^^
  4 | }
  5 | {
  6 |   // for-of destructuring binding"
`;

exports[`object-pattern.js [oxc-ts] format 1`] = `
"Identifier expected. 'void' is a reserved word that cannot be used here. (3:17)
  1 | {
  2 |   // destructuring binding
> 3 |   const { void: void } = value;
    |                 ^^^^
  4 | }
  5 | {
  6 |   // for-of destructuring binding"
`;

exports[`object-pattern.js [typescript] format 1`] = `
"Identifier expected. 'void' is a reserved word that cannot be used here. (3:17)
  1 | {
  2 |   // destructuring binding
> 3 |   const { void: void } = value;
    |                 ^
  4 | }
  5 | {
  6 |   // for-of destructuring binding
Cause: Identifier expected. 'void' is a reserved word that cannot be used here."
`;

exports[`object-pattern.js format 1`] = `
====================================options=====================================
parsers: ["babel", "flow", "typescript"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
{
  // destructuring binding
  const { void: void } = value;
}
{
  // for-of destructuring binding
  for (const { p: void } of []);
}
{
  // destructuring assignment
  ({ p: void } = {});
}
{
  // for-of destructuring assignment
  for ({ p: void } of []);
}
{
  // function param
  function f({ q: { q: { p: void }, p: void }, p: void }) {}
}
{
  // arrow function param
  ({ q: { q: { p: void }, p: void }, p: void }) => {}
}
{
  // async arrow function param
  async ({ q: { q: { p: void }, p: void }, p: void }) => {}
}
{
  // destructuring assignment in async call
  async({ p: void } = {});
}
{
  // catch param
  try {} catch ({ p: void }) {}
}

=====================================output=====================================
{
  // destructuring binding
  const { void: void } = value;
}
{
  // for-of destructuring binding
  for (const { p: void } of []);
}
{
  // destructuring assignment
  ({ p: void } = {});
}
{
  // for-of destructuring assignment
  for ({ p: void } of []);
}
{
  // function param
  function f({
    q: {
      q: { p: void },
      p: void,
    },
    p: void,
  }) {}
}
{
  // arrow function param
  ({
    q: {
      q: { p: void },
      p: void,
    },
    p: void,
  }) => {};
}
{
  // async arrow function param
  async ({
    q: {
      q: { p: void },
      p: void,
    },
    p: void,
  }) => {};
}
{
  // destructuring assignment in async call
  async(({ p: void } = {}));
}
{
  // catch param
  try {
  } catch ({ p: void }) {}
}

================================================================================
`;

exports[`unary-expression-void.js [acorn] format 1`] = `
"Unexpected token (4:10)
  2 | void [
  3 |   // pattern
> 4 |   [ void ] = [{
    |          ^
  5 |     // expr
  6 |     [ void [] ]:
  7 |     // pattern
Cause: Unexpected token (4:9)"
`;

exports[`unary-expression-void.js [espree] format 1`] = `
"Unexpected token ] (4:10)
  2 | void [
  3 |   // pattern
> 4 |   [ void ] = [{
    |          ^
  5 |     // expr
  6 |     [ void [] ]:
  7 |     // pattern
Cause: Unexpected token ]"
`;

exports[`unary-expression-void.js [flow] format 1`] = `
"Unexpected token \`]\` (4:10)
  2 | void [
  3 |   // pattern
> 4 |   [ void ] = [{
    |          ^
  5 |     // expr
  6 |     [ void [] ]:
  7 |     // pattern"
`;

exports[`unary-expression-void.js [hermes] format 1`] = `
"invalid expression (4:9)
  2 | void [
  3 |   // pattern
> 4 |   [ void ] = [{
    |         ^
  5 |     // expr
  6 |     [ void [] ]:
  7 |     // pattern
Cause: invalid expression (4:9)
  [ void ] = [{
         ^"
`;

exports[`unary-expression-void.js [meriyah] format 1`] = `
"Unexpected token: ']' (4:10)
  2 | void [
  3 |   // pattern
> 4 |   [ void ] = [{
    |          ^
  5 |     // expr
  6 |     [ void [] ]:
  7 |     // pattern
Cause: [4:9-4:10]: Unexpected token: ']'"
`;

exports[`unary-expression-void.js [oxc] format 1`] = `
"Unexpected token (4:10)
  2 | void [
  3 |   // pattern
> 4 |   [ void ] = [{
    |          ^
  5 |     // expr
  6 |     [ void [] ]:
  7 |     // pattern"
`;

exports[`unary-expression-void.js [oxc-ts] format 1`] = `
"Unexpected token (4:10)
  2 | void [
  3 |   // pattern
> 4 |   [ void ] = [{
    |          ^
  5 |     // expr
  6 |     [ void [] ]:
  7 |     // pattern"
`;

exports[`unary-expression-void.js [typescript] format 1`] = `
"Expression expected. (4:10)
  2 | void [
  3 |   // pattern
> 4 |   [ void ] = [{
    |          ^
  5 |     // expr
  6 |     [ void [] ]:
  7 |     // pattern
Cause: Expression expected."
`;

exports[`unary-expression-void.js format 1`] = `
====================================options=====================================
parsers: ["babel", "flow", "typescript"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
// expr
void [
  // pattern
  [ void ] = [{
    // expr
    [ void [] ]:
    // pattern
    [ void ] =
    // expr
    void [
      // pattern
      ([void]) => []
    ]
    // expr
  }] = [void []]
]

=====================================output=====================================
// expr
void [
  // pattern
  ([void] = [
    {
      // expr
      [void []]:
        // pattern
        // expr
        [void] = void [
          // pattern
          ([void]) => [],
        ],
      // expr
    },
  ] =
    [void []]),
];

================================================================================
`;

exports[`using.js [acorn] format 1`] = `
"Unexpected keyword 'void' (2:9)
  1 | {
> 2 |   using void = f();
    |         ^
  3 | }
  4 | async (void) => {
  5 |   await using void = f();
Cause: Unexpected keyword 'void' (2:8)"
`;

exports[`using.js [espree] format 1`] = `
"Unexpected keyword 'void' (2:9)
  1 | {
> 2 |   using void = f();
    |         ^
  3 | }
  4 | async (void) => {
  5 |   await using void = f();
Cause: Unexpected keyword 'void'"
`;

exports[`using.js [flow] format 1`] = `
"Unexpected token \`void\`, expected the end of an expression statement (\`;\`) (2:9)
  1 | {
> 2 |   using void = f();
    |         ^^^^
  3 | }
  4 | async (void) => {
  5 |   await using void = f();"
`;

exports[`using.js [hermes] format 1`] = `
"';' expected (2:8)
  1 | {
> 2 |   using void = f();
    |        ^
  3 | }
  4 | async (void) => {
  5 |   await using void = f();
Cause: ';' expected (2:8)
  using void = f();
        ^"
`;

exports[`using.js [meriyah] format 1`] = `
"Unexpected token: 'void' (2:9)
  1 | {
> 2 |   using void = f();
    |         ^^^^
  3 | }
  4 | async (void) => {
  5 |   await using void = f();
Cause: [2:8-2:12]: Unexpected token: 'void'"
`;

exports[`using.js [oxc] format 1`] = `
"Expected a semicolon or an implicit semicolon after a statement, but found none (2:8)
  1 | {
> 2 |   using void = f();
    |        ^
  3 | }
  4 | async (void) => {
  5 |   await using void = f();"
`;

exports[`using.js [oxc-ts] format 1`] = `
"Expected a semicolon or an implicit semicolon after a statement, but found none (2:8)
  1 | {
> 2 |   using void = f();
    |        ^
  3 | }
  4 | async (void) => {
  5 |   await using void = f();"
`;

exports[`using.js [typescript] format 1`] = `
"Unexpected keyword or identifier. (2:3)
  1 | {
> 2 |   using void = f();
    |   ^
  3 | }
  4 | async (void) => {
  5 |   await using void = f();
Cause: Unexpected keyword or identifier."
`;

exports[`using.js format 1`] = `
====================================options=====================================
parsers: ["babel", "flow", "typescript"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
{
  using void = f();
}
async (void) => {
  await using void = f();
}

=====================================output=====================================
{
  using void = f();
}
async (void) => {
  await using void = f();
};

================================================================================
`;

exports[`using-variable-declarator.js [acorn] format 1`] = `
"Unexpected keyword 'void' (3:9)
  1 | {
  2 |   // using 1 declarator
> 3 |   using void = f();
    |         ^
  4 | }
  5 | {
  6 |   // using 2 declarators
Cause: Unexpected keyword 'void' (3:8)"
`;

exports[`using-variable-declarator.js [espree] format 1`] = `
"Unexpected keyword 'void' (3:9)
  1 | {
  2 |   // using 1 declarator
> 3 |   using void = f();
    |         ^
  4 | }
  5 | {
  6 |   // using 2 declarators
Cause: Unexpected keyword 'void'"
`;

exports[`using-variable-declarator.js [flow] format 1`] = `
"Unexpected token \`void\`, expected the end of an expression statement (\`;\`) (3:9)
  1 | {
  2 |   // using 1 declarator
> 3 |   using void = f();
    |         ^^^^
  4 | }
  5 | {
  6 |   // using 2 declarators"
`;

exports[`using-variable-declarator.js [hermes] format 1`] = `
"';' expected (3:8)
  1 | {
  2 |   // using 1 declarator
> 3 |   using void = f();
    |        ^
  4 | }
  5 | {
  6 |   // using 2 declarators
Cause: ';' expected (3:8)
  using void = f();
        ^"
`;

exports[`using-variable-declarator.js [meriyah] format 1`] = `
"Unexpected token: 'void' (3:9)
  1 | {
  2 |   // using 1 declarator
> 3 |   using void = f();
    |         ^^^^
  4 | }
  5 | {
  6 |   // using 2 declarators
Cause: [3:8-3:12]: Unexpected token: 'void'"
`;

exports[`using-variable-declarator.js [oxc] format 1`] = `
"Expected a semicolon or an implicit semicolon after a statement, but found none (3:8)
  1 | {
  2 |   // using 1 declarator
> 3 |   using void = f();
    |        ^
  4 | }
  5 | {
  6 |   // using 2 declarators"
`;

exports[`using-variable-declarator.js [oxc-ts] format 1`] = `
"Expected a semicolon or an implicit semicolon after a statement, but found none (3:8)
  1 | {
  2 |   // using 1 declarator
> 3 |   using void = f();
    |        ^
  4 | }
  5 | {
  6 |   // using 2 declarators"
`;

exports[`using-variable-declarator.js [typescript] format 1`] = `
"Unexpected keyword or identifier. (3:3)
  1 | {
  2 |   // using 1 declarator
> 3 |   using void = f();
    |   ^
  4 | }
  5 | {
  6 |   // using 2 declarators
Cause: Unexpected keyword or identifier."
`;

exports[`using-variable-declarator.js format 1`] = `
====================================options=====================================
parsers: ["babel", "flow", "typescript"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
{
  // using 1 declarator
  using void = f();
}
{
  // using 2 declarators
  using void = f(), void = g();
}
{
  // using void declarator and normal declarator
  using void = f(), x = g();
}
{
  // using declarator in for-of
  for(using void of []);
}
async () => {
  {
    // await using 1 declarator
    await using void = f();
  }
  {
    // await using 2 declarators
    await using void = f(), void = g();
  }
  {
    // await using void declarator and normal declarator
    await using void = f(), x = g();
  }
  {
    // await using declarator in for-of
    for(await using void of []);
  }
}

=====================================output=====================================
{
  // using 1 declarator
  using void = f();
}
{
  // using 2 declarators
  using void = f(),
    void = g();
}
{
  // using void declarator and normal declarator
  using void = f(),
    x = g();
}
{
  // using declarator in for-of
  for (using void of []);
}
async () => {
  {
    // await using 1 declarator
    await using void = f();
  }
  {
    // await using 2 declarators
    await using void = f(),
      void = g();
  }
  {
    // await using void declarator and normal declarator
    await using void = f(),
      x = g();
  }
  {
    // await using declarator in for-of
    for (await using void of []);
  }
};

================================================================================
`;
