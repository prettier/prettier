// Jest Snapshot v1, https://jestjs.io/docs/snapshot-testing

exports[`destructuring.js [hermes] format 1`] = `
"invalid assignment left-hand side (2:0)
  1 | const [one, two = null, three = null] = arr;
> 2 | a = ([s=1,]) => 1
  3 | const { children, ...props } = this.props
  4 |
  5 | const { user: { firstName, lastName } } = this.props;
Cause: invalid assignment left-hand side (2:0)
a = ([s=1,]) => 1
^"
`;

exports[`destructuring.js format 1`] = `
====================================options=====================================
parsers: ["babel", "flow", "typescript"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
const [one, two = null, three = null] = arr;
a = ([s=1,]) => 1
const { children, ...props } = this.props

const { user: { firstName, lastName } } = this.props;

const {
  name: { first, last },
  organisation: { address: { street: orgStreetAddress, postcode: orgPostcode } }
} = user;

function f({ data: { name } }) {}

const UserComponent = function({
  name: { first, last },
  organisation: { address: { street: orgStreetAddress, postcode: orgPostcode } },
}) {
  return
};

const { a, b, c, d: { e } } = someObject;

try {
  // code
} catch ({ data: { message }}) {
  // code
}

try {
  // code
} catch ({ data: { message: { errors }}}) {
  // code
}

const obj = {
  func(id, { blog: { title } }) {
    return id + title;
  },
};

class A {
  func(id, { blog: { title } }) {
    return id + title;
  }
}

=====================================output=====================================
const [one, two = null, three = null] = arr;
a = ([s = 1]) => 1;
const { children, ...props } = this.props;

const {
  user: { firstName, lastName },
} = this.props;

const {
  name: { first, last },
  organisation: {
    address: { street: orgStreetAddress, postcode: orgPostcode },
  },
} = user;

function f({ data: { name } }) {}

const UserComponent = function ({
  name: { first, last },
  organisation: {
    address: { street: orgStreetAddress, postcode: orgPostcode },
  },
}) {
  return;
};

const {
  a,
  b,
  c,
  d: { e },
} = someObject;

try {
  // code
} catch ({ data: { message } }) {
  // code
}

try {
  // code
} catch ({
  data: {
    message: { errors },
  },
}) {
  // code
}

const obj = {
  func(id, { blog: { title } }) {
    return id + title;
  },
};

class A {
  func(id, { blog: { title } }) {
    return id + title;
  }
}

================================================================================
`;

exports[`issue-2550.js format 1`] = `
====================================options=====================================
parsers: ["babel", "flow", "typescript"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
// Simple multi-line destructuring
const {
  prop1,
  prop2,
  prop3,
  prop4,
  prop5,
} = someObject;

// React - hooks
function useUserData() {
  const {
    data,
    error,
    isLoading,
    isError,
    refetch,
  } = useQuery('user');
  
  return { data, error };
}

// React - context
function MyComponent() {
  const {
    theme,
    language,
    user,
    permissions,
    settings,
  } = useContext(AppContext);
  
  return null;
}

// Vue - toRefs
const vueComponent = {
  setup(props) {
    const {
      modelValue,
      placeholder,
      disabled,
      readonly,
      maxLength,
    } = toRefs(props);
    
    return { modelValue };
  }
};

// Vue - composable
function useCounter() {
  const {
    count,
    increment,
    decrement,
    reset,
  } = useCounterStore();
  
  return { count, increment };
}

// Angular - RxJS subscribe
this.store.select(selectUser).subscribe(({
  id,
  name,
  email,
  role,
  permissions,
}) => {
  console.log(name);
});

// Svelte - props
const {
  title,
  description,
  imageUrl,
  author,
  publishedDate,
} = props;

// Ember - component
class UserComponent {
  get userData() {
    const {
      firstName,
      lastName,
      email,
      phoneNumber,
      address,
    } = this.args.user;
    
    return { firstName, lastName };
  }
}

// Next.js - getServerSideProps
async function getServerSideProps({
  params,
  query,
  req,
  res,
  resolvedUrl,
}) {
  return { props: {} };
}

// Next.js - API route
function handler({
  method,
  body,
  query,
  headers,
  cookies,
}) {
  return { success: true };
}

// Express - middleware
app.use(({
  method,
  url,
  headers,
  body,
  query,
}, res, next) => {
  next();
});

// Express - route handler
app.get('/user/:id', ({
  params,
  query,
  body,
  headers,
  cookies,
}, res) => {
  res.json({ success: true });
});

// Redux - action payload
const userSlice = createSlice({
  name: 'user',
  initialState,
  reducers: {
    setUser: (state, {
      payload: {
        id,
        name,
        email,
        role,
      }
    }) => {
      state.user = { id, name, email, role };
    }
  }
});

// Redux - selector
const selectUserData = createSelector(
  selectUser,
  ({
    profile,
    settings,
    preferences,
    notifications,
  }) => ({
    profile,
    settings,
  })
);

// GraphQL - Apollo query
function UserProfile() {
  const {
    data,
    loading,
    error,
    refetch,
    networkStatus,
  } = useQuery(GET_USER);
  
  return loading ? <Spinner /> : <div>{data.user.name}</div>;
}

// GraphQL - resolver
const resolvers = {
  Query: {
    user: (parent, {
      id,
      includeProfile,
      includeSettings,
    }, {
      dataSources,
      user,
    }) => {
      return dataSources.userAPI.getUser(id);
    }
  }
};

// Nested destructuring - complex
const {
  user: {
    profile: {
      firstName,
      lastName,
      email,
    },
    settings: {
      theme,
      language,
      notifications: {
        email: emailNotifications,
        push: pushNotifications,
      },
    },
  },
  metadata: {
    createdAt,
    updatedAt,
  },
} = data;

// Testing Library - queries
test('renders user profile', () => {
  const {
    getByText,
    getByRole,
    getByTestId,
    queryByText,
  } = render(<UserProfile />);
  
  expect(getByText('John Doe')).toBeInTheDocument();
});

// Jest - test utilities
describe('UserService', () => {
  it('should fetch user', async () => {
    const {
      getUser,
      updateUser,
      deleteUser,
      listUsers,
    } = userService;
    
    const user = await getUser('123');
    expect(user).toBeDefined();
  });
});

// Import destructuring
const {
  useState,
  useEffect,
  useContext,
  useMemo,
  useCallback,
} = React;

// Arrow function with destructuring
const processUser = ({
  id,
  name,
  email,
  role,
  permissions,
}) => {
  return { id, name };
};

// Complex nested in function
async function processUserData({
  user: {
    profile: {
      firstName,
      lastName,
    },
    settings: {
      theme,
      language,
    },
  },
  metadata: {
    createdAt,
    updatedAt,
  },
}) {
  return { firstName, lastName, theme };
}

=====================================output=====================================
// Simple multi-line destructuring
const { prop1, prop2, prop3, prop4, prop5 } = someObject;

// React - hooks
function useUserData() {
  const { data, error, isLoading, isError, refetch } = useQuery("user");

  return { data, error };
}

// React - context
function MyComponent() {
  const { theme, language, user, permissions, settings } =
    useContext(AppContext);

  return null;
}

// Vue - toRefs
const vueComponent = {
  setup(props) {
    const { modelValue, placeholder, disabled, readonly, maxLength } =
      toRefs(props);

    return { modelValue };
  },
};

// Vue - composable
function useCounter() {
  const { count, increment, decrement, reset } = useCounterStore();

  return { count, increment };
}

// Angular - RxJS subscribe
this.store
  .select(selectUser)
  .subscribe(({ id, name, email, role, permissions }) => {
    console.log(name);
  });

// Svelte - props
const { title, description, imageUrl, author, publishedDate } = props;

// Ember - component
class UserComponent {
  get userData() {
    const { firstName, lastName, email, phoneNumber, address } = this.args.user;

    return { firstName, lastName };
  }
}

// Next.js - getServerSideProps
async function getServerSideProps({ params, query, req, res, resolvedUrl }) {
  return { props: {} };
}

// Next.js - API route
function handler({ method, body, query, headers, cookies }) {
  return { success: true };
}

// Express - middleware
app.use(({ method, url, headers, body, query }, res, next) => {
  next();
});

// Express - route handler
app.get("/user/:id", ({ params, query, body, headers, cookies }, res) => {
  res.json({ success: true });
});

// Redux - action payload
const userSlice = createSlice({
  name: "user",
  initialState,
  reducers: {
    setUser: (state, { payload: { id, name, email, role } }) => {
      state.user = { id, name, email, role };
    },
  },
});

// Redux - selector
const selectUserData = createSelector(
  selectUser,
  ({ profile, settings, preferences, notifications }) => ({
    profile,
    settings,
  }),
);

// GraphQL - Apollo query
function UserProfile() {
  const { data, loading, error, refetch, networkStatus } = useQuery(GET_USER);

  return loading ? <Spinner /> : <div>{data.user.name}</div>;
}

// GraphQL - resolver
const resolvers = {
  Query: {
    user: (
      parent,
      { id, includeProfile, includeSettings },
      { dataSources, user },
    ) => {
      return dataSources.userAPI.getUser(id);
    },
  },
};

// Nested destructuring - complex
const {
  user: {
    profile: { firstName, lastName, email },
    settings: {
      theme,
      language,
      notifications: { email: emailNotifications, push: pushNotifications },
    },
  },
  metadata: { createdAt, updatedAt },
} = data;

// Testing Library - queries
test("renders user profile", () => {
  const { getByText, getByRole, getByTestId, queryByText } = render(
    <UserProfile />,
  );

  expect(getByText("John Doe")).toBeInTheDocument();
});

// Jest - test utilities
describe("UserService", () => {
  it("should fetch user", async () => {
    const { getUser, updateUser, deleteUser, listUsers } = userService;

    const user = await getUser("123");
    expect(user).toBeDefined();
  });
});

// Import destructuring
const { useState, useEffect, useContext, useMemo, useCallback } = React;

// Arrow function with destructuring
const processUser = ({ id, name, email, role, permissions }) => {
  return { id, name };
};

// Complex nested in function
async function processUserData({
  user: {
    profile: { firstName, lastName },
    settings: { theme, language },
  },
  metadata: { createdAt, updatedAt },
}) {
  return { firstName, lastName, theme };
}

================================================================================
`;

exports[`issue-5988.js format 1`] = `
====================================options=====================================
parsers: ["babel", "flow", "typescript"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
const { foo, bar: bazAndSomething, quxIsLong } = someBigFunctionName("foo")("bar");

=====================================output=====================================
const {
  foo,
  bar: bazAndSomething,
  quxIsLong,
} = someBigFunctionName("foo")("bar");

================================================================================
`;
