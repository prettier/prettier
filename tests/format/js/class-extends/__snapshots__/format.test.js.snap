// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`complex.js format 1`] = `
====================================options=====================================
parsers: ["babel", "flow", "typescript"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
class loooooooooooooooooooong1 extends foooooooo(foooooooo(foooooooo(foooooooo(foooooooo(foooooooo(foooooooo(foooooooo()))))))) {}

class loooooooooooooooooooong2 extends function (make, model, year, owner) {
  this.make = make;
  this.model = model;
  this.year = year;
  this.owner = owner;
} {}

class loooooooooooooooooooong3 extends class {
  cconstructor(make, model, year, owner) {
    this.make = make;
    this.model = model;
    this.year = year;
    this.owner = owner;
  }
} {}

=====================================output=====================================
class loooooooooooooooooooong1 extends foooooooo(
  foooooooo(foooooooo(foooooooo(foooooooo(foooooooo(foooooooo(foooooooo())))))),
) {}

class loooooooooooooooooooong2 extends function (make, model, year, owner) {
  this.make = make;
  this.model = model;
  this.year = year;
  this.owner = owner;
} {}

class loooooooooooooooooooong3 extends class {
  cconstructor(make, model, year, owner) {
    this.make = make;
    this.model = model;
    this.year = year;
    this.owner = owner;
  }
} {}

================================================================================
`;

exports[`extends.js format 1`] = `
====================================options=====================================
parsers: ["babel", "flow", "typescript"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
// "ArrowFunctionExpression"
class a1 extends (() => {}) {}

// "AssignmentExpression"
class a2 extends (b = c) {}

// "AwaitExpression"
async function f() {
  class a extends (await b) {}
}

// "BinaryExpression"
class a3 extends (b + c) {}

// "CallExpression"
class a4 extends b() {}

// "ClassExpression"
class a5 extends class {} {}

// "ConditionalExpression"
class a6 extends (b ? c : d) {}

// "FunctionExpression"
class a7 extends (function() {}) {}

// "LogicalExpression"
class a8 extends (b || c) {}

// "MemberExpression"
class a9 extends b.c {}

// "NewExpression"
class a10 extends (new B()) {}

// "ObjectExpression"
class a11 extends ({}) {}

// "SequenceExpression"
class a12 extends (b, c) {}

// "TaggedTemplateExpression"
class a13 extends \`\` {}

// "UnaryExpression"
class a14 extends (void b) {}

// "UpdateExpression"
class a15 extends (++b) {}

// "YieldExpression"
function* f2() {
  // Flow has a bug parsing it.
  // class a extends (yield 1) {}
}

x = class extends (++b) {}

=====================================output=====================================
// "ArrowFunctionExpression"
class a1 extends (() => {}) {}

// "AssignmentExpression"
class a2 extends (b = c) {}

// "AwaitExpression"
async function f() {
  class a extends (await b) {}
}

// "BinaryExpression"
class a3 extends (b + c) {}

// "CallExpression"
class a4 extends b() {}

// "ClassExpression"
class a5 extends class {} {}

// "ConditionalExpression"
class a6 extends (b ? c : d) {}

// "FunctionExpression"
class a7 extends function () {} {}

// "LogicalExpression"
class a8 extends (b || c) {}

// "MemberExpression"
class a9 extends b.c {}

// "NewExpression"
class a10 extends (new B()) {}

// "ObjectExpression"
class a11 extends ({}) {}

// "SequenceExpression"
class a12 extends (b, c) {}

// "TaggedTemplateExpression"
class a13 extends \`\` {}

// "UnaryExpression"
class a14 extends (void b) {}

// "UpdateExpression"
class a15 extends (++b) {}

// "YieldExpression"
function* f2() {
  // Flow has a bug parsing it.
  // class a extends (yield 1) {}
}

x = class extends (++b) {};

================================================================================
`;

exports[`tuple-and-record.js [acorn] format 1`] = `
"Unexpected character '{' (2:18)
  1 | class A extends {} {}
> 2 | class B extends #{} {}
    |                  ^
  3 |
  4 | class C extends [] {}
  5 | class D extends #[] {}
Cause: Unexpected character '{' (2:17)"
`;

exports[`tuple-and-record.js [espree] format 1`] = `
"Unexpected character '{' (2:18)
  1 | class A extends {} {}
> 2 | class B extends #{} {}
    |                  ^
  3 |
  4 | class C extends [] {}
  5 | class D extends #[] {}
Cause: Unexpected character '{'"
`;

exports[`tuple-and-record.js [flow] format 1`] = `
"Unexpected token \`#\`, expected an identifier (2:17)
  1 | class A extends {} {}
> 2 | class B extends #{} {}
    |                 ^
  3 |
  4 | class C extends [] {}
  5 | class D extends #[] {}"
`;

exports[`tuple-and-record.js [meriyah] format 1`] = `
"'#' not followed by identifier (2:17)
  1 | class A extends {} {}
> 2 | class B extends #{} {}
    |                 ^
  3 |
  4 | class C extends [] {}
  5 | class D extends #[] {}
Cause: [2:16-2:17]: '#' not followed by identifier"
`;

exports[`tuple-and-record.js [typescript] format 1`] = `
"Invalid character. (2:17)
  1 | class A extends {} {}
> 2 | class B extends #{} {}
    |                 ^
  3 |
  4 | class C extends [] {}
  5 | class D extends #[] {}
Cause: Invalid character."
`;

exports[`tuple-and-record.js format 1`] = `
====================================options=====================================
parsers: ["babel", "flow", "typescript"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
class A extends {} {}
class B extends #{} {}

class C extends [] {}
class D extends #[] {}

=====================================output=====================================
class A extends ({}) {}
class B extends #{} {}

class C extends [] {}
class D extends #[] {}

================================================================================
`;
