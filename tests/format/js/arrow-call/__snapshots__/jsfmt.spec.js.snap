// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`arrow_call.js - {"arrowParens":"always"} format 1`] = `
====================================options=====================================
arrowParens: "always"
parsers: ["babel", "flow", "typescript"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
const testResults = results.testResults.map(testResult =>
  formatResult(testResult, formatter, reporter)
);

it('mocks regexp instances', () => {
  expect(
    () => moduleMocker.generateFromMetadata(moduleMocker.getMetadata(/a/)),
  ).not.toThrow();
});

expect(() => asyncRequest({ url: "/test-endpoint" }))
  .toThrowError(/Required parameter/);

expect(() => asyncRequest({ url: "/test-endpoint-but-with-a-long-url" }))
  .toThrowError(/Required parameter/);

expect(() => asyncRequest({ url: "/test-endpoint-but-with-a-suuuuuuuuper-long-url" }))
  .toThrowError(/Required parameter/);

expect(() => asyncRequest({ type: "foo", url: "/test-endpoint" }))
  .not.toThrowError();

expect(() => asyncRequest({ type: "foo", url: "/test-endpoint-but-with-a-long-url" }))
  .not.toThrowError();

const a = Observable
  .fromPromise(axiosInstance.post('/carts/mine'))
  .map((response) => response.data)

const b = Observable.fromPromise(axiosInstance.get(url))
  .map((response) => response.data)

func(
  veryLoooooooooooooooooooooooongName,
  veryLooooooooooooooooooooooooongName =>
    veryLoooooooooooooooongName.something()
);

promise.then(result => result.veryLongVariable.veryLongPropertyName > someOtherVariable ? "ok" : "fail");

=====================================output=====================================
const testResults = results.testResults.map((testResult) =>
  formatResult(testResult, formatter, reporter)
);

it("mocks regexp instances", () => {
  expect(() =>
    moduleMocker.generateFromMetadata(moduleMocker.getMetadata(/a/))
  ).not.toThrow();
});

expect(() => asyncRequest({ url: "/test-endpoint" })).toThrowError(
  /Required parameter/
);

expect(() =>
  asyncRequest({ url: "/test-endpoint-but-with-a-long-url" })
).toThrowError(/Required parameter/);

expect(() =>
  asyncRequest({ url: "/test-endpoint-but-with-a-suuuuuuuuper-long-url" })
).toThrowError(/Required parameter/);

expect(() =>
  asyncRequest({ type: "foo", url: "/test-endpoint" })
).not.toThrowError();

expect(() =>
  asyncRequest({ type: "foo", url: "/test-endpoint-but-with-a-long-url" })
).not.toThrowError();

const a = Observable.fromPromise(axiosInstance.post("/carts/mine")).map(
  (response) => response.data
);

const b = Observable.fromPromise(axiosInstance.get(url)).map(
  (response) => response.data
);

func(
  veryLoooooooooooooooooooooooongName,
  (veryLooooooooooooooooooooooooongName) =>
    veryLoooooooooooooooongName.something()
);

promise.then((result) =>
  result.veryLongVariable.veryLongPropertyName > someOtherVariable
    ? "ok"
    : "fail"
);

================================================================================
`;

exports[`arrow_call.js - {"trailingComma":"all"} format 1`] = `
====================================options=====================================
parsers: ["babel", "flow", "typescript"]
printWidth: 80
trailingComma: "all"
                                                                                | printWidth
=====================================input======================================
const testResults = results.testResults.map(testResult =>
  formatResult(testResult, formatter, reporter)
);

it('mocks regexp instances', () => {
  expect(
    () => moduleMocker.generateFromMetadata(moduleMocker.getMetadata(/a/)),
  ).not.toThrow();
});

expect(() => asyncRequest({ url: "/test-endpoint" }))
  .toThrowError(/Required parameter/);

expect(() => asyncRequest({ url: "/test-endpoint-but-with-a-long-url" }))
  .toThrowError(/Required parameter/);

expect(() => asyncRequest({ url: "/test-endpoint-but-with-a-suuuuuuuuper-long-url" }))
  .toThrowError(/Required parameter/);

expect(() => asyncRequest({ type: "foo", url: "/test-endpoint" }))
  .not.toThrowError();

expect(() => asyncRequest({ type: "foo", url: "/test-endpoint-but-with-a-long-url" }))
  .not.toThrowError();

const a = Observable
  .fromPromise(axiosInstance.post('/carts/mine'))
  .map((response) => response.data)

const b = Observable.fromPromise(axiosInstance.get(url))
  .map((response) => response.data)

func(
  veryLoooooooooooooooooooooooongName,
  veryLooooooooooooooooooooooooongName =>
    veryLoooooooooooooooongName.something()
);

promise.then(result => result.veryLongVariable.veryLongPropertyName > someOtherVariable ? "ok" : "fail");

=====================================output=====================================
const testResults = results.testResults.map((testResult) =>
  formatResult(testResult, formatter, reporter),
);

it("mocks regexp instances", () => {
  expect(() =>
    moduleMocker.generateFromMetadata(moduleMocker.getMetadata(/a/)),
  ).not.toThrow();
});

expect(() => asyncRequest({ url: "/test-endpoint" })).toThrowError(
  /Required parameter/,
);

expect(() =>
  asyncRequest({ url: "/test-endpoint-but-with-a-long-url" }),
).toThrowError(/Required parameter/);

expect(() =>
  asyncRequest({ url: "/test-endpoint-but-with-a-suuuuuuuuper-long-url" }),
).toThrowError(/Required parameter/);

expect(() =>
  asyncRequest({ type: "foo", url: "/test-endpoint" }),
).not.toThrowError();

expect(() =>
  asyncRequest({ type: "foo", url: "/test-endpoint-but-with-a-long-url" }),
).not.toThrowError();

const a = Observable.fromPromise(axiosInstance.post("/carts/mine")).map(
  (response) => response.data,
);

const b = Observable.fromPromise(axiosInstance.get(url)).map(
  (response) => response.data,
);

func(
  veryLoooooooooooooooooooooooongName,
  (veryLooooooooooooooooooooooooongName) =>
    veryLoooooooooooooooongName.something(),
);

promise.then((result) =>
  result.veryLongVariable.veryLongPropertyName > someOtherVariable
    ? "ok"
    : "fail",
);

================================================================================
`;

exports[`arrow_call.js format 1`] = `
====================================options=====================================
parsers: ["babel", "flow", "typescript"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
const testResults = results.testResults.map(testResult =>
  formatResult(testResult, formatter, reporter)
);

it('mocks regexp instances', () => {
  expect(
    () => moduleMocker.generateFromMetadata(moduleMocker.getMetadata(/a/)),
  ).not.toThrow();
});

expect(() => asyncRequest({ url: "/test-endpoint" }))
  .toThrowError(/Required parameter/);

expect(() => asyncRequest({ url: "/test-endpoint-but-with-a-long-url" }))
  .toThrowError(/Required parameter/);

expect(() => asyncRequest({ url: "/test-endpoint-but-with-a-suuuuuuuuper-long-url" }))
  .toThrowError(/Required parameter/);

expect(() => asyncRequest({ type: "foo", url: "/test-endpoint" }))
  .not.toThrowError();

expect(() => asyncRequest({ type: "foo", url: "/test-endpoint-but-with-a-long-url" }))
  .not.toThrowError();

const a = Observable
  .fromPromise(axiosInstance.post('/carts/mine'))
  .map((response) => response.data)

const b = Observable.fromPromise(axiosInstance.get(url))
  .map((response) => response.data)

func(
  veryLoooooooooooooooooooooooongName,
  veryLooooooooooooooooooooooooongName =>
    veryLoooooooooooooooongName.something()
);

promise.then(result => result.veryLongVariable.veryLongPropertyName > someOtherVariable ? "ok" : "fail");

=====================================output=====================================
const testResults = results.testResults.map((testResult) =>
  formatResult(testResult, formatter, reporter)
);

it("mocks regexp instances", () => {
  expect(() =>
    moduleMocker.generateFromMetadata(moduleMocker.getMetadata(/a/))
  ).not.toThrow();
});

expect(() => asyncRequest({ url: "/test-endpoint" })).toThrowError(
  /Required parameter/
);

expect(() =>
  asyncRequest({ url: "/test-endpoint-but-with-a-long-url" })
).toThrowError(/Required parameter/);

expect(() =>
  asyncRequest({ url: "/test-endpoint-but-with-a-suuuuuuuuper-long-url" })
).toThrowError(/Required parameter/);

expect(() =>
  asyncRequest({ type: "foo", url: "/test-endpoint" })
).not.toThrowError();

expect(() =>
  asyncRequest({ type: "foo", url: "/test-endpoint-but-with-a-long-url" })
).not.toThrowError();

const a = Observable.fromPromise(axiosInstance.post("/carts/mine")).map(
  (response) => response.data
);

const b = Observable.fromPromise(axiosInstance.get(url)).map(
  (response) => response.data
);

func(
  veryLoooooooooooooooooooooooongName,
  (veryLooooooooooooooooooooooooongName) =>
    veryLoooooooooooooooongName.something()
);

promise.then((result) =>
  result.veryLongVariable.veryLongPropertyName > someOtherVariable
    ? "ok"
    : "fail"
);

================================================================================
`;

exports[`class-property.js - {"arrowParens":"always"} format 1`] = `
====================================options=====================================
arrowParens: "always"
parsers: ["babel", "flow", "typescript"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
const composition = (ViewComponent, ContainerComponent) =>
  class extends React.Component {
    static propTypes = {};
  };

=====================================output=====================================
const composition = (ViewComponent, ContainerComponent) =>
  class extends React.Component {
    static propTypes = {};
  };

================================================================================
`;

exports[`class-property.js - {"trailingComma":"all"} format 1`] = `
====================================options=====================================
parsers: ["babel", "flow", "typescript"]
printWidth: 80
trailingComma: "all"
                                                                                | printWidth
=====================================input======================================
const composition = (ViewComponent, ContainerComponent) =>
  class extends React.Component {
    static propTypes = {};
  };

=====================================output=====================================
const composition = (ViewComponent, ContainerComponent) =>
  class extends React.Component {
    static propTypes = {};
  };

================================================================================
`;

exports[`class-property.js format 1`] = `
====================================options=====================================
parsers: ["babel", "flow", "typescript"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
const composition = (ViewComponent, ContainerComponent) =>
  class extends React.Component {
    static propTypes = {};
  };

=====================================output=====================================
const composition = (ViewComponent, ContainerComponent) =>
  class extends React.Component {
    static propTypes = {};
  };

================================================================================
`;
