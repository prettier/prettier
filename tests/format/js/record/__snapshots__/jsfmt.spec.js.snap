// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`computed.js [espree] format 1`] = `
"Unexpected character '{' (2:9)
  1 | const key = \\"a\\";
> 2 | assert(#{ [key]: 1 } === #{ a: 1 })
    |         ^
  3 | assert(#{ [key.toUpperCase()]: 1 } === #{ A: 1 })
  4 |
  5 | assert(#{ [true]: 1 } === #{ true: 1 })"
`;

exports[`computed.js [meriyah] format 1`] = `
"[2:8]: '#' not followed by identifier (2:8)
  1 | const key = \\"a\\";
> 2 | assert(#{ [key]: 1 } === #{ a: 1 })
    |        ^
  3 | assert(#{ [key.toUpperCase()]: 1 } === #{ A: 1 })
  4 |
  5 | assert(#{ [true]: 1 } === #{ true: 1 })"
`;

exports[`computed.js format 1`] = `
====================================options=====================================
parsers: ["babel"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
const key = "a";
assert(#{ [key]: 1 } === #{ a: 1 })
assert(#{ [key.toUpperCase()]: 1 } === #{ A: 1 })

assert(#{ [true]: 1 } === #{ true: 1 })
assert(#{ [true]: 1 } === #{ ["true"]: 1 })

assert(#{ [1 + 1]: "two" } === #{ 2: "two" })
assert(#{ [9 + 1]: "ten" } === #{ ["10"]: "ten" })

=====================================output=====================================
const key = "a";
assert(#{ [key]: 1 } === #{ a: 1 });
assert(#{ [key.toUpperCase()]: 1 } === #{ A: 1 });

assert(#{ [true]: 1 } === #{ true: 1 });
assert(#{ [true]: 1 } === #{ ["true"]: 1 });

assert(#{ [1 + 1]: "two" } === #{ 2: "two" });
assert(#{ [9 + 1]: "ten" } === #{ ["10"]: "ten" });

================================================================================
`;

exports[`destructuring.js [espree] format 1`] = `
"Unexpected character '{' (1:19)
> 1 | const { a, b } = #{ a: 1, b: 2 };
    |                   ^
  2 | assert(a === 1);
  3 | assert(b === 2);
  4 |"
`;

exports[`destructuring.js [meriyah] format 1`] = `
"[1:18]: '#' not followed by identifier (1:18)
> 1 | const { a, b } = #{ a: 1, b: 2 };
    |                  ^
  2 | assert(a === 1);
  3 | assert(b === 2);
  4 |"
`;

exports[`destructuring.js format 1`] = `
====================================options=====================================
parsers: ["babel"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
const { a, b } = #{ a: 1, b: 2 };
assert(a === 1);
assert(b === 2);

const { a, ...rest } = #{ a: 1, b: 2, c: 3 };
assert(a === 1);
assert(typeof rest === "object");
assert(rest.b === 2);
assert(rest.c === 3);

=====================================output=====================================
const { a, b } = #{ a: 1, b: 2 };
assert(a === 1);
assert(b === 2);

const { a, ...rest } = #{ a: 1, b: 2, c: 3 };
assert(a === 1);
assert(typeof rest === "object");
assert(rest.b === 2);
assert(rest.c === 3);

================================================================================
`;

exports[`record.js [espree] format 1`] = `
"Unexpected character '{' (1:18)
> 1 | const record1 = #{
    |                  ^
  2 |     a: 1,
  3 |     b: 2,
  4 |     c: 3,"
`;

exports[`record.js [meriyah] format 1`] = `
"[1:17]: '#' not followed by identifier (1:17)
> 1 | const record1 = #{
    |                 ^
  2 |     a: 1,
  3 |     b: 2,
  4 |     c: 3,"
`;

exports[`record.js format 1`] = `
====================================options=====================================
parsers: ["babel"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
const record1 = #{
    a: 1,
    b: 2,
    c: 3,
};

const record2 = #{...record1, b: 5};

assert(record1.a === 1);
assert(record1["a"] === 1);
assert(record1 !== record2);
assert(record2 === #{ a: 1, c: 3, b: 5 });
assert(record1?.a === 1);
assert(record1?.d === undefined);
assert(record1?.d ?? 5 === 5);
assert(record1.d?.a === undefined);

=====================================output=====================================
const record1 = #{
  a: 1,
  b: 2,
  c: 3,
};

const record2 = #{ ...record1, b: 5 };

assert(record1.a === 1);
assert(record1["a"] === 1);
assert(record1 !== record2);
assert(record2 === #{ a: 1, c: 3, b: 5 });
assert(record1?.a === 1);
assert(record1?.d === undefined);
assert(record1?.d ?? 5 === 5);
assert(record1.d?.a === undefined);

================================================================================
`;

exports[`shorthand.js [espree] format 1`] = `
"Unexpected character '{' (2:17)
  1 | const url = \\"https://github.com/tc39/proposal-record-tuple\\";
> 2 | const record = #{ url }
    |                 ^
  3 | console.log(record.url) // https://github.com/tc39/proposal-record-tuple
  4 |"
`;

exports[`shorthand.js [meriyah] format 1`] = `
"[2:16]: '#' not followed by identifier (2:16)
  1 | const url = \\"https://github.com/tc39/proposal-record-tuple\\";
> 2 | const record = #{ url }
    |                ^
  3 | console.log(record.url) // https://github.com/tc39/proposal-record-tuple
  4 |"
`;

exports[`shorthand.js format 1`] = `
====================================options=====================================
parsers: ["babel"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
const url = "https://github.com/tc39/proposal-record-tuple";
const record = #{ url }
console.log(record.url) // https://github.com/tc39/proposal-record-tuple

=====================================output=====================================
const url = "https://github.com/tc39/proposal-record-tuple";
const record = #{ url };
console.log(record.url); // https://github.com/tc39/proposal-record-tuple

================================================================================
`;

exports[`spread.js [espree] format 1`] = `
"Unexpected character '{' (1:19)
> 1 | const formData = #{ title: \\"Implement all the things\\" }
    |                   ^
  2 | const taskNow = #{ id: 42, status: \\"WIP\\", ...formData }
  3 | const taskLater = #{ ...taskNow, status: \\"DONE\\" }
  4 |"
`;

exports[`spread.js [meriyah] format 1`] = `
"[1:18]: '#' not followed by identifier (1:18)
> 1 | const formData = #{ title: \\"Implement all the things\\" }
    |                  ^
  2 | const taskNow = #{ id: 42, status: \\"WIP\\", ...formData }
  3 | const taskLater = #{ ...taskNow, status: \\"DONE\\" }
  4 |"
`;

exports[`spread.js format 1`] = `
====================================options=====================================
parsers: ["babel"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
const formData = #{ title: "Implement all the things" }
const taskNow = #{ id: 42, status: "WIP", ...formData }
const taskLater = #{ ...taskNow, status: "DONE" }

// A reminder: The ordering of keys in record literals does not affect equality (and is not retained)
assert(taskLater === #{ status: "DONE", title: formData.title, id: 42 })

=====================================output=====================================
const formData = #{ title: "Implement all the things" };
const taskNow = #{ id: 42, status: "WIP", ...formData };
const taskLater = #{ ...taskNow, status: "DONE" };

// A reminder: The ordering of keys in record literals does not affect equality (and is not retained)
assert(taskLater === #{ status: "DONE", title: formData.title, id: 42 });

================================================================================
`;

exports[`syntax.js [espree] format 1`] = `
"Unexpected character '{' (1:2)
> 1 | #{}
    |  ^
  2 | #{ a: 1, b: 2 }
  3 | #{ a: 1, b: #[2, 3, #{ c: 4 }] }
  4 |"
`;

exports[`syntax.js [meriyah] format 1`] = `
"[1:1]: '#' not followed by identifier (1:1)
> 1 | #{}
    | ^
  2 | #{ a: 1, b: 2 }
  3 | #{ a: 1, b: #[2, 3, #{ c: 4 }] }
  4 |"
`;

exports[`syntax.js format 1`] = `
====================================options=====================================
parsers: ["babel"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
#{}
#{ a: 1, b: 2 }
#{ a: 1, b: #[2, 3, #{ c: 4 }] }

=====================================output=====================================
#{};
#{ a: 1, b: 2 };
#{ a: 1, b: #[2, 3, #{ c: 4 }] };

================================================================================
`;
