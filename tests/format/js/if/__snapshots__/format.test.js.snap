// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`comment_before_else.js format 1`] = `
====================================options=====================================
parsers: ["babel", "flow", "typescript"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
if (cond) {
  stuff;
} /* comment */ else if (cond) {
  stuff;
}
// comment
else {
  stuff;
}

if (cond) stuff;
// comment
else stuff;

=====================================output=====================================
if (cond) {
  stuff;
} /* comment */ else if (cond) {
  stuff;
}
// comment
else {
  stuff;
}

if (cond) stuff;
// comment
else stuff;

================================================================================
`;

exports[`else.js format 1`] = `
====================================options=====================================
parsers: ["babel", "flow", "typescript"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
// Both functions below should be formatted exactly the same

function f() {
  if (position)
    return {name: pair};
  else
    return {name: pair.substring(0, position), value: pair.substring(position + 1)};
}

function f() {
  if (position)
    return {name: pair};
  else
    return {
      name: pair.substring(0, position),
      value: pair.substring(position + 1)
    };
}

=====================================output=====================================
// Both functions below should be formatted exactly the same

function f() {
  if (position) return { name: pair };
  else
    return {
      name: pair.substring(0, position),
      value: pair.substring(position + 1),
    };
}

function f() {
  if (position) return { name: pair };
  else
    return {
      name: pair.substring(0, position),
      value: pair.substring(position + 1),
    };
}

================================================================================
`;

exports[`expr_and_same_line_comments.js format 1`] = `
====================================options=====================================
parsers: ["babel", "flow", "typescript"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
     if (a === 0) doSomething(); // comment A1
else if (a === 1) doSomethingElse(); // comment B1
else if (a === 2) doSomethingElse(); // comment C1

     if (a === 0) doSomething(); /* comment A2 */
else if (a === 1) doSomethingElse(); /* comment B2 */
else if (a === 2) doSomethingElse(); /* comment C2 */

     if (a === 0) expr; // comment A3
else if (a === 1) expr; // comment B3
else if (a === 2) expr; // comment C3

     if (a === 0) expr; /* comment A4 */
else if (a === 1) expr; /* comment B4 */
else if (a === 2) expr; /* comment C4 */

     if (a === 0) looooooooooooooooooooooooooooooooooooooooooooooooooooooooooooong; // comment A5
else if (a === 1) looooooooooooooooooooooooooooooooooooooooooooooooooooooooooooong; // comment B5
else if (a === 2) looooooooooooooooooooooooooooooooooooooooooooooooooooooooooooong; // comment C5

function a() {
  if (a) return; /* comment 6a */
  else return 2;

  if (a) return 1; /* comment 6b */
  else return 2;

  if (a) throw e; /* comment 6d */
  else return 2;

  if (a) var a = 1; /* comment 6e */
  else return 2;

  if (a) if (b); /* comment 6f */
  else return 2;
}

=====================================output=====================================
if (a === 0)
  doSomething(); // comment A1
else if (a === 1)
  doSomethingElse(); // comment B1
else if (a === 2) doSomethingElse(); // comment C1

if (a === 0) doSomething(); /* comment A2 */
else if (a === 1) doSomethingElse(); /* comment B2 */
else if (a === 2) doSomethingElse(); /* comment C2 */

if (a === 0)
  expr; // comment A3
else if (a === 1)
  expr; // comment B3
else if (a === 2) expr; // comment C3

if (a === 0) expr; /* comment A4 */
else if (a === 1) expr; /* comment B4 */
else if (a === 2) expr; /* comment C4 */

if (a === 0)
  looooooooooooooooooooooooooooooooooooooooooooooooooooooooooooong; // comment A5
else if (a === 1)
  looooooooooooooooooooooooooooooooooooooooooooooooooooooooooooong; // comment B5
else if (a === 2)
  looooooooooooooooooooooooooooooooooooooooooooooooooooooooooooong; // comment C5

function a() {
  if (a) return; /* comment 6a */
  else return 2;

  if (a) return 1; /* comment 6b */
  else return 2;

  if (a) throw e; /* comment 6d */
  else return 2;

  if (a) var a = 1; /* comment 6e */
  else return 2;

  if (a)
    if (b /* comment 6f */);
    else return 2;
}

================================================================================
`;

exports[`if_comments.js format 1`] = `
====================================options=====================================
parsers: ["babel", "flow", "typescript"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
async function f1() {
  if (untrackedChoice === 0) /* Cancel */ {
    return null;
  } else if (untrackedChoice === 1) /* Add */ {
    await repository.addAll(Array.from(untrackedChanges.keys()));
    shouldAmend = true;
  } else if (untrackedChoice === 2) /* Allow Untracked */ {
    allowUntracked = true;
  }
}

async function f2() {
  if (untrackedChoice === 0) /* Cancel */
    null;
  else if (untrackedChoice === 1) /* Add */
    shouldAmend = true;
  else if (untrackedChoice === 2) /* Allow Untracked */
    allowUntracked = true;
}

async function f3() {
  if (untrackedChoice === 0) /* Cancel */ // Cancel
    null;
  else if (untrackedChoice === 1) /* Add */ // Add
    shouldAmend = true;
  else if (untrackedChoice === 2) /* Allow Untracked */ // Allow Untracked
    allowUntracked = true;
}

async function f4() {
  if (untrackedChoice === 0)
    /* Cancel */ {
      return null;
    }
  else if (untrackedChoice === 1)
    /* Add */ {
      await repository.addAll(Array.from(untrackedChanges.keys()));
      shouldAmend = true;
    }
  else if (untrackedChoice === 2)
    /* Allow Untracked */ {
      allowUntracked = true;
    }
}

async function f5() {
  if (untrackedChoice === 0) {
    /* Cancel */ return null;
  } else if (untrackedChoice === 1) {
    /* Add */ await repository.addAll(Array.from(untrackedChanges.keys()));
    shouldAmend = true;
  } else if (untrackedChoice === 2) {
    /* Allow Untracked */ allowUntracked = true;
  }
}

=====================================output=====================================
async function f1() {
  if (untrackedChoice === 0) {
    /* Cancel */ return null;
  } else if (untrackedChoice === 1) {
    /* Add */ await repository.addAll(Array.from(untrackedChanges.keys()));
    shouldAmend = true;
  } else if (untrackedChoice === 2) {
    /* Allow Untracked */ allowUntracked = true;
  }
}

async function f2() {
  if (untrackedChoice === 0) /* Cancel */ null;
  else if (untrackedChoice === 1) /* Add */ shouldAmend = true;
  else if (untrackedChoice === 2) /* Allow Untracked */ allowUntracked = true;
}

async function f3() {
  if (untrackedChoice === 0)
    /* Cancel */ // Cancel
    null;
  else if (untrackedChoice === 1)
    /* Add */ // Add
    shouldAmend = true;
  else if (untrackedChoice === 2)
    /* Allow Untracked */ // Allow Untracked
    allowUntracked = true;
}

async function f4() {
  if (untrackedChoice === 0) {
    /* Cancel */ return null;
  } else if (untrackedChoice === 1) {
    /* Add */ await repository.addAll(Array.from(untrackedChanges.keys()));
    shouldAmend = true;
  } else if (untrackedChoice === 2) {
    /* Allow Untracked */ allowUntracked = true;
  }
}

async function f5() {
  if (untrackedChoice === 0) {
    /* Cancel */ return null;
  } else if (untrackedChoice === 1) {
    /* Add */ await repository.addAll(Array.from(untrackedChanges.keys()));
    shouldAmend = true;
  } else if (untrackedChoice === 2) {
    /* Allow Untracked */ allowUntracked = true;
  }
}

================================================================================
`;

exports[`issue-15168.js format 1`] = `
====================================options=====================================
parsers: ["babel", "flow", "typescript"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
for (const division of collidingDivisions) {
	if (!division.properties.canRemove) {
		if (division.canContainSingleParagraph(startParagraph)) continue; // selection starting in r/o div: always OK to delete
		else if (endParagraph !== division.endParagraph && division.canContainSingleParagraph(endParagraph)) continue; // selection ending in r/o div: OK to delete IF it is NOT last paragraph (which would get absorbed)
		else { // selection over whole r/o div OR ending in last paragraph (which would get absorbed) -> FAIL
			console.warn('deleteSelectedTextAndJoinRemainingNodes(): cannot delete because of must-keep division: ' + division.properties.name);
		}
	}
}

=====================================output=====================================
for (const division of collidingDivisions) {
  if (!division.properties.canRemove) {
    if (division.canContainSingleParagraph(startParagraph))
      continue; // selection starting in r/o div: always OK to delete
    else if (
      endParagraph !== division.endParagraph &&
      division.canContainSingleParagraph(endParagraph)
    )
      continue; // selection ending in r/o div: OK to delete IF it is NOT last paragraph (which would get absorbed)
    else {
      // selection over whole r/o div OR ending in last paragraph (which would get absorbed) -> FAIL
      console.warn(
        "deleteSelectedTextAndJoinRemainingNodes(): cannot delete because of must-keep division: " +
          division.properties.name,
      );
    }
  }
}

================================================================================
`;

exports[`non-block.js format 1`] = `
====================================options=====================================
parsers: ["babel", "flow", "typescript"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
if (foo) for (i = 2; i > 0; i--) console.log(i); // foo
else bar();

if (foo) do { console.log(i) } while(i--) // foo
else bar();

=====================================output=====================================
if (foo)
  for (i = 2; i > 0; i--) console.log(i); // foo
else bar();

if (foo)
  do {
    console.log(i);
  } while (i--); // foo
else bar();

================================================================================
`;

exports[`trailing_comment.js format 1`] = `
====================================options=====================================
parsers: ["babel", "flow", "typescript"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
if (code === 92 /* '\\' */) {}
if (code === 92 /* '\\' */ /* '\\' */) {}

if (code === 92) /* '\\' */ {}
if (code === 92) { /* '\\' */ }

if (
  1
  // Comment
) {
  a;
}

=====================================output=====================================
if (code === 92 /* '\\' */) {
}
if (code === 92 /* '\\' */ /* '\\' */) {
}

if (code === 92) {
  /* '\\' */
}
if (code === 92) {
  /* '\\' */
}

if (
  1
  // Comment
) {
  a;
}

================================================================================
`;
