// Jest Snapshot v1, https://jestjs.io/docs/snapshot-testing

exports[`call-expressions.js format 1`] = `
====================================options=====================================
parsers: ["babel", "flow", "typescript"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
Foo(
  a_long_long_long_long_condition ||
  a_long_long_long_long_condition ||
  a_long_long_long_long_condition,
);

Foo(
  a_long_long_long_long_condition ||
  a_long_long_long_long_condition ||
  a_long_long_long_long_condition,
  a_long_long_long_long_condition
);

Bar(
  a_long_long_long_long_condition &&
  a_long_long_long_long_condition &&
  a_long_long_long_long_condition,
);

Bar(
  a_long_long_long_long_condition &&
  a_long_long_long_long_condition &&
  a_long_long_long_long_condition,
  a_long_long_long_long_condition
);


Baz(
  a_long_long_long_long_condition ??
  a_long_long_long_long_condition ??
  a_long_long_long_long_condition,
);

Baz(
  a_long_long_long_long_condition ??
  a_long_long_long_long_condition ??
  a_long_long_long_long_condition,
  a_long_long_long_long_condition
);

(
  a_long_long_long_long_condition ||
  a_long_long_long_long_condition ||
  a_long_long_long_long_condition
).call();

(
  a_long_long_long_long_condition &&
  a_long_long_long_long_condition &&
  a_long_long_long_long_condition
).call();

(
  a_long_long_long_long_condition ??
  a_long_long_long_long_condition ??
  a_long_long_long_long_condition
).call();

=====================================output=====================================
Foo(
  a_long_long_long_long_condition ||
  a_long_long_long_long_condition ||
  a_long_long_long_long_condition,
);

Foo(
  a_long_long_long_long_condition ||
    a_long_long_long_long_condition ||
    a_long_long_long_long_condition,
  a_long_long_long_long_condition,
);

Bar(
  a_long_long_long_long_condition &&
  a_long_long_long_long_condition &&
  a_long_long_long_long_condition,
);

Bar(
  a_long_long_long_long_condition &&
    a_long_long_long_long_condition &&
    a_long_long_long_long_condition,
  a_long_long_long_long_condition,
);

Baz(
  a_long_long_long_long_condition ??
  a_long_long_long_long_condition ??
  a_long_long_long_long_condition,
);

Baz(
  a_long_long_long_long_condition ??
    a_long_long_long_long_condition ??
    a_long_long_long_long_condition,
  a_long_long_long_long_condition,
);

(
  a_long_long_long_long_condition ||
  a_long_long_long_long_condition ||
  a_long_long_long_long_condition
).call();

(
  a_long_long_long_long_condition &&
  a_long_long_long_long_condition &&
  a_long_long_long_long_condition
).call();

(
  a_long_long_long_long_condition ??
  a_long_long_long_long_condition ??
  a_long_long_long_long_condition
).call();

================================================================================
`;

exports[`issue-7024.js format 1`] = `
====================================options=====================================
parsers: ["babel", "flow", "typescript"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
const radioSelectedAttr =
  (isAnyValueSelected &&
    node.getAttribute(radioAttr.toLowerCase()) === radioValue) ||
  ((!isAnyValueSelected && values[a].default === true) || a === 0);

=====================================output=====================================
const radioSelectedAttr =
  (isAnyValueSelected &&
    node.getAttribute(radioAttr.toLowerCase()) === radioValue) ||
  (!isAnyValueSelected && values[a].default === true) ||
  a === 0;

================================================================================
`;

exports[`logical-expression-operators.js format 1`] = `
====================================options=====================================
parsers: ["babel", "flow", "typescript"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
// Same operators do not require parens
(foo && bar) && baz;
foo && (bar && baz);
foo && ((bar && baz) && qux);
foo && (bar && (baz && qux));
foo && (bar && ((baz && qux) && xyz));
foo && (bar && (baz && (qux && xyz)));

(foo || bar) || baz;
foo || (bar || baz);
foo || ((bar || baz) || qux);
foo || (bar || (baz || qux));
foo || (bar || ((baz || qux) || xyz));
foo || (bar || (baz || (qux || xyz)));

(foo ?? bar) ?? baz;
foo ?? (bar ?? baz);
foo ?? ((bar ?? baz) ?? qux);
foo ?? (bar ?? (baz ?? qux));
foo ?? (bar ?? ((baz ?? qux) ?? xyz));
foo ?? (bar ?? (baz ?? (qux ?? xyz)));

// Explicitly parenthesized && and || requires parens
(foo && bar) || baz;
(foo || bar) && baz;

foo && (bar || baz);
foo || (bar && baz);

// Implicitly parenthesized && and || requires parens
foo && bar || baz;
foo || bar && baz;

=====================================output=====================================
// Same operators do not require parens
foo && bar && baz;
foo && bar && baz;
foo && bar && baz && qux;
foo && bar && baz && qux;
foo && bar && baz && qux && xyz;
foo && bar && baz && qux && xyz;

foo || bar || baz;
foo || bar || baz;
foo || bar || baz || qux;
foo || bar || baz || qux;
foo || bar || baz || qux || xyz;
foo || bar || baz || qux || xyz;

foo ?? bar ?? baz;
foo ?? bar ?? baz;
foo ?? bar ?? baz ?? qux;
foo ?? bar ?? baz ?? qux;
foo ?? bar ?? baz ?? qux ?? xyz;
foo ?? bar ?? baz ?? qux ?? xyz;

// Explicitly parenthesized && and || requires parens
(foo && bar) || baz;
(foo || bar) && baz;

foo && (bar || baz);
foo || (bar && baz);

// Implicitly parenthesized && and || requires parens
(foo && bar) || baz;
foo || (bar && baz);

================================================================================
`;

exports[`new-expressions.js format 1`] = `
====================================options=====================================
parsers: ["babel", "flow", "typescript"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
new Foo(
  a_long_long_long_long_condition ||
  a_long_long_long_long_condition ||
  a_long_long_long_long_condition,
);

new Foo(
  a_long_long_long_long_condition ||
  a_long_long_long_long_condition ||
  a_long_long_long_long_condition,
  a_long_long_long_long_condition
);

new Bar(
  a_long_long_long_long_condition &&
  a_long_long_long_long_condition &&
  a_long_long_long_long_condition,
);

new Bar(
  a_long_long_long_long_condition &&
  a_long_long_long_long_condition &&
  a_long_long_long_long_condition,
  a_long_long_long_long_condition
);


new Baz(
  a_long_long_long_long_condition ??
  a_long_long_long_long_condition ??
  a_long_long_long_long_condition,
);

new Baz(
  a_long_long_long_long_condition ??
  a_long_long_long_long_condition ??
  a_long_long_long_long_condition,
  a_long_long_long_long_condition
);

=====================================output=====================================
new Foo(
  a_long_long_long_long_condition ||
  a_long_long_long_long_condition ||
  a_long_long_long_long_condition,
);

new Foo(
  a_long_long_long_long_condition ||
    a_long_long_long_long_condition ||
    a_long_long_long_long_condition,
  a_long_long_long_long_condition,
);

new Bar(
  a_long_long_long_long_condition &&
  a_long_long_long_long_condition &&
  a_long_long_long_long_condition,
);

new Bar(
  a_long_long_long_long_condition &&
    a_long_long_long_long_condition &&
    a_long_long_long_long_condition,
  a_long_long_long_long_condition,
);

new Baz(
  a_long_long_long_long_condition ??
  a_long_long_long_long_condition ??
  a_long_long_long_long_condition,
);

new Baz(
  a_long_long_long_long_condition ??
    a_long_long_long_long_condition ??
    a_long_long_long_long_condition,
  a_long_long_long_long_condition,
);

================================================================================
`;
