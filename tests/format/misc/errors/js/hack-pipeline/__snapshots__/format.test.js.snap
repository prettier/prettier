// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`snippet: #0 [babel] format 1`] = `
"Hack-style pipe body does not contain a topic reference; Hack-style pipes must use topic at least once. (1:39)
> 1 | async function * a() { a |> foo(%) |> (yield y)}
    |                                       ^
Cause: Hack-style pipe body does not contain a topic reference; Hack-style pipes must use topic at least once. (1:38)"
`;

exports[`snippet: #1 [babel] format 1`] = `
"Hack-style pipe body does not contain a topic reference; Hack-style pipes must use topic at least once. (1:39)
> 1 | async function * a() { a |> foo(%) |> (yield)}
    |                                       ^
Cause: Hack-style pipe body does not contain a topic reference; Hack-style pipes must use topic at least once. (1:38)"
`;

exports[`snippet: #2 [babel] format 1`] = `
"Hack-style pipe body does not contain a topic reference; Hack-style pipes must use topic at least once. (1:39)
> 1 | async function * a() { a |> foo(%) |> (await y)}
    |                                       ^
Cause: Hack-style pipe body does not contain a topic reference; Hack-style pipes must use topic at least once. (1:38)"
`;

exports[`snippet: #3 [babel] format 1`] = `
"Hack-style pipe body does not contain a topic reference; Hack-style pipes must use topic at least once. (1:39)
> 1 | async function * a() { a |> foo(%) |> (a?.b)}
    |                                       ^
Cause: Hack-style pipe body does not contain a topic reference; Hack-style pipes must use topic at least once. (1:38)"
`;

exports[`snippet: #4 [babel] format 1`] = `
"Hack-style pipe body does not contain a topic reference; Hack-style pipes must use topic at least once. (1:39)
> 1 | async function * a() { a |> foo(%) |> a?.b}
    |                                       ^
Cause: Hack-style pipe body does not contain a topic reference; Hack-style pipes must use topic at least once. (1:38)"
`;

exports[`snippet: #5 [babel] format 1`] = `
"Hack-style pipe body does not contain a topic reference; Hack-style pipes must use topic at least once. (1:39)
> 1 | async function * a() { a |> foo(%) |> (a.b())}
    |                                       ^
Cause: Hack-style pipe body does not contain a topic reference; Hack-style pipes must use topic at least once. (1:38)"
`;

exports[`snippet: #6 [babel] format 1`] = `
"Hack-style pipe body does not contain a topic reference; Hack-style pipes must use topic at least once. (1:39)
> 1 | async function * a() { a |> foo(%) |> a.b()}
    |                                       ^
Cause: Hack-style pipe body does not contain a topic reference; Hack-style pipes must use topic at least once. (1:38)"
`;

exports[`snippet: #7 [babel] format 1`] = `
"Hack-style pipe body does not contain a topic reference; Hack-style pipes must use topic at least once. (1:39)
> 1 | async function * a() { a |> foo(%) |> (a.b?.())}
    |                                       ^
Cause: Hack-style pipe body does not contain a topic reference; Hack-style pipes must use topic at least once. (1:38)"
`;

exports[`snippet: #8 [babel] format 1`] = `
"Hack-style pipe body does not contain a topic reference; Hack-style pipes must use topic at least once. (1:39)
> 1 | async function * a() { a |> foo(%) |> a.b?.()}
    |                                       ^
Cause: Hack-style pipe body does not contain a topic reference; Hack-style pipes must use topic at least once. (1:38)"
`;

exports[`snippet: #9 [babel] format 1`] = `
"Hack-style pipe body cannot be an unparenthesized yield expression; please wrap it in parentheses. (1:39)
> 1 | async function * a() { a |> foo(%) |> yield}
    |                                       ^
Cause: Hack-style pipe body cannot be an unparenthesized yield expression; please wrap it in parentheses. (1:38)"
`;

exports[`v8intrinsic.js [babel] format 1`] = `
"Topic reference is unbound; it must be inside a pipe body. (1:16)
> 1 | const status = %GetOptimizationStatus(fn) |> console.log(%);
    |                ^
  2 |
Cause: Topic reference is unbound; it must be inside a pipe body. (1:15)"
`;
