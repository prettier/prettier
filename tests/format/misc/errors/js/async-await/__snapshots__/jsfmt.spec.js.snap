// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`snippet: #0 [babel] format 1`] = `
"'await' is not allowed in async function parameters. (2:20)
  1 | async function foo() {
> 2 |   function bar(x = await 2) {}
    |                    ^
  3 | }"
`;

exports[`snippet: #0 [babel] format 2`] = `
"Illegal expression. Wrap left hand side or entire exponentiation in parentheses. (1:23)
> 1 | f = async () => await 5 ** 6;
    |                       ^"
`;

exports[`snippet: #0 [babel] format 3`] = `
"'await' is not allowed in async function parameters. (1:12)
> 1 | async (x = await (2)) => {};
    |            ^"
`;

exports[`snippet: #0 [espree] format 1`] = `
"Cannot use keyword 'await' outside an async function (2:20)
  1 | async function foo() {
> 2 |   function bar(x = await 2) {}
    |                    ^
  3 | }"
`;

exports[`snippet: #0 [espree] format 2`] = `
"Await expression cannot be a default value (1:12)
> 1 | async (x = await (2)) => {};
    |            ^"
`;

exports[`snippet: #0 [flow] format 1`] = `
"Unexpected number, expected the token \`,\` (2:26)
  1 | async function foo() {
> 2 |   function bar(x = await 2) {}
    |                          ^
  3 | }"
`;

exports[`snippet: #0 [meriyah] format 1`] = `
"[2:24]: 'Await' may not be used as an identifier in this context (2:24)
  1 | async function foo() {
> 2 |   function bar(x = await 2) {}
    |                        ^
  3 | }"
`;

exports[`snippet: #0 [meriyah] format 2`] = `
"[1:16]: 'Await' may not be used as an identifier in this context (1:16)
> 1 | async (x = await (2)) => {};
    |                ^"
`;

exports[`snippet: #0 [meriyah] format 3`] = `
"[2:11]: 'Await' may not be used as an identifier in this context (2:11)
  1 | export class C {
> 2 |   p = await 0;
    |           ^
  3 | }"
`;

exports[`snippet: #1 [babel] format 1`] = `
"'await' is not allowed in async function parameters. (1:12)
> 1 | async (x = await 2) => {};
    |            ^"
`;

exports[`snippet: #1 [babel] format 2`] = `
"Illegal expression. Wrap left hand side or entire exponentiation in parentheses. (1:23)
> 1 | f = async () => await -5 ** 6;
    |                       ^"
`;

exports[`snippet: #1 [babel] format 3`] = `
"Unexpected token (1:15)
> 1 | async({ foo33 = 1 });
    |               ^"
`;

exports[`snippet: #1 [espree] format 1`] = `
"Await expression cannot be a default value (1:12)
> 1 | async (x = await 2) => {};
    |            ^"
`;

exports[`snippet: #1 [espree] format 2`] = `
"Shorthand property assignments are valid only in destructuring patterns (1:15)
> 1 | async({ foo33 = 1 });
    |               ^"
`;

exports[`snippet: #1 [flow] format 1`] = `
"Unexpected number, expected the token \`,\` (1:18)
> 1 | async (x = await 2) => {};
    |                  ^"
`;

exports[`snippet: #1 [meriyah] format 1`] = `
"[1:16]: 'Await' may not be used as an identifier in this context (1:16)
> 1 | async (x = await 2) => {};
    |                ^"
`;

exports[`snippet: #1 [meriyah] format 2`] = `
"[1:21]: Invalid shorthand property initializer (1:21)
> 1 | async({ foo33 = 1 });
    |                     ^"
`;

exports[`snippet: #1 [meriyah] format 3`] = `
"[1:5]: 'Await' may not be used as an identifier in this context (1:5)
> 1 | await 0;
    |     ^"
`;

exports[`snippet: #2 [babel] format 1`] = `
"Unexpected token (1:27)
> 1 | f = async (a) => await a! ** 6;
    |                           ^"
`;

exports[`snippet: #2 [espree] format 1`] = `
"Unexpected token ! (1:25)
> 1 | f = async (a) => await a! ** 6;
    |                         ^"
`;

exports[`snippet: #2 [flow] format 1`] = `
"Unexpected token \`!\`, expected the end of an expression statement (\`;\`) (1:25)
> 1 | f = async (a) => await a! ** 6;
    |                         ^"
`;

exports[`snippet: #2 [meriyah] format 1`] = `
"[1:25]: Unexpected token: '!' (1:25)
> 1 | f = async (a) => await a! ** 6;
    |                         ^"
`;

exports[`snippet: #3 [babel] format 1`] = `
"Unexpected token (1:16)
> 1 | f = (a) => +a! ** 6;
    |                ^"
`;

exports[`snippet: #3 [espree] format 1`] = `
"Unexpected token ! (1:14)
> 1 | f = (a) => +a! ** 6;
    |              ^"
`;

exports[`snippet: #3 [flow] format 1`] = `
"Unexpected token \`!\`, expected the end of an expression statement (\`;\`) (1:14)
> 1 | f = (a) => +a! ** 6;
    |              ^"
`;

exports[`snippet: #3 [meriyah] format 1`] = `
"[1:14]: Unexpected token: '!' (1:14)
> 1 | f = (a) => +a! ** 6;
    |              ^"
`;

exports[`snippet: #4 [babel] format 1`] = `
"Unexpected token, expected \\",\\" (1:22)
> 1 | async (a) => (await a!) ** 6;
    |                      ^"
`;

exports[`snippet: #4 [espree] format 1`] = `
"Unexpected token ! (1:22)
> 1 | async (a) => (await a!) ** 6;
    |                      ^"
`;

exports[`snippet: #4 [flow] format 1`] = `
"Unexpected token \`!\`, expected the token \`)\` (1:22)
> 1 | async (a) => (await a!) ** 6;
    |                      ^"
`;

exports[`snippet: #4 [meriyah] format 1`] = `
"[1:22]: Expected ')' (1:22)
> 1 | async (a) => (await a!) ** 6;
    |                      ^"
`;

exports[`snippet: #5 [babel] format 1`] = `
"Illegal expression. Wrap left hand side or entire exponentiation in parentheses. (1:3)
> 1 | (-+5 ** 6);
    |   ^"
`;

exports[`snippet: #5 [espree] format 1`] = `
"Unexpected token ** (1:6)
> 1 | (-+5 ** 6);
    |      ^"
`;

exports[`snippet: #5 [flow] format 1`] = `
"Invalid left-hand side in exponentiation expression (1:2)
> 1 | (-+5 ** 6);
    |  ^^^"
`;

exports[`snippet: #5 [meriyah] format 1`] = `
"[1:7]: Unary expressions as the left operand of an exponentiation expression must be disambiguated with parentheses (1:7)
> 1 | (-+5 ** 6);
    |       ^"
`;
