// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`basic.ts format 1`] = `
====================================options=====================================
parsers: ["typescript"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
// basic
const foo = bar<T>;

=====================================output=====================================
// basic
const foo = bar<T>;

================================================================================
`;

exports[`binary-expr.ts format 1`] = `
====================================options=====================================
parsers: ["typescript"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
new A < B >
C

=====================================output=====================================
new A<B>();
C;

================================================================================
`;

exports[`inferface-asi.ts format 1`] = `
====================================options=====================================
parsers: ["typescript"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
interface Example {
  (a: number): typeof a
      
  <T>(): void
};

=====================================output=====================================
interface Example {
  (a: number): typeof a;

  <T>(): void;
}

================================================================================
`;

exports[`logical-expr.ts format 1`] = `
====================================options=====================================
parsers: ["typescript"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
export class Foo<T> {
  message: string;
}

function sample(error: unknown) {
  if (!(error instanceof Foo<'some-type'> || error instanceof Error) || !error.message) {
    return 'something';
  }
}

=====================================output=====================================
export class Foo<T> {
  message: string;
}

function sample(error: unknown) {
  if (
    !(error instanceof Foo<"some-type"> || error instanceof Error) ||
    !error.message
  ) {
    return "something";
  }
}

================================================================================
`;

exports[`new.ts format 1`] = `
====================================options=====================================
parsers: ["typescript"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
// new
new A<T>;

=====================================output=====================================
// new
new A<T>();

================================================================================
`;

exports[`property-access.ts format 1`] = `
====================================options=====================================
parsers: ["typescript"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
(Array<string>).name;
(fn1<string>).bind(obj);
(fn2<string, number>).bind(obj);
a[(Array<string>)];
a[(Array<string>).name];
(Array<string>).a;
(Array<string>)?.a;
(Array<string>)[a];
(Array<string>)?.[a];
(Array<string>)["a"];
(Array<string>)?.["a"];
(Array<string>)[\`a\`];
(Array<string>)?.[\`a\`];
(Array<string>)[(Array<string>)];

=====================================output=====================================
(Array<string>).name;
(fn1<string>).bind(obj);
(fn2<string, number>).bind(obj);
a[Array<string>];
a[(Array<string>).name];
(Array<string>).a;
(Array<string>)?.a;
(Array<string>)[a];
(Array<string>)?.[a];
(Array<string>)["a"];
(Array<string>)?.["a"];
(Array<string>)[\`a\`];
(Array<string>)?.[\`a\`];
(Array<string>)[Array<string>];

================================================================================
`;

exports[`typeof.ts format 1`] = `
====================================options=====================================
parsers: ["typescript"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
let x: typeof y.z<w>;

=====================================output=====================================
let x: typeof y.z<w>;

================================================================================
`;
