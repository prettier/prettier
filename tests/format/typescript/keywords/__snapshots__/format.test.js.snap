// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`keywords.ts format 1`] = `
====================================options=====================================
parsers: ["typescript"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
module Y4 {
    enum Color { Blue, Red }
}

module YY3 {
    module Module {
        class A { s: string }
    }
}

module YY4 {
    enum Color { Blue, Red }
}

module YYY3 {
    module Module {
        class A { s: string }
    }
}

module YYY4 {
    enum Color { Blue, Red }
}

=====================================output=====================================
module Y4 {
  enum Color {
    Blue,
    Red,
  }
}

module YY3 {
  module Module {
    class A {
      s: string;
    }
  }
}

module YY4 {
  enum Color {
    Blue,
    Red,
  }
}

module YYY3 {
  module Module {
    class A {
      s: string;
    }
  }
}

module YYY4 {
  enum Color {
    Blue,
    Red,
  }
}

================================================================================
`;

exports[`keywords-2.ts format 1`] = `
====================================options=====================================
parsers: ["typescript"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
// https://github.com/babel/babel/pull/12356

class C {
  private *a() {}
  public *b() {}
  static *c() {}
  protected *g() {}
}

class D {
  declare<T>() {}
  readonly<T>() {}
  abstract<T>() {}
  static<T>() {}
  private<T>() {}
  public<T>() {}
  protected<T>() {}
}

class E {
  public
  private() {}
}

class Foo {
  constructor(private, public, static) {
  }
}

class F {
    constructor(public []) {}
}
class G {
    constructor(public {}) {}
}

=====================================output=====================================
// https://github.com/babel/babel/pull/12356

class C {
  private *a() {}
  public *b() {}
  static *c() {}
  protected *g() {}
}

class D {
  declare<T>() {}
  readonly<T>() {}
  abstract<T>() {}
  static<T>() {}
  private<T>() {}
  public<T>() {}
  protected<T>() {}
}

class E {
  public;
  private() {}
}

class Foo {
  constructor(private, public, static) {}
}

class F {
  constructor(public []) {}
}
class G {
  constructor(public {}) {}
}

================================================================================
`;

exports[`module.ts format 1`] = `
====================================options=====================================
parsers: ["typescript"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
module Y3 {
  module Module {
      class A { s: string }
  }

  export enum X { }

  interface x {
      readonly [x: any]: any;
  }
}

=====================================output=====================================
module Y3 {
  module Module {
    class A {
      s: string;
    }
  }

  export enum X {}

  interface x {
    readonly [x: any]: any;
  }
}

================================================================================
`;
