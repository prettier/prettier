// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`comment.ts format 1`] = `
====================================options=====================================
parsers: ["typescript", "flow"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
type A1 = /* 4 */ (
  | A
  | B
)[]

=====================================output=====================================
type A1 = /* 4 */ (A | B)[];

================================================================================
`;

exports[`comments.ts format 1`] = `
====================================options=====================================
parsers: ["typescript", "flow"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
type A1 = a /* 1 */ | b;
type A2 = a | /* 1 */ b;
type A3 = (a /* 1 */) | b;
type A4 = a | (/* 1 */ b);
type A5 = (a) /* 1 */ | b;
type A6 = a | /* 1 */ (b);

type B1 = a /* 1 */ /* 2 */ | b;
type B2 = a /* 1 */ | /* 2 */ b;
type B3 = a | /* 1 */ /* 2 */ b;

=====================================output=====================================
type A1 = a /* 1 */ | b;
type A2 = a | /* 1 */ b;
type A3 = a /* 1 */ | b;
type A4 = a | /* 1 */ b;
type A5 = a /* 1 */ | b;
type A6 = a | /* 1 */ b;

type B1 = a /* 1 */ /* 2 */ | b;
type B2 = a /* 1 */ | /* 2 */ b;
type B3 = a | /* 1 */ /* 2 */ b;

================================================================================
`;

exports[`prettier-ignore.ts format 1`] = `
====================================options=====================================
parsers: ["typescript", "flow"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
export type a =
  // foo
  | foo1&foo2
  // bar
  | bar1&bar2
  // prettier-ignore
  | qux1&qux2;

export type b =
  // foo
  | foo1&foo2
  // bar
  | bar1&bar2
  // prettier-ignore
  | qux1&qux2
  // baz
  | baz1&baz2;

export type c =
  // prettier-ignore
  | foo1&foo2
  // bar
  | bar1&bar2
  // qux
  | qux1&qux2;

=====================================output=====================================
export type a =
  // foo
  | (foo1 & foo2)
  // bar
  | (bar1 & bar2)
  // prettier-ignore
  | (qux1&qux2);

export type b =
  // foo
  | (foo1 & foo2)
  // bar
  | (bar1 & bar2)
  // prettier-ignore
  | (qux1&qux2)
  // baz
  | (baz1 & baz2);

export type c =
  // prettier-ignore
  | (foo1&foo2)
  // bar
  | (bar1 & bar2)
  // qux
  | (qux1 & qux2);

================================================================================
`;

exports[`single-type.ts format 1`] = `
====================================options=====================================
parsers: ["typescript", "flow"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
type A1 =
  | (
    | (
      | (
          | A
          // A comment to force break
          | B
        )
    )
  );
type A2 =
  | (
    | (
          | A
          // A comment to force break
          | B
        )
    | (
          | A
          // A comment to force break
          | B
        )
  );
type A3 =
  | ( | (
          | A
          // A comment to force break
          | B
        ) );
type A4 =
  | ( | ( | (
          | A
          // A comment to force break
          | B
        ) ) );
type A5 =
  | (
    | (
      | { key: string }
      | { key: string }
      | { key: string }
      | { key: string }
    )
    | { key: string }
    | { key: string }
  );
type A6 = | (
  /*1*/ | (
    | (
          | A
          // A comment to force break
          | B
        )
  )
  );

type B1 =
  | (
    & (
      (
          | A
          // A comment to force break
          | B
        )
    )
  );
type B2 =
  | (
    & (
      | (
        & (
          (
          | A
          // A comment to force break
          | B
        )
        )
      )
    )
  );

=====================================output=====================================
type A1 =
  | A
  // A comment to force break
  | B;
type A2 =
  | (
      | A
      // A comment to force break
      | B
    )
  | (
      | A
      // A comment to force break
      | B
    );
type A3 =
  | A
  // A comment to force break
  | B;
type A4 =
  | A
  // A comment to force break
  | B;
type A5 =
  | ({ key: string } | { key: string } | { key: string } | { key: string })
  | { key: string }
  | { key: string };
type A6 = /*1*/
  | A
  // A comment to force break
  | B;

type B1 =
  | A
  // A comment to force break
  | B;
type B2 =
  | A
  // A comment to force break
  | B;

================================================================================
`;

exports[`within-tuple.ts format 1`] = `
====================================options=====================================
parsers: ["typescript", "flow"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
type A = [AAAAAAAAAAAAAAAAAAAAAA | BBBBBBBBBBBBBBBBBBBBBB | CCCCCCCCCCCCCCCCCCCCCC | DDDDDDDDDDDDDDDDDDDDDD]

type B = [
  | AAAAAAAAAAAAAAAAAAAAAA
  | BBBBBBBBBBBBBBBBBBBBBB
  | CCCCCCCCCCCCCCCCCCCCCC
  | DDDDDDDDDDDDDDDDDDDDDD
]

type B1 = [
  (
    | AAAAAAAAAAAAAAAAAAAAAA
    | BBBBBBBBBBBBBBBBBBBBBB
    | CCCCCCCCCCCCCCCCCCCCCC
    | DDDDDDDDDDDDDDDDDDDDDD
  )
]

type C = [
  | [AAAAAAAAAAAAAAAAAAAAAA | BBBBBBBBBBBBBBBBBBBBBB | CCCCCCCCCCCCCCCCCCCCCC | DDDDDDDDDDDDDDDDDDDDDD]
  | [AAAAAAAAAAAAAAAAAAAAAA | BBBBBBBBBBBBBBBBBBBBBB | CCCCCCCCCCCCCCCCCCCCCC | DDDDDDDDDDDDDDDDDDDDDD]
]

type D = [
  (AAAAAAAAAAAAAAAAAAAAAA | BBBBBBBBBBBBBBBBBBBBBB | CCCCCCCCCCCCCCCCCCCCCC | DDDDDDDDDDDDDDDDDDDDDD),
  (AAAAAAAAAAAAAAAAAAAAAA | BBBBBBBBBBBBBBBBBBBBBB | CCCCCCCCCCCCCCCCCCCCCC | DDDDDDDDDDDDDDDDDDDDDD)
]

type D1 = [
  (
    | AAAAAAAAAAAAAAAAAAAAAA
    | BBBBBBBBBBBBBBBBBBBBBB
    | CCCCCCCCCCCCCCCCCCCCCC
    | DDDDDDDDDDDDDDDDDDDDDD
  ),
  (
    | AAAAAAAAAAAAAAAAAAAAAA
    | BBBBBBBBBBBBBBBBBBBBBB
    | CCCCCCCCCCCCCCCCCCCCCC
    | DDDDDDDDDDDDDDDDDDDDDD
  )
]

type D2 = [
  | AAAAAAAAAAAAAAAAAAAAAA
  | BBBBBBBBBBBBBBBBBBBBBB
  | CCCCCCCCCCCCCCCCCCCCCC
  | DDDDDDDDDDDDDDDDDDDDDD,
  | AAAAAAAAAAAAAAAAAAAAAA
  | BBBBBBBBBBBBBBBBBBBBBB
  | CCCCCCCCCCCCCCCCCCCCCC
  | DDDDDDDDDDDDDDDDDDDDDD
]

type E = [ AA | BB, AA | BB ]

type F = [
  | AAAAAAAAAAAAAAAAAAAAAA
  | BBBBBBBBBBBBBBBBBBBBBB
  | CCCCCCCCCCCCCCCCCCCCCC
  | DDDDDDDDDDDDDDDDDDDDDD,
  | AAAAAAAAAAAAAAAAAAAAAA
  | BBBBBBBBBBBBBBBBBBBBBB
]

=====================================output=====================================
type A = [
  | AAAAAAAAAAAAAAAAAAAAAA
  | BBBBBBBBBBBBBBBBBBBBBB
  | CCCCCCCCCCCCCCCCCCCCCC
  | DDDDDDDDDDDDDDDDDDDDDD,
];

type B = [
  | AAAAAAAAAAAAAAAAAAAAAA
  | BBBBBBBBBBBBBBBBBBBBBB
  | CCCCCCCCCCCCCCCCCCCCCC
  | DDDDDDDDDDDDDDDDDDDDDD,
];

type B1 = [
  | AAAAAAAAAAAAAAAAAAAAAA
  | BBBBBBBBBBBBBBBBBBBBBB
  | CCCCCCCCCCCCCCCCCCCCCC
  | DDDDDDDDDDDDDDDDDDDDDD,
];

type C = [
  | [
      | AAAAAAAAAAAAAAAAAAAAAA
      | BBBBBBBBBBBBBBBBBBBBBB
      | CCCCCCCCCCCCCCCCCCCCCC
      | DDDDDDDDDDDDDDDDDDDDDD,
    ]
  | [
      | AAAAAAAAAAAAAAAAAAAAAA
      | BBBBBBBBBBBBBBBBBBBBBB
      | CCCCCCCCCCCCCCCCCCCCCC
      | DDDDDDDDDDDDDDDDDDDDDD,
    ],
];

type D = [
  (
    | AAAAAAAAAAAAAAAAAAAAAA
    | BBBBBBBBBBBBBBBBBBBBBB
    | CCCCCCCCCCCCCCCCCCCCCC
    | DDDDDDDDDDDDDDDDDDDDDD
  ),
  (
    | AAAAAAAAAAAAAAAAAAAAAA
    | BBBBBBBBBBBBBBBBBBBBBB
    | CCCCCCCCCCCCCCCCCCCCCC
    | DDDDDDDDDDDDDDDDDDDDDD
  ),
];

type D1 = [
  (
    | AAAAAAAAAAAAAAAAAAAAAA
    | BBBBBBBBBBBBBBBBBBBBBB
    | CCCCCCCCCCCCCCCCCCCCCC
    | DDDDDDDDDDDDDDDDDDDDDD
  ),
  (
    | AAAAAAAAAAAAAAAAAAAAAA
    | BBBBBBBBBBBBBBBBBBBBBB
    | CCCCCCCCCCCCCCCCCCCCCC
    | DDDDDDDDDDDDDDDDDDDDDD
  ),
];

type D2 = [
  (
    | AAAAAAAAAAAAAAAAAAAAAA
    | BBBBBBBBBBBBBBBBBBBBBB
    | CCCCCCCCCCCCCCCCCCCCCC
    | DDDDDDDDDDDDDDDDDDDDDD
  ),
  (
    | AAAAAAAAAAAAAAAAAAAAAA
    | BBBBBBBBBBBBBBBBBBBBBB
    | CCCCCCCCCCCCCCCCCCCCCC
    | DDDDDDDDDDDDDDDDDDDDDD
  ),
];

type E = [AA | BB, AA | BB];

type F = [
  (
    | AAAAAAAAAAAAAAAAAAAAAA
    | BBBBBBBBBBBBBBBBBBBBBB
    | CCCCCCCCCCCCCCCCCCCCCC
    | DDDDDDDDDDDDDDDDDDDDDD
  ),
  AAAAAAAAAAAAAAAAAAAAAA | BBBBBBBBBBBBBBBBBBBBBB,
];

================================================================================
`;
