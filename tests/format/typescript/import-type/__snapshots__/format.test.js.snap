// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`import-type.ts - {"singleQuote":true} format 1`] = `
====================================options=====================================
parsers: ["typescript"]
printWidth: 80
singleQuote: true
                                                                                | printWidth
=====================================input======================================
// ref: https://github.com/Microsoft/TypeScript/pull/22592

export const x: import("./foo") = { x: 0, y: 0 };

export let y: import("./foo2").Bar.I = { a: "", b: 0 };

export let shim: typeof import("./foo2") = {
    Bar: Bar2
};

export interface Foo {
    bar: import('immutable').Map<string, int>;
}

type X = A<import("B").C<any>>;

=====================================output=====================================
// ref: https://github.com/Microsoft/TypeScript/pull/22592

export const x: import('./foo') = { x: 0, y: 0 };

export let y: import('./foo2').Bar.I = { a: '', b: 0 };

export let shim: typeof import('./foo2') = {
  Bar: Bar2,
};

export interface Foo {
  bar: import('immutable').Map<string, int>;
}

type X = A<import('B').C<any>>;

================================================================================
`;

exports[`import-type.ts format 1`] = `
====================================options=====================================
parsers: ["typescript"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
// ref: https://github.com/Microsoft/TypeScript/pull/22592

export const x: import("./foo") = { x: 0, y: 0 };

export let y: import("./foo2").Bar.I = { a: "", b: 0 };

export let shim: typeof import("./foo2") = {
    Bar: Bar2
};

export interface Foo {
    bar: import('immutable').Map<string, int>;
}

type X = A<import("B").C<any>>;

=====================================output=====================================
// ref: https://github.com/Microsoft/TypeScript/pull/22592

export const x: import("./foo") = { x: 0, y: 0 };

export let y: import("./foo2").Bar.I = { a: "", b: 0 };

export let shim: typeof import("./foo2") = {
  Bar: Bar2,
};

export interface Foo {
  bar: import("immutable").Map<string, int>;
}

type X = A<import("B").C<any>>;

================================================================================
`;
