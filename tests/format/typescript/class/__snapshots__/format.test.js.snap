// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`abstract-method.ts format 1`] = `
====================================options=====================================
parsers: ["typescript"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
class Foo {
  abstract foo();
}

abstract class Bar {
  method() {
    return class {
      abstract m();
    }
  }
}

=====================================output=====================================
class Foo {
  abstract foo();
}

abstract class Bar {
  method() {
    return class {
      abstract m();
    };
  }
}

================================================================================
`;

exports[`constructor.ts format 1`] = `
====================================options=====================================
parsers: ["typescript"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
class C {constructor(override a: number) {}}
class D {constructor(private a: number) {}}
class E {constructor(protected a: number) {}}
class F {constructor(public a: number) {}}
class G {constructor(readonly a: number) {}}

class A {
    'constructor': typeof A
    static Foo() {
        return new A()
    }
}

class B {
  constructor<>() {}
}

=====================================output=====================================
class C {
  constructor(override a: number) {}
}
class D {
  constructor(private a: number) {}
}
class E {
  constructor(protected a: number) {}
}
class F {
  constructor(public a: number) {}
}
class G {
  constructor(readonly a: number) {}
}

class A {
  "constructor": typeof A;
  static Foo() {
    return new A();
  }
}

class B {
  constructor<>() {}
}

================================================================================
`;

exports[`declare-field.ts format 1`] = `
====================================options=====================================
parsers: ["typescript"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
class A {
  declare private readonly name: string;
   private declare readonly name2: string;
}

=====================================output=====================================
class A {
  declare private readonly name: string;
  declare private readonly name2: string;
}

================================================================================
`;

exports[`declare-readonly-field-initializer.ts format 1`] = `
====================================options=====================================
parsers: ["typescript"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
class A {
  declare readonly bar = "test";
  declare readonly foo = 1;
  declare readonly baz = a.b;
}

=====================================output=====================================
class A {
  declare readonly bar = "test";
  declare readonly foo = 1;
  declare readonly baz = a.b;
}

================================================================================
`;

exports[`declare-readonly-field-initializer-w-annotation.ts format 1`] = `
====================================options=====================================
parsers: ["typescript"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
class A {
  declare readonly bar: string = "test";
  declare baz: string = "test";
}

=====================================output=====================================
class A {
  declare readonly bar: string = "test";
  declare baz: string = "test";
}

================================================================================
`;

exports[`dunder.ts format 1`] = `
====================================options=====================================
parsers: ["typescript"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
class F<__T> {}

=====================================output=====================================
class F<__T> {}

================================================================================
`;

exports[`empty-method-body.ts format 1`] = `
====================================options=====================================
parsers: ["typescript"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
// #9324

class foo1 {
  bar() /* bat */;
}

// #9367
class Test {
  foo (/* 2 */) /* 3 */;
}

=====================================output=====================================
// #9324

class foo1 {
  bar /* bat */();
}

// #9367
class Test {
  foo /* 3 */(/* 2 */);
}

================================================================================
`;

exports[`extends_implements.ts format 1`] = `
====================================options=====================================
parsers: ["typescript"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
class Class extends AbstractClass implements Interface1, Interface2, Interface3, Interface4 {}

class ExtendsAbstractClassAndImplementsInterfaces1 extends AbstractClass
  implements Interface1, Interface2, Interface3, Interface4 {}

class ExtendsAbstractClassAndImplementsInterfaces2
  extends AAAAAAAAAAAAAAbstractClass
  implements Interface1, Interface2, Interface3, Interface4 {}

class ExtendsAbstractClassAndImplementsInterfaces3
  extends AAAAAAAAAAAAAAbstractClass
  implements
    Interface1,
    Interface2,
    Interface3,
    Interface4,
    Interface5,
    Interface6,
    Interface7,
    Interface8 {}

class ExtendsAbstractClassAndImplementsInterfaces4
  extends AAAAAAAAAAAAAAbstractClass<Type1, Type2, Type3, Type4, Type5, Type6, Type7> {}

class ExtendsAbstractClassAndImplementsInterfaces5
  extends AAAAAAAAAAAAAAbstractClass<Type1, Type2, Type3, Type4, Type5, Type6, Type7>
  implements
    Interface1,
    Interface2,
    Interface3,
    Interface4,
    Interface5,
    Interface6,
    Interface7,
    Interface8 {}

class ImplementsInterfaceAndExtendsAbstractClass1<Foo>
  extends FOOOOOOOOOOOOOOOOO
  implements FOOOOOOOOOOOOOOOOO, BARRRRRRRRRR {}

class Foo<FOOOOOOOOOOOOOOOOOOOOOOOOOOO, FOOOOOOOOOOOOOOOOOOOOOOOOOOO> implements Foo {}

class ImplementsInterfaceAndExtendsAbstractClass2<
    TypeArgumentNumberOne,
    TypeArgumentNumberTwo,
    TypeArgumentNumberThree
  >
   extends FOOOOOOOOOOOOOOOOOO implements BaseInterface {}

class ImplementsInterfaceClass1<
    TypeArgumentNumberOne,
    TypeArgumentNumberTwo,
    TypeArgumentNumberThree
  >
    implements BaseInterface {}

class ImplementsInterfaceClassWithComments1<
    TypeArgumentNumberOne,
    TypeArgumentNumberTwo,
    TypeArgumentNumberThree
  > // comments
    implements BaseInterface {}

=====================================output=====================================
class Class
  extends AbstractClass
  implements Interface1, Interface2, Interface3, Interface4 {}

class ExtendsAbstractClassAndImplementsInterfaces1
  extends AbstractClass
  implements Interface1, Interface2, Interface3, Interface4 {}

class ExtendsAbstractClassAndImplementsInterfaces2
  extends AAAAAAAAAAAAAAbstractClass
  implements Interface1, Interface2, Interface3, Interface4 {}

class ExtendsAbstractClassAndImplementsInterfaces3
  extends AAAAAAAAAAAAAAbstractClass
  implements
    Interface1,
    Interface2,
    Interface3,
    Interface4,
    Interface5,
    Interface6,
    Interface7,
    Interface8 {}

class ExtendsAbstractClassAndImplementsInterfaces4 extends AAAAAAAAAAAAAAbstractClass<
  Type1,
  Type2,
  Type3,
  Type4,
  Type5,
  Type6,
  Type7
> {}

class ExtendsAbstractClassAndImplementsInterfaces5
  extends AAAAAAAAAAAAAAbstractClass<
    Type1,
    Type2,
    Type3,
    Type4,
    Type5,
    Type6,
    Type7
  >
  implements
    Interface1,
    Interface2,
    Interface3,
    Interface4,
    Interface5,
    Interface6,
    Interface7,
    Interface8 {}

class ImplementsInterfaceAndExtendsAbstractClass1<Foo>
  extends FOOOOOOOOOOOOOOOOO
  implements FOOOOOOOOOOOOOOOOO, BARRRRRRRRRR {}

class Foo<FOOOOOOOOOOOOOOOOOOOOOOOOOOO, FOOOOOOOOOOOOOOOOOOOOOOOOOOO>
  implements Foo {}

class ImplementsInterfaceAndExtendsAbstractClass2<
    TypeArgumentNumberOne,
    TypeArgumentNumberTwo,
    TypeArgumentNumberThree,
  >
  extends FOOOOOOOOOOOOOOOOOO
  implements BaseInterface {}

class ImplementsInterfaceClass1<
  TypeArgumentNumberOne,
  TypeArgumentNumberTwo,
  TypeArgumentNumberThree,
> implements BaseInterface {}

class ImplementsInterfaceClassWithComments1<
    TypeArgumentNumberOne,
    TypeArgumentNumberTwo,
    TypeArgumentNumberThree,
  > // comments
  implements BaseInterface {}

================================================================================
`;

exports[`generics.ts format 1`] = `
====================================options=====================================
parsers: ["typescript"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
class A<T> implements Map<T> {}

interface AudioBufferList {
	mBuffers: interop.Reference<any /*AudioBuffer*/>;
}

=====================================output=====================================
class A<T> implements Map<T> {}

interface AudioBufferList {
  mBuffers: interop.Reference<any /*AudioBuffer*/>;
}

================================================================================
`;

exports[`issue-16723.ts format 1`] = `
====================================options=====================================
parsers: ["typescript"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
export class JiraCreatePixFraudDetectionGateway
  implements Pick<IssuePixFraudDetectionGateway, "createPixFraudDetectionIssue">
{
  constructor(private readonly logger: Logger) {
    this.logger = logger.child({
      context: JiraCreatePixFraudDetectionGateway.name,
    });
  }
}

=====================================output=====================================
export class JiraCreatePixFraudDetectionGateway
  implements Pick<IssuePixFraudDetectionGateway, "createPixFraudDetectionIssue">
{
  constructor(private readonly logger: Logger) {
    this.logger = logger.child({
      context: JiraCreatePixFraudDetectionGateway.name,
    });
  }
}

================================================================================
`;

exports[`methods.ts format 1`] = `
====================================options=====================================
parsers: ["typescript"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
class X {
    optionalMethod?() {}
}

interface Iterable<T> {
  [Symbol.iterator](): Iterator<T>;
}

export class Check {
  private static property = 'test';
}

=====================================output=====================================
class X {
  optionalMethod?() {}
}

interface Iterable<T> {
  [Symbol.iterator](): Iterator<T>;
}

export class Check {
  private static property = "test";
}

================================================================================
`;

exports[`optional.ts format 1`] = `
====================================options=====================================
parsers: ["typescript"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
class X {
  private foo? = undefined;
  "a-prop"?: boolean;
}

class A {
  protected [s]?() {}
}

=====================================output=====================================
class X {
  private foo? = undefined;
  "a-prop"?: boolean;
}

class A {
  protected [s]?() {}
}

================================================================================
`;

exports[`parameter-properties.ts format 1`] = `
====================================options=====================================
parsers: ["typescript"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
class MyClass {
  constructor(protected x: number, private y: string) {
  }
}

[
  class {
    "constructor"(protected x: number, private y: string) {
    }
  },
]

class Mixed {
  constructor(public a: number, b: unknown) {
  }
}

class OneParameterProperty {
  constructor(public foobar: boolean) {
  }
}

=====================================output=====================================
class MyClass {
  constructor(
    protected x: number,
    private y: string,
  ) {}
}

[
  class {
    constructor(
      protected x: number,
      private y: string,
    ) {}
  },
];

class Mixed {
  constructor(
    public a: number,
    b: unknown,
  ) {}
}

class OneParameterProperty {
  constructor(public foobar: boolean) {}
}

================================================================================
`;

exports[`quoted-property.ts format 1`] = `
====================================options=====================================
parsers: ["typescript"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
class User {
    "username": string;
}

=====================================output=====================================
class User {
  "username": string;
}

================================================================================
`;

exports[`standard_private_fields.ts format 1`] = `
====================================options=====================================
parsers: ["typescript"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
class Square {
    #sideLength: number;
    readonly #area: number;
    #unit?: string;

    constructor(sideLength: number, unit?: string) {
        this.#sideLength = sideLength;
        this.#area = this.#sideLength ** 2;
        if (unit) {
          this.#unit = unit;
        }
    }

    equals(other: any) {
        return this.#sideLength === other.#sideLength;
    }

    getArea() {
      return this.#area + (this.#unit ?? 'px') + '²';
    }
}

=====================================output=====================================
class Square {
  #sideLength: number;
  readonly #area: number;
  #unit?: string;

  constructor(sideLength: number, unit?: string) {
    this.#sideLength = sideLength;
    this.#area = this.#sideLength ** 2;
    if (unit) {
      this.#unit = unit;
    }
  }

  equals(other: any) {
    return this.#sideLength === other.#sideLength;
  }

  getArea() {
    return this.#area + (this.#unit ?? "px") + "²";
  }
}

================================================================================
`;
