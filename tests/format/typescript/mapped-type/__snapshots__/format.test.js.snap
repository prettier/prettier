// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`intersection.ts format 1`] = `
====================================options=====================================
parsers: ["typescript"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
type Example = {
  [A in B]: T;
} & {
  [A in B]: T;
};

=====================================output=====================================
type Example = {
  [A in B]: T;
} & {
  [A in B]: T;
};

================================================================================
`;

exports[`issue-11098.ts format 1`] = `
====================================options=====================================
parsers: ["typescript"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
type Type = {
  // comment
  readonly [T in number];
};

type Type = {
  // comment1
  // comment2
  readonly [T in number];
};

type Type = {
  // comment
  +readonly [T in number];
};

type Type = {
  // comment
  -readonly [T in number];
};

type Type = {
  // comment
  +    readonly [T in number];
};

type Type = {
  // comment
  +readonly     [T in number];
};

type Type = {
  // comment
  readonly       [T in number];
};

type Type = {
  // comment
  [T in number];
};

type Type = {
  readonly
  // comment
  [T in number];
};

type Type = {
  readonly // foo
  /* bar */ [T in number];
};

=====================================output=====================================
type Type = {
  // comment
  readonly [T in number];
};

type Type = {
  // comment1
  // comment2
  readonly [T in number];
};

type Type = {
  // comment
  +readonly [T in number];
};

type Type = {
  // comment
  -readonly [T in number];
};

type Type = {
  // comment
  +readonly [T in number];
};

type Type = {
  // comment
  +readonly [T in number];
};

type Type = {
  // comment
  readonly [T in number];
};

type Type = {
  // comment
  [T in number];
};

type Type = {
  // comment
  readonly [T in number];
};

type Type = {
  // foo
  /* bar */ readonly [T in number];
};

================================================================================
`;

exports[`mapped-type.ts format 1`] = `
====================================options=====================================
parsers: ["typescript"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
type Keys = 'option1' | 'option2';
type A = { [K in Keys] };
type B = { [K in Keys]+? };

=====================================output=====================================
type Keys = "option1" | "option2";
type A = { [K in Keys] };
type B = { [K in Keys]+? };

================================================================================
`;
