// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`arrow_regression.ts - {"semi":false} format 1`] = `
====================================options=====================================
parsers: ["typescript"]
printWidth: 80
semi: false
                                                                                | printWidth
=====================================input======================================
const bar = (...varargs:any[]) => {
  console.log(varargs);
};

const foo = (x:string):void => (
  bar(
    x,
    () => {},
    () => {}
  )
);

app.get("/", (req, res): void => {
  res.send("Hello world");
});

=====================================output=====================================
const bar = (...varargs: any[]) => {
  console.log(varargs)
}

const foo = (x: string): void =>
  bar(
    x,
    () => {},
    () => {}
  )

app.get("/", (req, res): void => {
  res.send("Hello world")
})

================================================================================
`;

exports[`arrow_regression.ts format 1`] = `
====================================options=====================================
parsers: ["typescript"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
const bar = (...varargs:any[]) => {
  console.log(varargs);
};

const foo = (x:string):void => (
  bar(
    x,
    () => {},
    () => {}
  )
);

app.get("/", (req, res): void => {
  res.send("Hello world");
});

=====================================output=====================================
const bar = (...varargs: any[]) => {
  console.log(varargs);
};

const foo = (x: string): void =>
  bar(
    x,
    () => {},
    () => {}
  );

app.get("/", (req, res): void => {
  res.send("Hello world");
});

================================================================================
`;

exports[`comments.ts - {"semi":false} format 1`] = `
====================================options=====================================
parsers: ["typescript"]
printWidth: 80
semi: false
                                                                                | printWidth
=====================================input======================================
const fn1 = () => {
  return;
} /* foo */;

const fn2 = () => {
  return;
}

// foo
;

=====================================output=====================================
const fn1 = () => {
  return
} /* foo */

const fn2 = () => {
  return
}

// foo

================================================================================
`;

exports[`comments.ts format 1`] = `
====================================options=====================================
parsers: ["typescript"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
const fn1 = () => {
  return;
} /* foo */;

const fn2 = () => {
  return;
}

// foo
;

=====================================output=====================================
const fn1 = () => {
  return;
}; /* foo */

const fn2 = () => {
  return;
};

// foo

================================================================================
`;

exports[`issue-6107-curry.ts - {"semi":false} format 1`] = `
====================================options=====================================
parsers: ["typescript"]
printWidth: 80
semi: false
                                                                                | printWidth
=====================================input======================================
const getIconEngagementTypeFrom = (engagementTypes: Array<EngagementType>) =>
  iconEngagementType => engagementTypes.includes(iconEngagementType);

const getIconEngagementTypeFrom2 =
  (
    engagementTypes: Array<EngagementType>,
    secondArg: Something
  ) =>
  iconEngagementType =>
  engagementTypes.includes(iconEngagementType);

const getIconEngagementTypeFrom2 =
  (
    engagementTypes: Array<EngagementType>,
    secondArg: Something,
    thirArg: SomethingElse
  ) =>
  iconEngagementType =>
  engagementTypes.includes(iconEngagementType);

=====================================output=====================================
const getIconEngagementTypeFrom =
  (engagementTypes: Array<EngagementType>) => (iconEngagementType) =>
    engagementTypes.includes(iconEngagementType)

const getIconEngagementTypeFrom2 =
  (engagementTypes: Array<EngagementType>, secondArg: Something) =>
  (iconEngagementType) =>
    engagementTypes.includes(iconEngagementType)

const getIconEngagementTypeFrom2 =
  (
    engagementTypes: Array<EngagementType>,
    secondArg: Something,
    thirArg: SomethingElse
  ) =>
  (iconEngagementType) =>
    engagementTypes.includes(iconEngagementType)

================================================================================
`;

exports[`issue-6107-curry.ts format 1`] = `
====================================options=====================================
parsers: ["typescript"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
const getIconEngagementTypeFrom = (engagementTypes: Array<EngagementType>) =>
  iconEngagementType => engagementTypes.includes(iconEngagementType);

const getIconEngagementTypeFrom2 =
  (
    engagementTypes: Array<EngagementType>,
    secondArg: Something
  ) =>
  iconEngagementType =>
  engagementTypes.includes(iconEngagementType);

const getIconEngagementTypeFrom2 =
  (
    engagementTypes: Array<EngagementType>,
    secondArg: Something,
    thirArg: SomethingElse
  ) =>
  iconEngagementType =>
  engagementTypes.includes(iconEngagementType);

=====================================output=====================================
const getIconEngagementTypeFrom =
  (engagementTypes: Array<EngagementType>) => (iconEngagementType) =>
    engagementTypes.includes(iconEngagementType);

const getIconEngagementTypeFrom2 =
  (engagementTypes: Array<EngagementType>, secondArg: Something) =>
  (iconEngagementType) =>
    engagementTypes.includes(iconEngagementType);

const getIconEngagementTypeFrom2 =
  (
    engagementTypes: Array<EngagementType>,
    secondArg: Something,
    thirArg: SomethingElse
  ) =>
  (iconEngagementType) =>
    engagementTypes.includes(iconEngagementType);

================================================================================
`;
