// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`arrow-functions.tsx - {"trailingComma":"all"} format 1`] = `
====================================options=====================================
parsers: ["typescript"]
printWidth: 80
trailingComma: "all"
                                                                                | printWidth
=====================================input======================================
const f1 = <T,>() => 1;
const f2 = <
  Tttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttt,
>() => 1;

=====================================output=====================================
const f1 = <T,>() => 1;
const f2 = <
  Tttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttt,
>() => 1;

================================================================================
`;

exports[`arrow-functions.tsx - {"trailingComma":"es5"} format 1`] = `
====================================options=====================================
parsers: ["typescript"]
printWidth: 80
trailingComma: "es5"
                                                                                | printWidth
=====================================input======================================
const f1 = <T,>() => 1;
const f2 = <
  Tttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttt,
>() => 1;

=====================================output=====================================
const f1 = <T,>() => 1;
const f2 = <
  Tttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttt,
>() => 1;

================================================================================
`;

exports[`arrow-functions.tsx - {"trailingComma":"none"} format 1`] = `
====================================options=====================================
parsers: ["typescript"]
printWidth: 80
trailingComma: "none"
                                                                                | printWidth
=====================================input======================================
const f1 = <T,>() => 1;
const f2 = <
  Tttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttt,
>() => 1;

=====================================output=====================================
const f1 = <T,>() => 1;
const f2 = <
  Tttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttt,
>() => 1;

================================================================================
`;

exports[`trailing.ts - {"trailingComma":"all"} format 1`] = `
====================================options=====================================
parsers: ["typescript"]
printWidth: 80
trailingComma: "all"
                                                                                | printWidth
=====================================input======================================
export class BaseSingleLevelProfileTargeting<
	T extends ValidSingleLevelProfileNode,
> {
}

enum Enum {
	x = 1,
	y = 2,
}

const {
  longKeySoThisWillGoOnMultipleLines,
  longKeySoThisWillGoOnMultipleLines2,
  longKeySoThisWillGoOnMultipleLines3,
  ...rest,
} = something;

=====================================output=====================================
export class BaseSingleLevelProfileTargeting<
  T extends ValidSingleLevelProfileNode,
> {}

enum Enum {
  x = 1,
  y = 2,
}

const {
  longKeySoThisWillGoOnMultipleLines,
  longKeySoThisWillGoOnMultipleLines2,
  longKeySoThisWillGoOnMultipleLines3,
  ...rest
} = something;

================================================================================
`;

exports[`trailing.ts - {"trailingComma":"es5"} format 1`] = `
====================================options=====================================
parsers: ["typescript"]
printWidth: 80
trailingComma: "es5"
                                                                                | printWidth
=====================================input======================================
export class BaseSingleLevelProfileTargeting<
	T extends ValidSingleLevelProfileNode,
> {
}

enum Enum {
	x = 1,
	y = 2,
}

const {
  longKeySoThisWillGoOnMultipleLines,
  longKeySoThisWillGoOnMultipleLines2,
  longKeySoThisWillGoOnMultipleLines3,
  ...rest,
} = something;

=====================================output=====================================
export class BaseSingleLevelProfileTargeting<
  T extends ValidSingleLevelProfileNode
> {}

enum Enum {
  x = 1,
  y = 2,
}

const {
  longKeySoThisWillGoOnMultipleLines,
  longKeySoThisWillGoOnMultipleLines2,
  longKeySoThisWillGoOnMultipleLines3,
  ...rest
} = something;

================================================================================
`;

exports[`trailing.ts - {"trailingComma":"none"} format 1`] = `
====================================options=====================================
parsers: ["typescript"]
printWidth: 80
trailingComma: "none"
                                                                                | printWidth
=====================================input======================================
export class BaseSingleLevelProfileTargeting<
	T extends ValidSingleLevelProfileNode,
> {
}

enum Enum {
	x = 1,
	y = 2,
}

const {
  longKeySoThisWillGoOnMultipleLines,
  longKeySoThisWillGoOnMultipleLines2,
  longKeySoThisWillGoOnMultipleLines3,
  ...rest,
} = something;

=====================================output=====================================
export class BaseSingleLevelProfileTargeting<
  T extends ValidSingleLevelProfileNode
> {}

enum Enum {
  x = 1,
  y = 2
}

const {
  longKeySoThisWillGoOnMultipleLines,
  longKeySoThisWillGoOnMultipleLines2,
  longKeySoThisWillGoOnMultipleLines3,
  ...rest
} = something;

================================================================================
`;

exports[`type-arguments.ts - {"trailingComma":"all"} format 1`] = `
====================================options=====================================
parsers: ["typescript"]
printWidth: 80
trailingComma: "all"
                                                                                | printWidth
=====================================input======================================
var bar: Bar<
  AAAAAAA,
  BBBBBBB,
  CCCCCCC,
  DDDDDDD,
  EEEEEEE,
  FFFFFFF,
  GGGGGGG,
  HHHHHHH
>;

const baz = new Array<
  FooFooFooFooFooFooFooFooFooFooFooFooFooFooFoo,
  BarBarBarBarBarBarBarBarBarBarBarBarBarBarBar
>();

=====================================output=====================================
var bar: Bar<
  AAAAAAA,
  BBBBBBB,
  CCCCCCC,
  DDDDDDD,
  EEEEEEE,
  FFFFFFF,
  GGGGGGG,
  HHHHHHH
>;

const baz = new Array<
  FooFooFooFooFooFooFooFooFooFooFooFooFooFooFoo,
  BarBarBarBarBarBarBarBarBarBarBarBarBarBarBar
>();

================================================================================
`;

exports[`type-arguments.ts - {"trailingComma":"es5"} format 1`] = `
====================================options=====================================
parsers: ["typescript"]
printWidth: 80
trailingComma: "es5"
                                                                                | printWidth
=====================================input======================================
var bar: Bar<
  AAAAAAA,
  BBBBBBB,
  CCCCCCC,
  DDDDDDD,
  EEEEEEE,
  FFFFFFF,
  GGGGGGG,
  HHHHHHH
>;

const baz = new Array<
  FooFooFooFooFooFooFooFooFooFooFooFooFooFooFoo,
  BarBarBarBarBarBarBarBarBarBarBarBarBarBarBar
>();

=====================================output=====================================
var bar: Bar<
  AAAAAAA,
  BBBBBBB,
  CCCCCCC,
  DDDDDDD,
  EEEEEEE,
  FFFFFFF,
  GGGGGGG,
  HHHHHHH
>;

const baz = new Array<
  FooFooFooFooFooFooFooFooFooFooFooFooFooFooFoo,
  BarBarBarBarBarBarBarBarBarBarBarBarBarBarBar
>();

================================================================================
`;

exports[`type-arguments.ts - {"trailingComma":"none"} format 1`] = `
====================================options=====================================
parsers: ["typescript"]
printWidth: 80
trailingComma: "none"
                                                                                | printWidth
=====================================input======================================
var bar: Bar<
  AAAAAAA,
  BBBBBBB,
  CCCCCCC,
  DDDDDDD,
  EEEEEEE,
  FFFFFFF,
  GGGGGGG,
  HHHHHHH
>;

const baz = new Array<
  FooFooFooFooFooFooFooFooFooFooFooFooFooFooFoo,
  BarBarBarBarBarBarBarBarBarBarBarBarBarBarBar
>();

=====================================output=====================================
var bar: Bar<
  AAAAAAA,
  BBBBBBB,
  CCCCCCC,
  DDDDDDD,
  EEEEEEE,
  FFFFFFF,
  GGGGGGG,
  HHHHHHH
>;

const baz = new Array<
  FooFooFooFooFooFooFooFooFooFooFooFooFooFooFoo,
  BarBarBarBarBarBarBarBarBarBarBarBarBarBarBar
>();

================================================================================
`;

exports[`type-parameters-vs-arguments.ts - {"trailingComma":"all"} format 1`] = `
====================================options=====================================
parsers: ["typescript"]
printWidth: 80
trailingComma: "all"
                                                                                | printWidth
=====================================input======================================
class FooClass<
	A,
	B,
	C,
> {
	a: A;
	b: B;
	c: C;
}

const instance = new FooClass<
	boolean,
	number,
	string, // [ts] Trailing comma not allowed.
	>();

=====================================output=====================================
class FooClass<A, B, C> {
  a: A;
  b: B;
  c: C;
}

const instance = new FooClass<
  boolean,
  number,
  string // [ts] Trailing comma not allowed.
>();

================================================================================
`;

exports[`type-parameters-vs-arguments.ts - {"trailingComma":"es5"} format 1`] = `
====================================options=====================================
parsers: ["typescript"]
printWidth: 80
trailingComma: "es5"
                                                                                | printWidth
=====================================input======================================
class FooClass<
	A,
	B,
	C,
> {
	a: A;
	b: B;
	c: C;
}

const instance = new FooClass<
	boolean,
	number,
	string, // [ts] Trailing comma not allowed.
	>();

=====================================output=====================================
class FooClass<A, B, C> {
  a: A;
  b: B;
  c: C;
}

const instance = new FooClass<
  boolean,
  number,
  string // [ts] Trailing comma not allowed.
>();

================================================================================
`;

exports[`type-parameters-vs-arguments.ts - {"trailingComma":"none"} format 1`] = `
====================================options=====================================
parsers: ["typescript"]
printWidth: 80
trailingComma: "none"
                                                                                | printWidth
=====================================input======================================
class FooClass<
	A,
	B,
	C,
> {
	a: A;
	b: B;
	c: C;
}

const instance = new FooClass<
	boolean,
	number,
	string, // [ts] Trailing comma not allowed.
	>();

=====================================output=====================================
class FooClass<A, B, C> {
  a: A;
  b: B;
  c: C;
}

const instance = new FooClass<
  boolean,
  number,
  string // [ts] Trailing comma not allowed.
>();

================================================================================
`;
