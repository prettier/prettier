// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`argument-expansion.ts - {"semi":false} format 1`] = `
====================================options=====================================
parsers: ["typescript"]
printWidth: 80
semi: false
                                                                                | printWidth
=====================================input======================================
const bar1 = [1,2,3].reduce((carry, value) => {
  return [...carry, value];
}, ([] satisfies unknown) satisfies number[]);

const bar2 = [1,2,3].reduce((carry, value) => {
  return [...carry, value];
}, ([1, 2, 3] satisfies unknown) satisfies number[]);

const bar3 = [1,2,3].reduce((carry, value) => {
  return {...carry, [value]: true};
}, ({} satisfies unknown) satisfies {[key: number]: boolean});

const bar4 = [1,2,3].reduce((carry, value) => {
  return {...carry, [value]: true};
}, ({1: true} satisfies unknown) satisfies {[key: number]: boolean});

const bar5 = [1,2,3].reduce((carry, value) => {
  return [...carry, value];
}, [] satisfies foo);

=====================================output=====================================
const bar1 = [1, 2, 3].reduce(
  (carry, value) => {
    return [...carry, value]
  },
  [] satisfies unknown satisfies number[],
)

const bar2 = [1, 2, 3].reduce(
  (carry, value) => {
    return [...carry, value]
  },
  [1, 2, 3] satisfies unknown satisfies number[],
)

const bar3 = [1, 2, 3].reduce(
  (carry, value) => {
    return { ...carry, [value]: true }
  },
  {} satisfies unknown satisfies { [key: number]: boolean },
)

const bar4 = [1, 2, 3].reduce(
  (carry, value) => {
    return { ...carry, [value]: true }
  },
  { 1: true } satisfies unknown satisfies { [key: number]: boolean },
)

const bar5 = [1, 2, 3].reduce((carry, value) => {
  return [...carry, value]
}, [] satisfies foo)

================================================================================
`;

exports[`argument-expansion.ts format 1`] = `
====================================options=====================================
parsers: ["typescript"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
const bar1 = [1,2,3].reduce((carry, value) => {
  return [...carry, value];
}, ([] satisfies unknown) satisfies number[]);

const bar2 = [1,2,3].reduce((carry, value) => {
  return [...carry, value];
}, ([1, 2, 3] satisfies unknown) satisfies number[]);

const bar3 = [1,2,3].reduce((carry, value) => {
  return {...carry, [value]: true};
}, ({} satisfies unknown) satisfies {[key: number]: boolean});

const bar4 = [1,2,3].reduce((carry, value) => {
  return {...carry, [value]: true};
}, ({1: true} satisfies unknown) satisfies {[key: number]: boolean});

const bar5 = [1,2,3].reduce((carry, value) => {
  return [...carry, value];
}, [] satisfies foo);

=====================================output=====================================
const bar1 = [1, 2, 3].reduce(
  (carry, value) => {
    return [...carry, value];
  },
  [] satisfies unknown satisfies number[],
);

const bar2 = [1, 2, 3].reduce(
  (carry, value) => {
    return [...carry, value];
  },
  [1, 2, 3] satisfies unknown satisfies number[],
);

const bar3 = [1, 2, 3].reduce(
  (carry, value) => {
    return { ...carry, [value]: true };
  },
  {} satisfies unknown satisfies { [key: number]: boolean },
);

const bar4 = [1, 2, 3].reduce(
  (carry, value) => {
    return { ...carry, [value]: true };
  },
  { 1: true } satisfies unknown satisfies { [key: number]: boolean },
);

const bar5 = [1, 2, 3].reduce((carry, value) => {
  return [...carry, value];
}, [] satisfies foo);

================================================================================
`;

exports[`assignment.ts - {"semi":false} format 1`] = `
====================================options=====================================
parsers: ["typescript"]
printWidth: 80
semi: false
                                                                                | printWidth
=====================================input======================================
const extraRendererAttrs = ((attrs.rendererAttrs &&
  this.utils.safeParseJsonString(attrs.rendererAttrs)) ||
  Object.create(null)) satisfies FieldService.RendererAttributes;

const annotate = (angular.injector satisfies any).$$annotate satisfies (
  fn: Function
) => string[];
  
const originalPrototype = originalConstructor.prototype satisfies TComponent & InjectionTarget,
  propertyToServiceName = originalPrototype._inject;

this.previewPlayerHandle = (setInterval(async () => {
  if (this.previewIsPlaying) {
    await this.fetchNextPreviews();
    this.currentPreviewIndex++;
  }
}, this.refreshDelay) satisfies unknown) satisfies number;

this.intervalID = (setInterval(() => {
  self.step();
}, 30) satisfies unknown) satisfies number;

=====================================output=====================================
const extraRendererAttrs = ((attrs.rendererAttrs &&
  this.utils.safeParseJsonString(attrs.rendererAttrs)) ||
  Object.create(null)) satisfies FieldService.RendererAttributes

const annotate = (angular.injector satisfies any).$$annotate satisfies (
  fn: Function,
) => string[]

const originalPrototype = originalConstructor.prototype satisfies TComponent &
    InjectionTarget,
  propertyToServiceName = originalPrototype._inject

this.previewPlayerHandle = setInterval(async () => {
  if (this.previewIsPlaying) {
    await this.fetchNextPreviews()
    this.currentPreviewIndex++
  }
}, this.refreshDelay) satisfies unknown satisfies number

this.intervalID = setInterval(() => {
  self.step()
}, 30) satisfies unknown satisfies number

================================================================================
`;

exports[`assignment.ts format 1`] = `
====================================options=====================================
parsers: ["typescript"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
const extraRendererAttrs = ((attrs.rendererAttrs &&
  this.utils.safeParseJsonString(attrs.rendererAttrs)) ||
  Object.create(null)) satisfies FieldService.RendererAttributes;

const annotate = (angular.injector satisfies any).$$annotate satisfies (
  fn: Function
) => string[];
  
const originalPrototype = originalConstructor.prototype satisfies TComponent & InjectionTarget,
  propertyToServiceName = originalPrototype._inject;

this.previewPlayerHandle = (setInterval(async () => {
  if (this.previewIsPlaying) {
    await this.fetchNextPreviews();
    this.currentPreviewIndex++;
  }
}, this.refreshDelay) satisfies unknown) satisfies number;

this.intervalID = (setInterval(() => {
  self.step();
}, 30) satisfies unknown) satisfies number;

=====================================output=====================================
const extraRendererAttrs = ((attrs.rendererAttrs &&
  this.utils.safeParseJsonString(attrs.rendererAttrs)) ||
  Object.create(null)) satisfies FieldService.RendererAttributes;

const annotate = (angular.injector satisfies any).$$annotate satisfies (
  fn: Function,
) => string[];

const originalPrototype = originalConstructor.prototype satisfies TComponent &
    InjectionTarget,
  propertyToServiceName = originalPrototype._inject;

this.previewPlayerHandle = setInterval(async () => {
  if (this.previewIsPlaying) {
    await this.fetchNextPreviews();
    this.currentPreviewIndex++;
  }
}, this.refreshDelay) satisfies unknown satisfies number;

this.intervalID = setInterval(() => {
  self.step();
}, 30) satisfies unknown satisfies number;

================================================================================
`;

exports[`basic.ts - {"semi":false} format 1`] = `
====================================options=====================================
parsers: ["typescript"]
printWidth: 80
semi: false
                                                                                | printWidth
=====================================input======================================
const t1 = { a: 1 } satisfies I1;
const t2 = { a: 1, b: 1 } satisfies I1;
const t3 = { } satisfies I1;
const t4: T1 = { a: "a" } satisfies T1;
const t5 = (m => m.substring(0)) satisfies T2;
const t6 = [1, 2] satisfies [number, number];
let t7 = { a: 'test' } satisfies A;
let t8 = { a: 'test', b: 'test' } satisfies A;

const p = {
  isEven: n => n % 2 === 0,
  isOdd: n => n % 2 === 1
} satisfies Predicates;

let obj: { f(s: string): void } & Record<string, unknown> = {
    f(s) { },
    g(s) { }
} satisfies { g(s: string): void } & Record<string, unknown>;

({ f(x) { } }) satisfies { f(s: string): void };

const car = {
    start() { },
    move(d) {
        // d should be number
    },
    stop() { }
} satisfies Movable & Record<string, unknown>;

var v = undefined satisfies 1;

=====================================output=====================================
const t1 = { a: 1 } satisfies I1
const t2 = { a: 1, b: 1 } satisfies I1
const t3 = {} satisfies I1
const t4: T1 = { a: "a" } satisfies T1
const t5 = ((m) => m.substring(0)) satisfies T2
const t6 = [1, 2] satisfies [number, number]
let t7 = { a: "test" } satisfies A
let t8 = { a: "test", b: "test" } satisfies A

const p = {
  isEven: (n) => n % 2 === 0,
  isOdd: (n) => n % 2 === 1,
} satisfies Predicates

let obj: { f(s: string): void } & Record<string, unknown> = {
  f(s) {},
  g(s) {},
} satisfies { g(s: string): void } & Record<string, unknown>

;({ f(x) {} }) satisfies { f(s: string): void }

const car = {
  start() {},
  move(d) {
    // d should be number
  },
  stop() {},
} satisfies Movable & Record<string, unknown>

var v = undefined satisfies 1

================================================================================
`;

exports[`basic.ts format 1`] = `
====================================options=====================================
parsers: ["typescript"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
const t1 = { a: 1 } satisfies I1;
const t2 = { a: 1, b: 1 } satisfies I1;
const t3 = { } satisfies I1;
const t4: T1 = { a: "a" } satisfies T1;
const t5 = (m => m.substring(0)) satisfies T2;
const t6 = [1, 2] satisfies [number, number];
let t7 = { a: 'test' } satisfies A;
let t8 = { a: 'test', b: 'test' } satisfies A;

const p = {
  isEven: n => n % 2 === 0,
  isOdd: n => n % 2 === 1
} satisfies Predicates;

let obj: { f(s: string): void } & Record<string, unknown> = {
    f(s) { },
    g(s) { }
} satisfies { g(s: string): void } & Record<string, unknown>;

({ f(x) { } }) satisfies { f(s: string): void };

const car = {
    start() { },
    move(d) {
        // d should be number
    },
    stop() { }
} satisfies Movable & Record<string, unknown>;

var v = undefined satisfies 1;

=====================================output=====================================
const t1 = { a: 1 } satisfies I1;
const t2 = { a: 1, b: 1 } satisfies I1;
const t3 = {} satisfies I1;
const t4: T1 = { a: "a" } satisfies T1;
const t5 = ((m) => m.substring(0)) satisfies T2;
const t6 = [1, 2] satisfies [number, number];
let t7 = { a: "test" } satisfies A;
let t8 = { a: "test", b: "test" } satisfies A;

const p = {
  isEven: (n) => n % 2 === 0,
  isOdd: (n) => n % 2 === 1,
} satisfies Predicates;

let obj: { f(s: string): void } & Record<string, unknown> = {
  f(s) {},
  g(s) {},
} satisfies { g(s: string): void } & Record<string, unknown>;

({ f(x) {} }) satisfies { f(s: string): void };

const car = {
  start() {},
  move(d) {
    // d should be number
  },
  stop() {},
} satisfies Movable & Record<string, unknown>;

var v = undefined satisfies 1;

================================================================================
`;

exports[`comments.ts - {"semi":false} format 1`] = `
====================================options=====================================
parsers: ["typescript"]
printWidth: 80
semi: false
                                                                                | printWidth
=====================================input======================================
const t2 = {} /* comment */ satisfies {};
const t3 = {} satisfies /* comment */ {};
const t4 = {} /* comment1 */ satisfies /* comment2 */ {};

=====================================output=====================================
const t2 = {} /* comment */ satisfies {}
const t3 = {} satisfies /* comment */ {}
const t4 = {} /* comment1 */ satisfies /* comment2 */ {}

================================================================================
`;

exports[`comments.ts format 1`] = `
====================================options=====================================
parsers: ["typescript"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
const t2 = {} /* comment */ satisfies {};
const t3 = {} satisfies /* comment */ {};
const t4 = {} /* comment1 */ satisfies /* comment2 */ {};

=====================================output=====================================
const t2 = {} /* comment */ satisfies {};
const t3 = {} satisfies /* comment */ {};
const t4 = {} /* comment1 */ satisfies /* comment2 */ {};

================================================================================
`;

exports[`comments-unstable.ts - {"semi":false} format 1`] = `
====================================options=====================================
parsers: ["typescript"]
printWidth: 80
semi: false
                                                                                | printWidth
=====================================input======================================
const t1 = {
    prop1: 1,
    prop2: 2,
    prop3: 3
} satisfies
// Comment
Record<string, number>;

=====================================output=====================================
const t1 = {
  prop1: 1,
  prop2: 2,
  prop3: 3,
} satisfies // Comment
Record<string, number>

================================================================================
`;

exports[`comments-unstable.ts format 1`] = `
====================================options=====================================
parsers: ["typescript"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
const t1 = {
    prop1: 1,
    prop2: 2,
    prop3: 3
} satisfies
// Comment
Record<string, number>;

=====================================output=====================================
const t1 = {
  prop1: 1,
  prop2: 2,
  prop3: 3,
} satisfies // Comment
Record<string, number>;

================================================================================
`;

exports[`export-default-as.ts - {"semi":false} format 1`] = `
====================================options=====================================
parsers: ["typescript"]
printWidth: 80
semi: false
                                                                                | printWidth
=====================================input======================================
export default (function log() {} satisfies typeof console.log)

=====================================output=====================================
export default (function log() {} satisfies typeof console.log)

================================================================================
`;

exports[`export-default-as.ts format 1`] = `
====================================options=====================================
parsers: ["typescript"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
export default (function log() {} satisfies typeof console.log)

=====================================output=====================================
export default (function log() {} satisfies typeof console.log);

================================================================================
`;

exports[`expression-statement.ts - {"semi":false} format 1`] = `
====================================options=====================================
parsers: ["typescript"]
printWidth: 80
semi: false
                                                                                | printWidth
=====================================input======================================

let type: 'foo' | 'bar' = 'foo';

// demonstrating how "satisfies" expression can be practically used as expression statement.
const _ = () => {
switch (type) {
  case 'foo':
    return 1;
  case 'bar':
    return 2;
  default:
    // exhaustiveness check idiom
    (type) satisfies never;
    throw new Error('unreachable');
}
}

function needParens() {
(let) satisfies unknown;
(interface) satisfies unknown;
(module) satisfies unknown;
(using) satisfies unknown;
(yield) satisfies unknown;
(await) satisfies unknown;
}

function noNeedParens() {
async satisfies unknown;
satisfies satisfies unknown;
as satisfies unknown;

abc satisfies unknown; // not a keyword
}

function satisfiesChain() {
satisfies satisfies satisfies satisfies satisfies;
(type) satisfies never satisfies unknown;
}

=====================================output=====================================
let type: "foo" | "bar" = "foo"

// demonstrating how "satisfies" expression can be practically used as expression statement.
const _ = () => {
  switch (type) {
    case "foo":
      return 1
    case "bar":
      return 2
    default:
      // exhaustiveness check idiom
      ;(type) satisfies never
      throw new Error("unreachable")
  }
}

function needParens() {
  ;(let) satisfies unknown
  ;(interface) satisfies unknown
  ;(module) satisfies unknown
  ;(using) satisfies unknown
  ;(yield) satisfies unknown
  ;(await) satisfies unknown
}

function noNeedParens() {
  async satisfies unknown
  satisfies satisfies unknown
  as satisfies unknown

  abc satisfies unknown // not a keyword
}

function satisfiesChain() {
  satisfies satisfies satisfies satisfies satisfies
  ;(type) satisfies never satisfies unknown
}

================================================================================
`;

exports[`expression-statement.ts format 1`] = `
====================================options=====================================
parsers: ["typescript"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================

let type: 'foo' | 'bar' = 'foo';

// demonstrating how "satisfies" expression can be practically used as expression statement.
const _ = () => {
switch (type) {
  case 'foo':
    return 1;
  case 'bar':
    return 2;
  default:
    // exhaustiveness check idiom
    (type) satisfies never;
    throw new Error('unreachable');
}
}

function needParens() {
(let) satisfies unknown;
(interface) satisfies unknown;
(module) satisfies unknown;
(using) satisfies unknown;
(yield) satisfies unknown;
(await) satisfies unknown;
}

function noNeedParens() {
async satisfies unknown;
satisfies satisfies unknown;
as satisfies unknown;

abc satisfies unknown; // not a keyword
}

function satisfiesChain() {
satisfies satisfies satisfies satisfies satisfies;
(type) satisfies never satisfies unknown;
}

=====================================output=====================================
let type: "foo" | "bar" = "foo";

// demonstrating how "satisfies" expression can be practically used as expression statement.
const _ = () => {
  switch (type) {
    case "foo":
      return 1;
    case "bar":
      return 2;
    default:
      // exhaustiveness check idiom
      (type) satisfies never;
      throw new Error("unreachable");
  }
};

function needParens() {
  (let) satisfies unknown;
  (interface) satisfies unknown;
  (module) satisfies unknown;
  (using) satisfies unknown;
  (yield) satisfies unknown;
  (await) satisfies unknown;
}

function noNeedParens() {
  async satisfies unknown;
  satisfies satisfies unknown;
  as satisfies unknown;

  abc satisfies unknown; // not a keyword
}

function satisfiesChain() {
  satisfies satisfies satisfies satisfies satisfies;
  (type) satisfies never satisfies unknown;
}

================================================================================
`;

exports[`gt-lt.ts - {"semi":false} format 1`] = `
====================================options=====================================
parsers: ["typescript"]
printWidth: 80
semi: false
                                                                                | printWidth
=====================================input======================================
x satisfies boolean <= y; // (x satisfies boolean) <= y;
x satisfies boolean ?? y; // (x satisfies boolean) ?? y;

=====================================output=====================================
;(x satisfies boolean) <= y // (x satisfies boolean) <= y;
;(x satisfies boolean) ?? y // (x satisfies boolean) ?? y;

================================================================================
`;

exports[`gt-lt.ts format 1`] = `
====================================options=====================================
parsers: ["typescript"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
x satisfies boolean <= y; // (x satisfies boolean) <= y;
x satisfies boolean ?? y; // (x satisfies boolean) ?? y;

=====================================output=====================================
(x satisfies boolean) <= y; // (x satisfies boolean) <= y;
(x satisfies boolean) ?? y; // (x satisfies boolean) ?? y;

================================================================================
`;

exports[`hug-args.ts - {"semi":false} format 1`] = `
====================================options=====================================
parsers: ["typescript"]
printWidth: 80
semi: false
                                                                                | printWidth
=====================================input======================================
window.postMessage(
    {
      context: item.context,
      topic: item.topic
    } satisfies IActionMessage
  );

=====================================output=====================================
window.postMessage({
  context: item.context,
  topic: item.topic,
} satisfies IActionMessage)

================================================================================
`;

exports[`hug-args.ts format 1`] = `
====================================options=====================================
parsers: ["typescript"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
window.postMessage(
    {
      context: item.context,
      topic: item.topic
    } satisfies IActionMessage
  );

=====================================output=====================================
window.postMessage({
  context: item.context,
  topic: item.topic,
} satisfies IActionMessage);

================================================================================
`;

exports[`lhs.ts - {"semi":false} format 1`] = `
====================================options=====================================
parsers: ["typescript"]
printWidth: 80
semi: false
                                                                                | printWidth
=====================================input======================================
(a satisfies number) = 42;
({ a: (b satisfies any) = 2000 } = x);
(this.selectorElem satisfies any) = this.multiselectWidget = this.initialValues = undefined;
(this.configuration satisfies any) = (this.editor satisfies any) = (this
  .editorBody satisfies any) = undefined;

=====================================output=====================================
;(a satisfies number) = 42
;({ a: (b satisfies any) = 2000 } = x)
;(this.selectorElem satisfies any) =
  this.multiselectWidget =
  this.initialValues =
    undefined
;(this.configuration satisfies any) =
  (this.editor satisfies any) =
  (this.editorBody satisfies any) =
    undefined

================================================================================
`;

exports[`lhs.ts format 1`] = `
====================================options=====================================
parsers: ["typescript"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
(a satisfies number) = 42;
({ a: (b satisfies any) = 2000 } = x);
(this.selectorElem satisfies any) = this.multiselectWidget = this.initialValues = undefined;
(this.configuration satisfies any) = (this.editor satisfies any) = (this
  .editorBody satisfies any) = undefined;

=====================================output=====================================
(a satisfies number) = 42;
({ a: (b satisfies any) = 2000 } = x);
(this.selectorElem satisfies any) =
  this.multiselectWidget =
  this.initialValues =
    undefined;
(this.configuration satisfies any) =
  (this.editor satisfies any) =
  (this.editorBody satisfies any) =
    undefined;

================================================================================
`;

exports[`nested-await-and-satisfies.ts - {"semi":false} format 1`] = `
====================================options=====================================
parsers: ["typescript"]
printWidth: 80
semi: false
                                                                                | printWidth
=====================================input======================================
const getAccountCount = async () =>
  (await
    ((await (
      await focusOnSection(BOOKMARKED_PROJECTS_SECTION_NAME)
    ).findItem("My bookmarks")) satisfies TreeItem
  ).getChildren()
  ).length

=====================================output=====================================
const getAccountCount = async () =>
  (
    await (
      (await (
        await focusOnSection(BOOKMARKED_PROJECTS_SECTION_NAME)
      ).findItem("My bookmarks")) satisfies TreeItem
    ).getChildren()
  ).length

================================================================================
`;

exports[`nested-await-and-satisfies.ts format 1`] = `
====================================options=====================================
parsers: ["typescript"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
const getAccountCount = async () =>
  (await
    ((await (
      await focusOnSection(BOOKMARKED_PROJECTS_SECTION_NAME)
    ).findItem("My bookmarks")) satisfies TreeItem
  ).getChildren()
  ).length

=====================================output=====================================
const getAccountCount = async () =>
  (
    await (
      (await (
        await focusOnSection(BOOKMARKED_PROJECTS_SECTION_NAME)
      ).findItem("My bookmarks")) satisfies TreeItem
    ).getChildren()
  ).length;

================================================================================
`;

exports[`non-null.ts - {"semi":false} format 1`] = `
====================================options=====================================
parsers: ["typescript"]
printWidth: 80
semi: false
                                                                                | printWidth
=====================================input======================================
// the 2nd line needs ASI protection
const el = ReactDOM.findDOMNode(ref)
;(el satisfies HTMLElement)!.style.cursor = 'pointer'

=====================================output=====================================
// the 2nd line needs ASI protection
const el = ReactDOM.findDOMNode(ref)
;(el satisfies HTMLElement)!.style.cursor = "pointer"

================================================================================
`;

exports[`non-null.ts format 1`] = `
====================================options=====================================
parsers: ["typescript"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
// the 2nd line needs ASI protection
const el = ReactDOM.findDOMNode(ref)
;(el satisfies HTMLElement)!.style.cursor = 'pointer'

=====================================output=====================================
// the 2nd line needs ASI protection
const el = ReactDOM.findDOMNode(ref);
(el satisfies HTMLElement)!.style.cursor = "pointer";

================================================================================
`;

exports[`satisfies.ts - {"semi":false} format 1`] = `
====================================options=====================================
parsers: ["typescript"]
printWidth: 80
semi: false
                                                                                | printWidth
=====================================input======================================
({}) satisfies {};
({}) satisfies X;
() => ({}) satisfies X;
this.isTabActionBar((e.target || e.srcElement) satisfies HTMLElement);

'current' in (props.pagination satisfies Object);
('current' in props.pagination) satisfies Object;
start + (yearSelectTotal satisfies number);
(start + yearSelectTotal) satisfies number;
scrollTop > (visibilityHeight satisfies number);
(scrollTop > visibilityHeight) satisfies number;
(bValue satisfies boolean) ? 0 : -1;

async function g1() {
  const test = (await 'foo') satisfies number;
}

var x = (v => v) satisfies (x: number) => string;

foo satisfies unknown satisfies Bar;
foo satisfies unknown as Bar;
foo as unknown satisfies Bar;

=====================================output=====================================
;({}) satisfies {}
;({}) satisfies X
;() => ({}) satisfies X
this.isTabActionBar((e.target || e.srcElement) satisfies HTMLElement)

"current" in (props.pagination satisfies Object)
;("current" in props.pagination) satisfies Object
start + (yearSelectTotal satisfies number)
;(start + yearSelectTotal) satisfies number
scrollTop > (visibilityHeight satisfies number)
;(scrollTop > visibilityHeight) satisfies number
;(bValue satisfies boolean) ? 0 : -1

async function g1() {
  const test = (await "foo") satisfies number
}

var x = ((v) => v) satisfies (x: number) => string

foo satisfies unknown satisfies Bar
foo satisfies unknown as Bar
foo as unknown satisfies Bar

================================================================================
`;

exports[`satisfies.ts format 1`] = `
====================================options=====================================
parsers: ["typescript"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
({}) satisfies {};
({}) satisfies X;
() => ({}) satisfies X;
this.isTabActionBar((e.target || e.srcElement) satisfies HTMLElement);

'current' in (props.pagination satisfies Object);
('current' in props.pagination) satisfies Object;
start + (yearSelectTotal satisfies number);
(start + yearSelectTotal) satisfies number;
scrollTop > (visibilityHeight satisfies number);
(scrollTop > visibilityHeight) satisfies number;
(bValue satisfies boolean) ? 0 : -1;

async function g1() {
  const test = (await 'foo') satisfies number;
}

var x = (v => v) satisfies (x: number) => string;

foo satisfies unknown satisfies Bar;
foo satisfies unknown as Bar;
foo as unknown satisfies Bar;

=====================================output=====================================
({}) satisfies {};
({}) satisfies X;
() => ({}) satisfies X;
this.isTabActionBar((e.target || e.srcElement) satisfies HTMLElement);

"current" in (props.pagination satisfies Object);
("current" in props.pagination) satisfies Object;
start + (yearSelectTotal satisfies number);
(start + yearSelectTotal) satisfies number;
scrollTop > (visibilityHeight satisfies number);
(scrollTop > visibilityHeight) satisfies number;
(bValue satisfies boolean) ? 0 : -1;

async function g1() {
  const test = (await "foo") satisfies number;
}

var x = ((v) => v) satisfies (x: number) => string;

foo satisfies unknown satisfies Bar;
foo satisfies unknown as Bar;
foo as unknown satisfies Bar;

================================================================================
`;

exports[`template-literal.ts - {"semi":false} format 1`] = `
====================================options=====================================
parsers: ["typescript"]
printWidth: 80
semi: false
                                                                                | printWidth
=====================================input======================================
const a = \`\${(foo + bar) satisfies baz}\`;
const b = \`\${(veryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryLongFoo + bar) satisfies baz}\`;
const b = \`\${(foo + veryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryLongBar) satisfies baz}\`;
const b = \`\${(foo + bar) satisfies veryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryLongBaz}\`;
const b = \`\${(veryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryLongFoo + veryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryLongBar) satisfies veryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryLongBaz}\`;

=====================================output=====================================
const a = \`\${(foo + bar) satisfies baz}\`
const b = \`\${(veryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryLongFoo + bar) satisfies baz}\`
const b = \`\${(foo + veryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryLongBar) satisfies baz}\`
const b = \`\${(foo + bar) satisfies veryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryLongBaz}\`
const b = \`\${(veryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryLongFoo + veryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryLongBar) satisfies veryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryLongBaz}\`

================================================================================
`;

exports[`template-literal.ts format 1`] = `
====================================options=====================================
parsers: ["typescript"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
const a = \`\${(foo + bar) satisfies baz}\`;
const b = \`\${(veryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryLongFoo + bar) satisfies baz}\`;
const b = \`\${(foo + veryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryLongBar) satisfies baz}\`;
const b = \`\${(foo + bar) satisfies veryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryLongBaz}\`;
const b = \`\${(veryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryLongFoo + veryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryLongBar) satisfies veryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryLongBaz}\`;

=====================================output=====================================
const a = \`\${(foo + bar) satisfies baz}\`;
const b = \`\${(veryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryLongFoo + bar) satisfies baz}\`;
const b = \`\${(foo + veryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryLongBar) satisfies baz}\`;
const b = \`\${(foo + bar) satisfies veryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryLongBaz}\`;
const b = \`\${(veryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryLongFoo + veryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryLongBar) satisfies veryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryLongBaz}\`;

================================================================================
`;

exports[`ternary.ts - {"semi":false} format 1`] = `
====================================options=====================================
parsers: ["typescript"]
printWidth: 80
semi: false
                                                                                | printWidth
=====================================input======================================
foo = (coooooooooooooooooooooooooooooooooooooooooooooooooooond
    ? baaaaaaaaaaaaaaaaaaaaar
    : baaaaaaaaaaaaaaaaaaaaaz) satisfies Fooooooooooo;

foo = (condition ? firstValue : secondValue) satisfies SomeType;

const foo = (coooooooooooooooooooooooooooooooooooooooooooooooooooond
  ? baaaaaaaaaaaaaaaaaaaaar
  : baaaaaaaaaaaaaaaaaaaaaz) satisfies Fooooooooooo;

function foo() {
  return (coooooooooooooooooooooooooooooooooooooooooooooooooooond
    ? baaaaaaaaaaaaaaaaaaaaar
    : baaaaaaaaaaaaaaaaaaaaaz) satisfies Fooooooooooo;
}

function foo() {
  throw (coooooooooooooooooooooooooooooooooooooooooooooooooooond
      ? baaaaaaaaaaaaaaaaaaaaar
      : baaaaaaaaaaaaaaaaaaaaaz) satisfies Fooooooooooo;
}

function foo() {
  void ((coooooooooooooooooooooooooooooooooooooooooooooooooooond
    ? baaaaaaaaaaaaaaaaaaaaar
    : baaaaaaaaaaaaaaaaaaaaaz) satisfies Fooooooooooo);
}

bifornCringerMoshedPerplexSawder =
  askTrovenaBeenaDependsRowans +
  ((glimseGlyphsHazardNoopsTieTie === 0
    ? averredBathersBoxroomBuggyNurl
    : anodyneCondosMalateOverateRetinol) satisfies AnnularCooeedSplicesWalksWayWay);

bifornCringerMoshedPerplexSawder =
  askTrovenaBeenaDependsRowans +
  ((glimseGlyphsHazardNoopsTieTie === 0 &&
  kochabCooieGameOnOboleUnweave === Math.PI
    ? averredBathersBoxroomBuggyNurl
    : anodyneCondosMalateOverateRetinol) satisfies AnnularCooeedSplicesWalksWayWay);

=====================================output=====================================
foo = (
  coooooooooooooooooooooooooooooooooooooooooooooooooooond
    ? baaaaaaaaaaaaaaaaaaaaar
    : baaaaaaaaaaaaaaaaaaaaaz
) satisfies Fooooooooooo

foo = (condition ? firstValue : secondValue) satisfies SomeType

const foo = (
  coooooooooooooooooooooooooooooooooooooooooooooooooooond
    ? baaaaaaaaaaaaaaaaaaaaar
    : baaaaaaaaaaaaaaaaaaaaaz
) satisfies Fooooooooooo

function foo() {
  return (
    coooooooooooooooooooooooooooooooooooooooooooooooooooond
      ? baaaaaaaaaaaaaaaaaaaaar
      : baaaaaaaaaaaaaaaaaaaaaz
  ) satisfies Fooooooooooo
}

function foo() {
  throw (
    coooooooooooooooooooooooooooooooooooooooooooooooooooond
      ? baaaaaaaaaaaaaaaaaaaaar
      : baaaaaaaaaaaaaaaaaaaaaz
  ) satisfies Fooooooooooo
}

function foo() {
  void ((
    coooooooooooooooooooooooooooooooooooooooooooooooooooond
      ? baaaaaaaaaaaaaaaaaaaaar
      : baaaaaaaaaaaaaaaaaaaaaz
  ) satisfies Fooooooooooo)
}

bifornCringerMoshedPerplexSawder =
  askTrovenaBeenaDependsRowans +
  ((glimseGlyphsHazardNoopsTieTie === 0
    ? averredBathersBoxroomBuggyNurl
    : anodyneCondosMalateOverateRetinol) satisfies AnnularCooeedSplicesWalksWayWay)

bifornCringerMoshedPerplexSawder =
  askTrovenaBeenaDependsRowans +
  ((glimseGlyphsHazardNoopsTieTie === 0 &&
  kochabCooieGameOnOboleUnweave === Math.PI
    ? averredBathersBoxroomBuggyNurl
    : anodyneCondosMalateOverateRetinol) satisfies AnnularCooeedSplicesWalksWayWay)

================================================================================
`;

exports[`ternary.ts format 1`] = `
====================================options=====================================
parsers: ["typescript"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
foo = (coooooooooooooooooooooooooooooooooooooooooooooooooooond
    ? baaaaaaaaaaaaaaaaaaaaar
    : baaaaaaaaaaaaaaaaaaaaaz) satisfies Fooooooooooo;

foo = (condition ? firstValue : secondValue) satisfies SomeType;

const foo = (coooooooooooooooooooooooooooooooooooooooooooooooooooond
  ? baaaaaaaaaaaaaaaaaaaaar
  : baaaaaaaaaaaaaaaaaaaaaz) satisfies Fooooooooooo;

function foo() {
  return (coooooooooooooooooooooooooooooooooooooooooooooooooooond
    ? baaaaaaaaaaaaaaaaaaaaar
    : baaaaaaaaaaaaaaaaaaaaaz) satisfies Fooooooooooo;
}

function foo() {
  throw (coooooooooooooooooooooooooooooooooooooooooooooooooooond
      ? baaaaaaaaaaaaaaaaaaaaar
      : baaaaaaaaaaaaaaaaaaaaaz) satisfies Fooooooooooo;
}

function foo() {
  void ((coooooooooooooooooooooooooooooooooooooooooooooooooooond
    ? baaaaaaaaaaaaaaaaaaaaar
    : baaaaaaaaaaaaaaaaaaaaaz) satisfies Fooooooooooo);
}

bifornCringerMoshedPerplexSawder =
  askTrovenaBeenaDependsRowans +
  ((glimseGlyphsHazardNoopsTieTie === 0
    ? averredBathersBoxroomBuggyNurl
    : anodyneCondosMalateOverateRetinol) satisfies AnnularCooeedSplicesWalksWayWay);

bifornCringerMoshedPerplexSawder =
  askTrovenaBeenaDependsRowans +
  ((glimseGlyphsHazardNoopsTieTie === 0 &&
  kochabCooieGameOnOboleUnweave === Math.PI
    ? averredBathersBoxroomBuggyNurl
    : anodyneCondosMalateOverateRetinol) satisfies AnnularCooeedSplicesWalksWayWay);

=====================================output=====================================
foo = (
  coooooooooooooooooooooooooooooooooooooooooooooooooooond
    ? baaaaaaaaaaaaaaaaaaaaar
    : baaaaaaaaaaaaaaaaaaaaaz
) satisfies Fooooooooooo;

foo = (condition ? firstValue : secondValue) satisfies SomeType;

const foo = (
  coooooooooooooooooooooooooooooooooooooooooooooooooooond
    ? baaaaaaaaaaaaaaaaaaaaar
    : baaaaaaaaaaaaaaaaaaaaaz
) satisfies Fooooooooooo;

function foo() {
  return (
    coooooooooooooooooooooooooooooooooooooooooooooooooooond
      ? baaaaaaaaaaaaaaaaaaaaar
      : baaaaaaaaaaaaaaaaaaaaaz
  ) satisfies Fooooooooooo;
}

function foo() {
  throw (
    coooooooooooooooooooooooooooooooooooooooooooooooooooond
      ? baaaaaaaaaaaaaaaaaaaaar
      : baaaaaaaaaaaaaaaaaaaaaz
  ) satisfies Fooooooooooo;
}

function foo() {
  void ((
    coooooooooooooooooooooooooooooooooooooooooooooooooooond
      ? baaaaaaaaaaaaaaaaaaaaar
      : baaaaaaaaaaaaaaaaaaaaaz
  ) satisfies Fooooooooooo);
}

bifornCringerMoshedPerplexSawder =
  askTrovenaBeenaDependsRowans +
  ((glimseGlyphsHazardNoopsTieTie === 0
    ? averredBathersBoxroomBuggyNurl
    : anodyneCondosMalateOverateRetinol) satisfies AnnularCooeedSplicesWalksWayWay);

bifornCringerMoshedPerplexSawder =
  askTrovenaBeenaDependsRowans +
  ((glimseGlyphsHazardNoopsTieTie === 0 &&
  kochabCooieGameOnOboleUnweave === Math.PI
    ? averredBathersBoxroomBuggyNurl
    : anodyneCondosMalateOverateRetinol) satisfies AnnularCooeedSplicesWalksWayWay);

================================================================================
`;

exports[`types-comments.ts - {"semi":false} format 1`] = `
====================================options=====================================
parsers: ["typescript"]
printWidth: 80
semi: false
                                                                                | printWidth
=====================================input======================================
(() => {
  // swallow error and fallback to using directory as path
}) satisfies string[];

=====================================output=====================================
;(() => {
  // swallow error and fallback to using directory as path
}) satisfies string[]

================================================================================
`;

exports[`types-comments.ts format 1`] = `
====================================options=====================================
parsers: ["typescript"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
(() => {
  // swallow error and fallback to using directory as path
}) satisfies string[];

=====================================output=====================================
(() => {
  // swallow error and fallback to using directory as path
}) satisfies string[];

================================================================================
`;
