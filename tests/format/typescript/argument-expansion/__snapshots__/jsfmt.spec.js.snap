// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`argument_expansion.ts format 1`] = `
====================================options=====================================
parsers: ["typescript"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
const bar1 = [1,2,3].reduce((carry, value) => {
  return [...carry, value];
}, ([] as unknown) as number[]);

const bar2 = [1,2,3].reduce((carry, value) => {
  return [...carry, value];
}, <Array<number>>[]);

const bar3 = [1,2,3].reduce((carry, value) => {
  return [...carry, value];
}, ([1, 2, 3] as unknown) as number[]);

const bar4 = [1,2,3].reduce((carry, value) => {
  return [...carry, value];
}, <Array<number>>[1, 2, 3]);

const bar5 = [1,2,3].reduce((carry, value) => {
  return {...carry, [value]: true};
}, ({} as unknown) as {[key: number]: boolean});

const bar6 = [1,2,3].reduce((carry, value) => {
  return {...carry, [value]: true};
}, <{[key: number]: boolean}>{});

const bar7 = [1,2,3].reduce((carry, value) => {
  return {...carry, [value]: true};
}, ({1: true} as unknown) as {[key: number]: boolean});

const bar8 = [1,2,3].reduce((carry, value) => {
  return {...carry, [value]: true};
}, <{[key: number]: boolean}>{1: true});

=====================================output=====================================
const bar1 = [1, 2, 3].reduce((carry, value) => {
  return [...carry, value];
}, [] as unknown as number[]);

const bar2 = [1, 2, 3].reduce((carry, value) => {
  return [...carry, value];
}, <Array<number>>[]);

const bar3 = [1, 2, 3].reduce(
  (carry, value) => {
    return [...carry, value];
  },
  [1, 2, 3] as unknown as number[]
);

const bar4 = [1, 2, 3].reduce(
  (carry, value) => {
    return [...carry, value];
  },
  <Array<number>>[1, 2, 3]
);

const bar5 = [1, 2, 3].reduce((carry, value) => {
  return { ...carry, [value]: true };
}, {} as unknown as { [key: number]: boolean });

const bar6 = [1, 2, 3].reduce((carry, value) => {
  return { ...carry, [value]: true };
}, <{ [key: number]: boolean }>{});

const bar7 = [1, 2, 3].reduce(
  (carry, value) => {
    return { ...carry, [value]: true };
  },
  { 1: true } as unknown as { [key: number]: boolean }
);

const bar8 = [1, 2, 3].reduce(
  (carry, value) => {
    return { ...carry, [value]: true };
  },
  <{ [key: number]: boolean }>{ 1: true }
);

================================================================================
`;

exports[`arrow-with-return-type.ts format 1`] = `
====================================options=====================================
parsers: ["typescript"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
longfunctionWithCall1("bla", foo, (thing: string): complex<type<something>> => {
  code();
});

longfunctionWithCall12("bla", foo, (thing: string): complex<type<something>> => {
  code();
});

longfunctionWithCallBack("blabla", foobarbazblablablablabla, (thing: string): complex<type<something>> => {
  code();
});

longfunctionWithCallBack("blabla", foobarbazblablabla, (thing: string): complex<type<something>> => {
  code();
});

longfunctionWithCall1("bla", foo, (thing: string): complex<type<\`
\`>> => {
  code();
});

=====================================output=====================================
longfunctionWithCall1("bla", foo, (thing: string): complex<type<something>> => {
  code();
});

longfunctionWithCall12(
  "bla",
  foo,
  (thing: string): complex<type<something>> => {
    code();
  }
);

longfunctionWithCallBack(
  "blabla",
  foobarbazblablablablabla,
  (thing: string): complex<type<something>> => {
    code();
  }
);

longfunctionWithCallBack(
  "blabla",
  foobarbazblablabla,
  (thing: string): complex<type<something>> => {
    code();
  }
);

longfunctionWithCall1(
  "bla",
  foo,
  (
    thing: string
  ): complex<
    type<\`
\`>
  > => {
    code();
  }
);

================================================================================
`;
