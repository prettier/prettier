// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`arrow_function_expression.ts - {"arrowParens":"always"} format 1`] = `
====================================options=====================================
arrowParens: "always"
parsers: ["typescript", "babel"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
a = (b?) => c;

=====================================output=====================================
a = (b?) => c;

================================================================================
`;

exports[`arrow_function_expression.ts - {"arrowParens":"avoid"} format 1`] = `
====================================options=====================================
arrowParens: "avoid"
parsers: ["typescript", "babel"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
a = (b?) => c;

=====================================output=====================================
a = (b?) => c;

================================================================================
`;

exports[`short_body.ts - {"arrowParens":"always"} format 1`] = `
====================================options=====================================
arrowParens: "always"
parsers: ["typescript", "babel"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
const initializeSnapshotState = (
  testFile: Path,
  update: boolean,
  testPath: string,
  expand: boolean,
) => new SnapshotState(testFile, update, testPath, expand);

=====================================output=====================================
const initializeSnapshotState = (
  testFile: Path,
  update: boolean,
  testPath: string,
  expand: boolean
) => new SnapshotState(testFile, update, testPath, expand);

================================================================================
`;

exports[`short_body.ts - {"arrowParens":"avoid"} format 1`] = `
====================================options=====================================
arrowParens: "avoid"
parsers: ["typescript", "babel"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
const initializeSnapshotState = (
  testFile: Path,
  update: boolean,
  testPath: string,
  expand: boolean,
) => new SnapshotState(testFile, update, testPath, expand);

=====================================output=====================================
const initializeSnapshotState = (
  testFile: Path,
  update: boolean,
  testPath: string,
  expand: boolean
) => new SnapshotState(testFile, update, testPath, expand);

================================================================================
`;

exports[`type_params.ts - {"arrowParens":"always"} format 1`] = `
====================================options=====================================
arrowParens: "always"
parsers: ["typescript", "babel"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
<T>(a) => { }

=====================================output=====================================
<T>(a) => {};

================================================================================
`;

exports[`type_params.ts - {"arrowParens":"avoid"} format 1`] = `
====================================options=====================================
arrowParens: "avoid"
parsers: ["typescript", "babel"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
<T>(a) => { }

=====================================output=====================================
<T>(a) => {};

================================================================================
`;
