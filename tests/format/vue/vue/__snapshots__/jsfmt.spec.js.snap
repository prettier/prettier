// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`attributes.vue - {"semi":false} format 1`] = `
====================================options=====================================
parsers: ["vue"]
printWidth: 80
semi: false
                                                                                | printWidth
=====================================input======================================
<template>
<div
  v-for="({ longLongProp, longLongProp }, index) of longLongLongLongLongLongLongLongList"
  v-for="({ longLongProp=42, longLongProp='Hello, World!' }, index) of longLongLongLongLongLongLongLongList"
  v-for="({ longLongProp, longLongProp }) of longLongLongLongLongLongLongLongList"
  v-for="({ longLongProp, longLongProp, anotherLongLongProp, yetAnotherLongLongProp }, index) of longLongLongLongLongLongLongLongList"
  v-for="({ longLongProp, longLongProp, anotherLongLongProp, yetAnotherLongLongProp }) of longLongLongLongLongLongLongLongList"
  v-for="([longLongProp, longLongProp, anotherLongLongProp, yetAnotherLongLongProp], index) of longLongLongLongLongLongLongLongList"
  v-for="([longLongProp, longLongProp=42, anotherLongLongProp, yetAnotherLongLongProp='Hello, World!'], index) of longLongLongLongLongLongLongLongList"
  v-for="([longLongProp, longLongProp, [longLongProp, longLongProp, [longLongProp, longLongProp, anotherLongLongProp, yetAnotherLongLongProp], yetAnotherLongLongProp], yetAnotherLongLongProp], index) of longLongLongLongLongLongLongLongList"
  v-for="([longLongProp, longLongProp, [longLongProp, longLongProp='Hello, Prettier!', [longLongProp, longLongProp, anotherLongLongProp=[longLongProp, longLongProp, anotherLongLongProp, yetAnotherLongLongProp], yetAnotherLongLongProp], yetAnotherLongLongProp], yetAnotherLongLongProp], index) of longLongLongLongLongLongLongLongList"
  v-for="([{ longLongProp, longLongProp }, { longLongProp, longLongProp }, [{ longLongProp, longLongProp, anotherLongLongProp, yetAnotherLongLongProp }, longLongProp], yetAnotherLongLongProp], index) of longLongLongLongLongLongLongLongList"
  v-for="({firstValue, secondValue: { longLongProp, longLongProp, anotherLongLongProp, yetAnotherLongLongProp }}, objectKey, index) in objectWithAVeryVeryVeryVeryLongName"
  v-for="({firstValue={ longLongProp, longLongProp }, secondValue}, objectKey, index) in objectWithAVeryVeryVeryVeryLongName"
  v-for="({firstValue, secondValue, thirdValue, fourthValue}, objectKey, index) in objectWithAVeryVeryVeryVeryLongName"
  v-for="({firstValue, secondValue, thirdValue, fourthValue}, objectKey, index) in objectWithAVeryVeryVeryVeryLongName"
  v-for="({firstValue, secondValue, thirdValue, fourthValue, fifthValue: { longLongProp, longLongProp, anotherLongLongProp, yetAnotherLongLongProp }, sixthValue, seventhValue}, objectKey, index) in objectWithAVeryVeryVeryVeryLongName"
  v-for="({firstValue, secondValue, thirdValue, fourthValue, fifthValue: { longLongProp, longLongProp, anotherLongLongProp, yetAnotherLongLongProp }, sixthValue: {firstValue, secondValue, thirdValue, fourthValue, fifthValue: { longLongProp, longLongProp, anotherLongLongProp, yetAnotherLongLongProp }, sixthValue, seventhValue}, seventhValue}, objectKey, index) in objectWithAVeryVeryVeryVeryLongName"
  v-for="({firstValue, secondValue, thirdValue, fourthValue, fifthValue: { longLongProp, longLongProp, anotherLongLongProp={ longLongProp, longLongProp, anotherLongLongProp, yetAnotherLongLongProp }, yetAnotherLongLongProp }, sixthValue, seventhValue}, objectKey, index) in objectWithAVeryVeryVeryVeryLongName"
  v-for="  item  in  items "
  v-for="  item  of  items "
  v-for="(    item    , index)    in    items"
  v-for="value    in     object"
  v-for="(value,    key)    in    object"
  v-for="(value,    key)    of    object"
  v-for="(value  ,   key,   index)    in   object"
  v-for="   n    in   evenNumbers"
  v-for=" n in even   ( numbers) "
  v-for=" n    in    10"
  v-for=" { a }    in    [0].map(()=>({a:1}))   "
  v-for=" ({ a }, [c  ])    in    [0].map(()=>1)   "
  v-for=" n in items.map(x => { return x }) "
  @click="  /* hello */   "
  @click="   /* 1 */ $emit( /* 2 */ 'click' /* 3 */ ) /* 4 */ ; /* 5 */   "
  @click="   $emit(   'click'   )   "
  @click="   $emit(   'click'   )  ;"
  @click="   $emit(   'click'   )  ;if(something){for(let i=j;i<100;i++){}}else{}"
  slot-scope="     foo"
  slot-scope="     {row   }"
  slot-scope="{destructuring:{   a:{b}}}"
  #default="     foo"
  #default="     {row   }"
  #default="{destructuring:{   a:{b}}}"
  v-slot="     foo"
  v-slot="     {row   }"
  v-slot="{destructuring:{   a:{b}}}"
  v-slot:name="     foo"
  v-slot:name="     {row   }"
  v-slot:name="{destructuring:{   a:{b}}}"
  :class="{ longlonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglong: true }"
  :class="(() => { return 'hello' })()"
  :key="index /* hello */ "
  :key="index // hello "
  @click="() => {console.log(test)}"
  @click="
    () => {
      console.log(test);
    }
  "
  @click="doSomething()"
  @click="doSomething;"
  @click="a.b;"
  @click="a[1];"
  @click="a['b'];"
  @click="a[null];"
  #default="{foo:{bar:{baz}}}"
></div>
</template>

=====================================output=====================================
<template>
  <div
    v-for="(
      { longLongProp, longLongProp }, index
    ) of longLongLongLongLongLongLongLongList"
    v-for="(
      { longLongProp = 42, longLongProp = 'Hello, World!' }, index
    ) of longLongLongLongLongLongLongLongList"
    v-for="{
      longLongProp,
      longLongProp,
    } of longLongLongLongLongLongLongLongList"
    v-for="(
      {
        longLongProp,
        longLongProp,
        anotherLongLongProp,
        yetAnotherLongLongProp,
      },
      index
    ) of longLongLongLongLongLongLongLongList"
    v-for="{
      longLongProp,
      longLongProp,
      anotherLongLongProp,
      yetAnotherLongLongProp,
    } of longLongLongLongLongLongLongLongList"
    v-for="(
      [longLongProp, longLongProp, anotherLongLongProp, yetAnotherLongLongProp],
      index
    ) of longLongLongLongLongLongLongLongList"
    v-for="(
      [
        longLongProp,
        longLongProp = 42,
        anotherLongLongProp,
        yetAnotherLongLongProp = 'Hello, World!',
      ],
      index
    ) of longLongLongLongLongLongLongLongList"
    v-for="(
      [
        longLongProp,
        longLongProp,
        [
          longLongProp,
          longLongProp,
          [
            longLongProp,
            longLongProp,
            anotherLongLongProp,
            yetAnotherLongLongProp,
          ],
          yetAnotherLongLongProp,
        ],
        yetAnotherLongLongProp,
      ],
      index
    ) of longLongLongLongLongLongLongLongList"
    v-for="(
      [
        longLongProp,
        longLongProp,
        [
          longLongProp,
          longLongProp = 'Hello, Prettier!',
          [
            longLongProp,
            longLongProp,
            anotherLongLongProp = [
              longLongProp,
              longLongProp,
              anotherLongLongProp,
              yetAnotherLongLongProp,
            ],
            yetAnotherLongLongProp,
          ],
          yetAnotherLongLongProp,
        ],
        yetAnotherLongLongProp,
      ],
      index
    ) of longLongLongLongLongLongLongLongList"
    v-for="(
      [
        { longLongProp, longLongProp },
        { longLongProp, longLongProp },
        [
          {
            longLongProp,
            longLongProp,
            anotherLongLongProp,
            yetAnotherLongLongProp,
          },
          longLongProp,
        ],
        yetAnotherLongLongProp,
      ],
      index
    ) of longLongLongLongLongLongLongLongList"
    v-for="(
      {
        firstValue,
        secondValue: {
          longLongProp,
          longLongProp,
          anotherLongLongProp,
          yetAnotherLongLongProp,
        },
      },
      objectKey,
      index
    ) in objectWithAVeryVeryVeryVeryLongName"
    v-for="(
      { firstValue = { longLongProp, longLongProp }, secondValue },
      objectKey,
      index
    ) in objectWithAVeryVeryVeryVeryLongName"
    v-for="(
      { firstValue, secondValue, thirdValue, fourthValue }, objectKey, index
    ) in objectWithAVeryVeryVeryVeryLongName"
    v-for="(
      { firstValue, secondValue, thirdValue, fourthValue }, objectKey, index
    ) in objectWithAVeryVeryVeryVeryLongName"
    v-for="(
      {
        firstValue,
        secondValue,
        thirdValue,
        fourthValue,
        fifthValue: {
          longLongProp,
          longLongProp,
          anotherLongLongProp,
          yetAnotherLongLongProp,
        },
        sixthValue,
        seventhValue,
      },
      objectKey,
      index
    ) in objectWithAVeryVeryVeryVeryLongName"
    v-for="(
      {
        firstValue,
        secondValue,
        thirdValue,
        fourthValue,
        fifthValue: {
          longLongProp,
          longLongProp,
          anotherLongLongProp,
          yetAnotherLongLongProp,
        },
        sixthValue: {
          firstValue,
          secondValue,
          thirdValue,
          fourthValue,
          fifthValue: {
            longLongProp,
            longLongProp,
            anotherLongLongProp,
            yetAnotherLongLongProp,
          },
          sixthValue,
          seventhValue,
        },
        seventhValue,
      },
      objectKey,
      index
    ) in objectWithAVeryVeryVeryVeryLongName"
    v-for="(
      {
        firstValue,
        secondValue,
        thirdValue,
        fourthValue,
        fifthValue: {
          longLongProp,
          longLongProp,
          anotherLongLongProp = {
            longLongProp,
            longLongProp,
            anotherLongLongProp,
            yetAnotherLongLongProp,
          },
          yetAnotherLongLongProp,
        },
        sixthValue,
        seventhValue,
      },
      objectKey,
      index
    ) in objectWithAVeryVeryVeryVeryLongName"
    v-for="item in items"
    v-for="item of items"
    v-for="(item, index) in items"
    v-for="value in object"
    v-for="(value, key) in object"
    v-for="(value, key) of object"
    v-for="(value, key, index) in object"
    v-for="n in evenNumbers"
    v-for="n in even(numbers)"
    v-for="n in 10"
    v-for="{ a } in [0].map(() => ({ a: 1 }))"
    v-for="({ a }, [c]) in [0].map(() => 1)"
    v-for="n in items.map((x) => {
      return x
    })"
    @click="/* hello */"
    @click="/* 1 */ $emit(/* 2 */ 'click' /* 3 */) /* 4 */ /* 5 */"
    @click="$emit('click')"
    @click="$emit('click')"
    @click="
      $emit('click')
      if (something) {
        for (let i = j; i < 100; i++) {}
      } else {
      }
    "
    slot-scope="foo"
    slot-scope="{ row }"
    slot-scope="{
      destructuring: {
        a: { b },
      },
    }"
    #default="foo"
    #default="{ row }"
    #default="{
      destructuring: {
        a: { b },
      },
    }"
    v-slot="foo"
    v-slot="{ row }"
    v-slot="{
      destructuring: {
        a: { b },
      },
    }"
    v-slot:name="foo"
    v-slot:name="{ row }"
    v-slot:name="{
      destructuring: {
        a: { b },
      },
    }"
    :class="{
      longlonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglong: true,
    }"
    :class="
      (() => {
        return 'hello'
      })()
    "
    :key="index /* hello */"
    :key="
      index // hello
    "
    @click="
      () => {
        console.log(test)
      }
    "
    @click="
      () => {
        console.log(test)
      }
    "
    @click="doSomething()"
    @click="doSomething;"
    @click="a.b;"
    @click="a[1];"
    @click="a['b'];"
    @click="a[null]"
    #default="{
      foo: {
        bar: { baz },
      },
    }"
  ></div>
</template>

================================================================================
`;

exports[`attributes.vue - {"trailingComma":"none"} format 1`] = `
====================================options=====================================
parsers: ["vue"]
printWidth: 80
trailingComma: "none"
                                                                                | printWidth
=====================================input======================================
<template>
<div
  v-for="({ longLongProp, longLongProp }, index) of longLongLongLongLongLongLongLongList"
  v-for="({ longLongProp=42, longLongProp='Hello, World!' }, index) of longLongLongLongLongLongLongLongList"
  v-for="({ longLongProp, longLongProp }) of longLongLongLongLongLongLongLongList"
  v-for="({ longLongProp, longLongProp, anotherLongLongProp, yetAnotherLongLongProp }, index) of longLongLongLongLongLongLongLongList"
  v-for="({ longLongProp, longLongProp, anotherLongLongProp, yetAnotherLongLongProp }) of longLongLongLongLongLongLongLongList"
  v-for="([longLongProp, longLongProp, anotherLongLongProp, yetAnotherLongLongProp], index) of longLongLongLongLongLongLongLongList"
  v-for="([longLongProp, longLongProp=42, anotherLongLongProp, yetAnotherLongLongProp='Hello, World!'], index) of longLongLongLongLongLongLongLongList"
  v-for="([longLongProp, longLongProp, [longLongProp, longLongProp, [longLongProp, longLongProp, anotherLongLongProp, yetAnotherLongLongProp], yetAnotherLongLongProp], yetAnotherLongLongProp], index) of longLongLongLongLongLongLongLongList"
  v-for="([longLongProp, longLongProp, [longLongProp, longLongProp='Hello, Prettier!', [longLongProp, longLongProp, anotherLongLongProp=[longLongProp, longLongProp, anotherLongLongProp, yetAnotherLongLongProp], yetAnotherLongLongProp], yetAnotherLongLongProp], yetAnotherLongLongProp], index) of longLongLongLongLongLongLongLongList"
  v-for="([{ longLongProp, longLongProp }, { longLongProp, longLongProp }, [{ longLongProp, longLongProp, anotherLongLongProp, yetAnotherLongLongProp }, longLongProp], yetAnotherLongLongProp], index) of longLongLongLongLongLongLongLongList"
  v-for="({firstValue, secondValue: { longLongProp, longLongProp, anotherLongLongProp, yetAnotherLongLongProp }}, objectKey, index) in objectWithAVeryVeryVeryVeryLongName"
  v-for="({firstValue={ longLongProp, longLongProp }, secondValue}, objectKey, index) in objectWithAVeryVeryVeryVeryLongName"
  v-for="({firstValue, secondValue, thirdValue, fourthValue}, objectKey, index) in objectWithAVeryVeryVeryVeryLongName"
  v-for="({firstValue, secondValue, thirdValue, fourthValue}, objectKey, index) in objectWithAVeryVeryVeryVeryLongName"
  v-for="({firstValue, secondValue, thirdValue, fourthValue, fifthValue: { longLongProp, longLongProp, anotherLongLongProp, yetAnotherLongLongProp }, sixthValue, seventhValue}, objectKey, index) in objectWithAVeryVeryVeryVeryLongName"
  v-for="({firstValue, secondValue, thirdValue, fourthValue, fifthValue: { longLongProp, longLongProp, anotherLongLongProp, yetAnotherLongLongProp }, sixthValue: {firstValue, secondValue, thirdValue, fourthValue, fifthValue: { longLongProp, longLongProp, anotherLongLongProp, yetAnotherLongLongProp }, sixthValue, seventhValue}, seventhValue}, objectKey, index) in objectWithAVeryVeryVeryVeryLongName"
  v-for="({firstValue, secondValue, thirdValue, fourthValue, fifthValue: { longLongProp, longLongProp, anotherLongLongProp={ longLongProp, longLongProp, anotherLongLongProp, yetAnotherLongLongProp }, yetAnotherLongLongProp }, sixthValue, seventhValue}, objectKey, index) in objectWithAVeryVeryVeryVeryLongName"
  v-for="  item  in  items "
  v-for="  item  of  items "
  v-for="(    item    , index)    in    items"
  v-for="value    in     object"
  v-for="(value,    key)    in    object"
  v-for="(value,    key)    of    object"
  v-for="(value  ,   key,   index)    in   object"
  v-for="   n    in   evenNumbers"
  v-for=" n in even   ( numbers) "
  v-for=" n    in    10"
  v-for=" { a }    in    [0].map(()=>({a:1}))   "
  v-for=" ({ a }, [c  ])    in    [0].map(()=>1)   "
  v-for=" n in items.map(x => { return x }) "
  @click="  /* hello */   "
  @click="   /* 1 */ $emit( /* 2 */ 'click' /* 3 */ ) /* 4 */ ; /* 5 */   "
  @click="   $emit(   'click'   )   "
  @click="   $emit(   'click'   )  ;"
  @click="   $emit(   'click'   )  ;if(something){for(let i=j;i<100;i++){}}else{}"
  slot-scope="     foo"
  slot-scope="     {row   }"
  slot-scope="{destructuring:{   a:{b}}}"
  #default="     foo"
  #default="     {row   }"
  #default="{destructuring:{   a:{b}}}"
  v-slot="     foo"
  v-slot="     {row   }"
  v-slot="{destructuring:{   a:{b}}}"
  v-slot:name="     foo"
  v-slot:name="     {row   }"
  v-slot:name="{destructuring:{   a:{b}}}"
  :class="{ longlonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglong: true }"
  :class="(() => { return 'hello' })()"
  :key="index /* hello */ "
  :key="index // hello "
  @click="() => {console.log(test)}"
  @click="
    () => {
      console.log(test);
    }
  "
  @click="doSomething()"
  @click="doSomething;"
  @click="a.b;"
  @click="a[1];"
  @click="a['b'];"
  @click="a[null];"
  #default="{foo:{bar:{baz}}}"
></div>
</template>

=====================================output=====================================
<template>
  <div
    v-for="(
      { longLongProp, longLongProp }, index
    ) of longLongLongLongLongLongLongLongList"
    v-for="(
      { longLongProp = 42, longLongProp = 'Hello, World!' }, index
    ) of longLongLongLongLongLongLongLongList"
    v-for="{
      longLongProp,
      longLongProp
    } of longLongLongLongLongLongLongLongList"
    v-for="(
      {
        longLongProp,
        longLongProp,
        anotherLongLongProp,
        yetAnotherLongLongProp
      },
      index
    ) of longLongLongLongLongLongLongLongList"
    v-for="{
      longLongProp,
      longLongProp,
      anotherLongLongProp,
      yetAnotherLongLongProp
    } of longLongLongLongLongLongLongLongList"
    v-for="(
      [longLongProp, longLongProp, anotherLongLongProp, yetAnotherLongLongProp],
      index
    ) of longLongLongLongLongLongLongLongList"
    v-for="(
      [
        longLongProp,
        longLongProp = 42,
        anotherLongLongProp,
        yetAnotherLongLongProp = 'Hello, World!'
      ],
      index
    ) of longLongLongLongLongLongLongLongList"
    v-for="(
      [
        longLongProp,
        longLongProp,
        [
          longLongProp,
          longLongProp,
          [
            longLongProp,
            longLongProp,
            anotherLongLongProp,
            yetAnotherLongLongProp
          ],
          yetAnotherLongLongProp
        ],
        yetAnotherLongLongProp
      ],
      index
    ) of longLongLongLongLongLongLongLongList"
    v-for="(
      [
        longLongProp,
        longLongProp,
        [
          longLongProp,
          longLongProp = 'Hello, Prettier!',
          [
            longLongProp,
            longLongProp,
            anotherLongLongProp = [
              longLongProp,
              longLongProp,
              anotherLongLongProp,
              yetAnotherLongLongProp
            ],
            yetAnotherLongLongProp
          ],
          yetAnotherLongLongProp
        ],
        yetAnotherLongLongProp
      ],
      index
    ) of longLongLongLongLongLongLongLongList"
    v-for="(
      [
        { longLongProp, longLongProp },
        { longLongProp, longLongProp },
        [
          {
            longLongProp,
            longLongProp,
            anotherLongLongProp,
            yetAnotherLongLongProp
          },
          longLongProp
        ],
        yetAnotherLongLongProp
      ],
      index
    ) of longLongLongLongLongLongLongLongList"
    v-for="(
      {
        firstValue,
        secondValue: {
          longLongProp,
          longLongProp,
          anotherLongLongProp,
          yetAnotherLongLongProp
        }
      },
      objectKey,
      index
    ) in objectWithAVeryVeryVeryVeryLongName"
    v-for="(
      { firstValue = { longLongProp, longLongProp }, secondValue },
      objectKey,
      index
    ) in objectWithAVeryVeryVeryVeryLongName"
    v-for="(
      { firstValue, secondValue, thirdValue, fourthValue }, objectKey, index
    ) in objectWithAVeryVeryVeryVeryLongName"
    v-for="(
      { firstValue, secondValue, thirdValue, fourthValue }, objectKey, index
    ) in objectWithAVeryVeryVeryVeryLongName"
    v-for="(
      {
        firstValue,
        secondValue,
        thirdValue,
        fourthValue,
        fifthValue: {
          longLongProp,
          longLongProp,
          anotherLongLongProp,
          yetAnotherLongLongProp
        },
        sixthValue,
        seventhValue
      },
      objectKey,
      index
    ) in objectWithAVeryVeryVeryVeryLongName"
    v-for="(
      {
        firstValue,
        secondValue,
        thirdValue,
        fourthValue,
        fifthValue: {
          longLongProp,
          longLongProp,
          anotherLongLongProp,
          yetAnotherLongLongProp
        },
        sixthValue: {
          firstValue,
          secondValue,
          thirdValue,
          fourthValue,
          fifthValue: {
            longLongProp,
            longLongProp,
            anotherLongLongProp,
            yetAnotherLongLongProp
          },
          sixthValue,
          seventhValue
        },
        seventhValue
      },
      objectKey,
      index
    ) in objectWithAVeryVeryVeryVeryLongName"
    v-for="(
      {
        firstValue,
        secondValue,
        thirdValue,
        fourthValue,
        fifthValue: {
          longLongProp,
          longLongProp,
          anotherLongLongProp = {
            longLongProp,
            longLongProp,
            anotherLongLongProp,
            yetAnotherLongLongProp
          },
          yetAnotherLongLongProp
        },
        sixthValue,
        seventhValue
      },
      objectKey,
      index
    ) in objectWithAVeryVeryVeryVeryLongName"
    v-for="item in items"
    v-for="item of items"
    v-for="(item, index) in items"
    v-for="value in object"
    v-for="(value, key) in object"
    v-for="(value, key) of object"
    v-for="(value, key, index) in object"
    v-for="n in evenNumbers"
    v-for="n in even(numbers)"
    v-for="n in 10"
    v-for="{ a } in [0].map(() => ({ a: 1 }))"
    v-for="({ a }, [c]) in [0].map(() => 1)"
    v-for="n in items.map((x) => {
      return x;
    })"
    @click="/* hello */"
    @click="/* 1 */ $emit(/* 2 */ 'click' /* 3 */) /* 4 */ /* 5 */"
    @click="$emit('click')"
    @click="$emit('click')"
    @click="
      $emit('click');
      if (something) {
        for (let i = j; i < 100; i++) {}
      } else {
      }
    "
    slot-scope="foo"
    slot-scope="{ row }"
    slot-scope="{
      destructuring: {
        a: { b }
      }
    }"
    #default="foo"
    #default="{ row }"
    #default="{
      destructuring: {
        a: { b }
      }
    }"
    v-slot="foo"
    v-slot="{ row }"
    v-slot="{
      destructuring: {
        a: { b }
      }
    }"
    v-slot:name="foo"
    v-slot:name="{ row }"
    v-slot:name="{
      destructuring: {
        a: { b }
      }
    }"
    :class="{
      longlonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglong: true
    }"
    :class="
      (() => {
        return 'hello';
      })()
    "
    :key="index /* hello */"
    :key="
      index // hello
    "
    @click="
      () => {
        console.log(test);
      }
    "
    @click="
      () => {
        console.log(test);
      }
    "
    @click="doSomething()"
    @click="doSomething;"
    @click="a.b;"
    @click="a[1];"
    @click="a['b'];"
    @click="a[null]"
    #default="{
      foo: {
        bar: { baz }
      }
    }"
  ></div>
</template>

================================================================================
`;

exports[`attributes.vue format 1`] = `
====================================options=====================================
parsers: ["vue"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
<template>
<div
  v-for="({ longLongProp, longLongProp }, index) of longLongLongLongLongLongLongLongList"
  v-for="({ longLongProp=42, longLongProp='Hello, World!' }, index) of longLongLongLongLongLongLongLongList"
  v-for="({ longLongProp, longLongProp }) of longLongLongLongLongLongLongLongList"
  v-for="({ longLongProp, longLongProp, anotherLongLongProp, yetAnotherLongLongProp }, index) of longLongLongLongLongLongLongLongList"
  v-for="({ longLongProp, longLongProp, anotherLongLongProp, yetAnotherLongLongProp }) of longLongLongLongLongLongLongLongList"
  v-for="([longLongProp, longLongProp, anotherLongLongProp, yetAnotherLongLongProp], index) of longLongLongLongLongLongLongLongList"
  v-for="([longLongProp, longLongProp=42, anotherLongLongProp, yetAnotherLongLongProp='Hello, World!'], index) of longLongLongLongLongLongLongLongList"
  v-for="([longLongProp, longLongProp, [longLongProp, longLongProp, [longLongProp, longLongProp, anotherLongLongProp, yetAnotherLongLongProp], yetAnotherLongLongProp], yetAnotherLongLongProp], index) of longLongLongLongLongLongLongLongList"
  v-for="([longLongProp, longLongProp, [longLongProp, longLongProp='Hello, Prettier!', [longLongProp, longLongProp, anotherLongLongProp=[longLongProp, longLongProp, anotherLongLongProp, yetAnotherLongLongProp], yetAnotherLongLongProp], yetAnotherLongLongProp], yetAnotherLongLongProp], index) of longLongLongLongLongLongLongLongList"
  v-for="([{ longLongProp, longLongProp }, { longLongProp, longLongProp }, [{ longLongProp, longLongProp, anotherLongLongProp, yetAnotherLongLongProp }, longLongProp], yetAnotherLongLongProp], index) of longLongLongLongLongLongLongLongList"
  v-for="({firstValue, secondValue: { longLongProp, longLongProp, anotherLongLongProp, yetAnotherLongLongProp }}, objectKey, index) in objectWithAVeryVeryVeryVeryLongName"
  v-for="({firstValue={ longLongProp, longLongProp }, secondValue}, objectKey, index) in objectWithAVeryVeryVeryVeryLongName"
  v-for="({firstValue, secondValue, thirdValue, fourthValue}, objectKey, index) in objectWithAVeryVeryVeryVeryLongName"
  v-for="({firstValue, secondValue, thirdValue, fourthValue}, objectKey, index) in objectWithAVeryVeryVeryVeryLongName"
  v-for="({firstValue, secondValue, thirdValue, fourthValue, fifthValue: { longLongProp, longLongProp, anotherLongLongProp, yetAnotherLongLongProp }, sixthValue, seventhValue}, objectKey, index) in objectWithAVeryVeryVeryVeryLongName"
  v-for="({firstValue, secondValue, thirdValue, fourthValue, fifthValue: { longLongProp, longLongProp, anotherLongLongProp, yetAnotherLongLongProp }, sixthValue: {firstValue, secondValue, thirdValue, fourthValue, fifthValue: { longLongProp, longLongProp, anotherLongLongProp, yetAnotherLongLongProp }, sixthValue, seventhValue}, seventhValue}, objectKey, index) in objectWithAVeryVeryVeryVeryLongName"
  v-for="({firstValue, secondValue, thirdValue, fourthValue, fifthValue: { longLongProp, longLongProp, anotherLongLongProp={ longLongProp, longLongProp, anotherLongLongProp, yetAnotherLongLongProp }, yetAnotherLongLongProp }, sixthValue, seventhValue}, objectKey, index) in objectWithAVeryVeryVeryVeryLongName"
  v-for="  item  in  items "
  v-for="  item  of  items "
  v-for="(    item    , index)    in    items"
  v-for="value    in     object"
  v-for="(value,    key)    in    object"
  v-for="(value,    key)    of    object"
  v-for="(value  ,   key,   index)    in   object"
  v-for="   n    in   evenNumbers"
  v-for=" n in even   ( numbers) "
  v-for=" n    in    10"
  v-for=" { a }    in    [0].map(()=>({a:1}))   "
  v-for=" ({ a }, [c  ])    in    [0].map(()=>1)   "
  v-for=" n in items.map(x => { return x }) "
  @click="  /* hello */   "
  @click="   /* 1 */ $emit( /* 2 */ 'click' /* 3 */ ) /* 4 */ ; /* 5 */   "
  @click="   $emit(   'click'   )   "
  @click="   $emit(   'click'   )  ;"
  @click="   $emit(   'click'   )  ;if(something){for(let i=j;i<100;i++){}}else{}"
  slot-scope="     foo"
  slot-scope="     {row   }"
  slot-scope="{destructuring:{   a:{b}}}"
  #default="     foo"
  #default="     {row   }"
  #default="{destructuring:{   a:{b}}}"
  v-slot="     foo"
  v-slot="     {row   }"
  v-slot="{destructuring:{   a:{b}}}"
  v-slot:name="     foo"
  v-slot:name="     {row   }"
  v-slot:name="{destructuring:{   a:{b}}}"
  :class="{ longlonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglong: true }"
  :class="(() => { return 'hello' })()"
  :key="index /* hello */ "
  :key="index // hello "
  @click="() => {console.log(test)}"
  @click="
    () => {
      console.log(test);
    }
  "
  @click="doSomething()"
  @click="doSomething;"
  @click="a.b;"
  @click="a[1];"
  @click="a['b'];"
  @click="a[null];"
  #default="{foo:{bar:{baz}}}"
></div>
</template>

=====================================output=====================================
<template>
  <div
    v-for="(
      { longLongProp, longLongProp }, index
    ) of longLongLongLongLongLongLongLongList"
    v-for="(
      { longLongProp = 42, longLongProp = 'Hello, World!' }, index
    ) of longLongLongLongLongLongLongLongList"
    v-for="{
      longLongProp,
      longLongProp,
    } of longLongLongLongLongLongLongLongList"
    v-for="(
      {
        longLongProp,
        longLongProp,
        anotherLongLongProp,
        yetAnotherLongLongProp,
      },
      index
    ) of longLongLongLongLongLongLongLongList"
    v-for="{
      longLongProp,
      longLongProp,
      anotherLongLongProp,
      yetAnotherLongLongProp,
    } of longLongLongLongLongLongLongLongList"
    v-for="(
      [longLongProp, longLongProp, anotherLongLongProp, yetAnotherLongLongProp],
      index
    ) of longLongLongLongLongLongLongLongList"
    v-for="(
      [
        longLongProp,
        longLongProp = 42,
        anotherLongLongProp,
        yetAnotherLongLongProp = 'Hello, World!',
      ],
      index
    ) of longLongLongLongLongLongLongLongList"
    v-for="(
      [
        longLongProp,
        longLongProp,
        [
          longLongProp,
          longLongProp,
          [
            longLongProp,
            longLongProp,
            anotherLongLongProp,
            yetAnotherLongLongProp,
          ],
          yetAnotherLongLongProp,
        ],
        yetAnotherLongLongProp,
      ],
      index
    ) of longLongLongLongLongLongLongLongList"
    v-for="(
      [
        longLongProp,
        longLongProp,
        [
          longLongProp,
          longLongProp = 'Hello, Prettier!',
          [
            longLongProp,
            longLongProp,
            anotherLongLongProp = [
              longLongProp,
              longLongProp,
              anotherLongLongProp,
              yetAnotherLongLongProp,
            ],
            yetAnotherLongLongProp,
          ],
          yetAnotherLongLongProp,
        ],
        yetAnotherLongLongProp,
      ],
      index
    ) of longLongLongLongLongLongLongLongList"
    v-for="(
      [
        { longLongProp, longLongProp },
        { longLongProp, longLongProp },
        [
          {
            longLongProp,
            longLongProp,
            anotherLongLongProp,
            yetAnotherLongLongProp,
          },
          longLongProp,
        ],
        yetAnotherLongLongProp,
      ],
      index
    ) of longLongLongLongLongLongLongLongList"
    v-for="(
      {
        firstValue,
        secondValue: {
          longLongProp,
          longLongProp,
          anotherLongLongProp,
          yetAnotherLongLongProp,
        },
      },
      objectKey,
      index
    ) in objectWithAVeryVeryVeryVeryLongName"
    v-for="(
      { firstValue = { longLongProp, longLongProp }, secondValue },
      objectKey,
      index
    ) in objectWithAVeryVeryVeryVeryLongName"
    v-for="(
      { firstValue, secondValue, thirdValue, fourthValue }, objectKey, index
    ) in objectWithAVeryVeryVeryVeryLongName"
    v-for="(
      { firstValue, secondValue, thirdValue, fourthValue }, objectKey, index
    ) in objectWithAVeryVeryVeryVeryLongName"
    v-for="(
      {
        firstValue,
        secondValue,
        thirdValue,
        fourthValue,
        fifthValue: {
          longLongProp,
          longLongProp,
          anotherLongLongProp,
          yetAnotherLongLongProp,
        },
        sixthValue,
        seventhValue,
      },
      objectKey,
      index
    ) in objectWithAVeryVeryVeryVeryLongName"
    v-for="(
      {
        firstValue,
        secondValue,
        thirdValue,
        fourthValue,
        fifthValue: {
          longLongProp,
          longLongProp,
          anotherLongLongProp,
          yetAnotherLongLongProp,
        },
        sixthValue: {
          firstValue,
          secondValue,
          thirdValue,
          fourthValue,
          fifthValue: {
            longLongProp,
            longLongProp,
            anotherLongLongProp,
            yetAnotherLongLongProp,
          },
          sixthValue,
          seventhValue,
        },
        seventhValue,
      },
      objectKey,
      index
    ) in objectWithAVeryVeryVeryVeryLongName"
    v-for="(
      {
        firstValue,
        secondValue,
        thirdValue,
        fourthValue,
        fifthValue: {
          longLongProp,
          longLongProp,
          anotherLongLongProp = {
            longLongProp,
            longLongProp,
            anotherLongLongProp,
            yetAnotherLongLongProp,
          },
          yetAnotherLongLongProp,
        },
        sixthValue,
        seventhValue,
      },
      objectKey,
      index
    ) in objectWithAVeryVeryVeryVeryLongName"
    v-for="item in items"
    v-for="item of items"
    v-for="(item, index) in items"
    v-for="value in object"
    v-for="(value, key) in object"
    v-for="(value, key) of object"
    v-for="(value, key, index) in object"
    v-for="n in evenNumbers"
    v-for="n in even(numbers)"
    v-for="n in 10"
    v-for="{ a } in [0].map(() => ({ a: 1 }))"
    v-for="({ a }, [c]) in [0].map(() => 1)"
    v-for="n in items.map((x) => {
      return x;
    })"
    @click="/* hello */"
    @click="/* 1 */ $emit(/* 2 */ 'click' /* 3 */) /* 4 */ /* 5 */"
    @click="$emit('click')"
    @click="$emit('click')"
    @click="
      $emit('click');
      if (something) {
        for (let i = j; i < 100; i++) {}
      } else {
      }
    "
    slot-scope="foo"
    slot-scope="{ row }"
    slot-scope="{
      destructuring: {
        a: { b },
      },
    }"
    #default="foo"
    #default="{ row }"
    #default="{
      destructuring: {
        a: { b },
      },
    }"
    v-slot="foo"
    v-slot="{ row }"
    v-slot="{
      destructuring: {
        a: { b },
      },
    }"
    v-slot:name="foo"
    v-slot:name="{ row }"
    v-slot:name="{
      destructuring: {
        a: { b },
      },
    }"
    :class="{
      longlonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglong: true,
    }"
    :class="
      (() => {
        return 'hello';
      })()
    "
    :key="index /* hello */"
    :key="
      index // hello
    "
    @click="
      () => {
        console.log(test);
      }
    "
    @click="
      () => {
        console.log(test);
      }
    "
    @click="doSomething()"
    @click="doSomething;"
    @click="a.b;"
    @click="a[1];"
    @click="a['b'];"
    @click="a[null]"
    #default="{
      foo: {
        bar: { baz },
      },
    }"
  ></div>
</template>

================================================================================
`;

exports[`board_card.vue - {"semi":false} format 1`] = `
====================================options=====================================
parsers: ["vue"]
printWidth: 80
semi: false
                                                                                | printWidth
=====================================input======================================
<script>
import './issue_card_inner';
import eventHub from '../eventhub';

const Store = gl.issueBoards.BoardsStore;

export default {
  name: 'BoardsIssueCard',
  components: {
    'issue-card-inner': gl.issueBoards.IssueCardInner,
  },
  props: {
    list: Object,
    issue: Object,
    issueLinkBase: String,
    disabled: Boolean,
    index: Number,
    rootPath: String,
  },
  data() {
    return {
      showDetail: false,
      detailIssue: Store.detail,
    };
  },
  computed: {
    issueDetailVisible() {
      return (
        this.detailIssue.issue && this.detailIssue.issue.id === this.issue.id
      );
    },
  },
  methods: {
    mouseDown() {
      this.showDetail = true;
    },
    mouseMove() {
      this.showDetail = false;
    },
    showIssue(e) {
      if (e.target.classList.contains('js-no-trigger')) return;

      if (this.showDetail) {
        this.showDetail = false;

        if (Store.detail.issue && Store.detail.issue.id === this.issue.id) {
          eventHub.$emit('clearDetailIssue');
        } else {
          eventHub.$emit('newDetailIssue', this.issue);
          Store.detail.list = this.list;
        }
      }
    },
  },
};
</script>

<template>
  <li class="card"
    :class="{ 'user-can-drag': !disabled && issue.id, 'is-disabled': disabled || !issue.id, 'is-active': issueDetailVisible }"
    :index="index"
    :data-issue-id="issue.id"
    @mousedown="mouseDown"
    @mousemove="mouseMove"
    @mouseup="showIssue($event)">
    <issue-card-inner
      :list="list"
      :issue="issue"
      :issue-link-base="issueLinkBase"
      :root-path="rootPath"
      :update-filters="true" />
  </li>
</template>

=====================================output=====================================
<script>
import "./issue_card_inner"
import eventHub from "../eventhub"

const Store = gl.issueBoards.BoardsStore

export default {
  name: "BoardsIssueCard",
  components: {
    "issue-card-inner": gl.issueBoards.IssueCardInner,
  },
  props: {
    list: Object,
    issue: Object,
    issueLinkBase: String,
    disabled: Boolean,
    index: Number,
    rootPath: String,
  },
  data() {
    return {
      showDetail: false,
      detailIssue: Store.detail,
    }
  },
  computed: {
    issueDetailVisible() {
      return (
        this.detailIssue.issue && this.detailIssue.issue.id === this.issue.id
      )
    },
  },
  methods: {
    mouseDown() {
      this.showDetail = true
    },
    mouseMove() {
      this.showDetail = false
    },
    showIssue(e) {
      if (e.target.classList.contains("js-no-trigger")) return

      if (this.showDetail) {
        this.showDetail = false

        if (Store.detail.issue && Store.detail.issue.id === this.issue.id) {
          eventHub.$emit("clearDetailIssue")
        } else {
          eventHub.$emit("newDetailIssue", this.issue)
          Store.detail.list = this.list
        }
      }
    },
  },
}
</script>

<template>
  <li
    class="card"
    :class="{
      'user-can-drag': !disabled && issue.id,
      'is-disabled': disabled || !issue.id,
      'is-active': issueDetailVisible,
    }"
    :index="index"
    :data-issue-id="issue.id"
    @mousedown="mouseDown"
    @mousemove="mouseMove"
    @mouseup="showIssue($event)"
  >
    <issue-card-inner
      :list="list"
      :issue="issue"
      :issue-link-base="issueLinkBase"
      :root-path="rootPath"
      :update-filters="true"
    />
  </li>
</template>

================================================================================
`;

exports[`board_card.vue - {"trailingComma":"none"} format 1`] = `
====================================options=====================================
parsers: ["vue"]
printWidth: 80
trailingComma: "none"
                                                                                | printWidth
=====================================input======================================
<script>
import './issue_card_inner';
import eventHub from '../eventhub';

const Store = gl.issueBoards.BoardsStore;

export default {
  name: 'BoardsIssueCard',
  components: {
    'issue-card-inner': gl.issueBoards.IssueCardInner,
  },
  props: {
    list: Object,
    issue: Object,
    issueLinkBase: String,
    disabled: Boolean,
    index: Number,
    rootPath: String,
  },
  data() {
    return {
      showDetail: false,
      detailIssue: Store.detail,
    };
  },
  computed: {
    issueDetailVisible() {
      return (
        this.detailIssue.issue && this.detailIssue.issue.id === this.issue.id
      );
    },
  },
  methods: {
    mouseDown() {
      this.showDetail = true;
    },
    mouseMove() {
      this.showDetail = false;
    },
    showIssue(e) {
      if (e.target.classList.contains('js-no-trigger')) return;

      if (this.showDetail) {
        this.showDetail = false;

        if (Store.detail.issue && Store.detail.issue.id === this.issue.id) {
          eventHub.$emit('clearDetailIssue');
        } else {
          eventHub.$emit('newDetailIssue', this.issue);
          Store.detail.list = this.list;
        }
      }
    },
  },
};
</script>

<template>
  <li class="card"
    :class="{ 'user-can-drag': !disabled && issue.id, 'is-disabled': disabled || !issue.id, 'is-active': issueDetailVisible }"
    :index="index"
    :data-issue-id="issue.id"
    @mousedown="mouseDown"
    @mousemove="mouseMove"
    @mouseup="showIssue($event)">
    <issue-card-inner
      :list="list"
      :issue="issue"
      :issue-link-base="issueLinkBase"
      :root-path="rootPath"
      :update-filters="true" />
  </li>
</template>

=====================================output=====================================
<script>
import "./issue_card_inner";
import eventHub from "../eventhub";

const Store = gl.issueBoards.BoardsStore;

export default {
  name: "BoardsIssueCard",
  components: {
    "issue-card-inner": gl.issueBoards.IssueCardInner
  },
  props: {
    list: Object,
    issue: Object,
    issueLinkBase: String,
    disabled: Boolean,
    index: Number,
    rootPath: String
  },
  data() {
    return {
      showDetail: false,
      detailIssue: Store.detail
    };
  },
  computed: {
    issueDetailVisible() {
      return (
        this.detailIssue.issue && this.detailIssue.issue.id === this.issue.id
      );
    }
  },
  methods: {
    mouseDown() {
      this.showDetail = true;
    },
    mouseMove() {
      this.showDetail = false;
    },
    showIssue(e) {
      if (e.target.classList.contains("js-no-trigger")) return;

      if (this.showDetail) {
        this.showDetail = false;

        if (Store.detail.issue && Store.detail.issue.id === this.issue.id) {
          eventHub.$emit("clearDetailIssue");
        } else {
          eventHub.$emit("newDetailIssue", this.issue);
          Store.detail.list = this.list;
        }
      }
    }
  }
};
</script>

<template>
  <li
    class="card"
    :class="{
      'user-can-drag': !disabled && issue.id,
      'is-disabled': disabled || !issue.id,
      'is-active': issueDetailVisible
    }"
    :index="index"
    :data-issue-id="issue.id"
    @mousedown="mouseDown"
    @mousemove="mouseMove"
    @mouseup="showIssue($event)"
  >
    <issue-card-inner
      :list="list"
      :issue="issue"
      :issue-link-base="issueLinkBase"
      :root-path="rootPath"
      :update-filters="true"
    />
  </li>
</template>

================================================================================
`;

exports[`board_card.vue format 1`] = `
====================================options=====================================
parsers: ["vue"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
<script>
import './issue_card_inner';
import eventHub from '../eventhub';

const Store = gl.issueBoards.BoardsStore;

export default {
  name: 'BoardsIssueCard',
  components: {
    'issue-card-inner': gl.issueBoards.IssueCardInner,
  },
  props: {
    list: Object,
    issue: Object,
    issueLinkBase: String,
    disabled: Boolean,
    index: Number,
    rootPath: String,
  },
  data() {
    return {
      showDetail: false,
      detailIssue: Store.detail,
    };
  },
  computed: {
    issueDetailVisible() {
      return (
        this.detailIssue.issue && this.detailIssue.issue.id === this.issue.id
      );
    },
  },
  methods: {
    mouseDown() {
      this.showDetail = true;
    },
    mouseMove() {
      this.showDetail = false;
    },
    showIssue(e) {
      if (e.target.classList.contains('js-no-trigger')) return;

      if (this.showDetail) {
        this.showDetail = false;

        if (Store.detail.issue && Store.detail.issue.id === this.issue.id) {
          eventHub.$emit('clearDetailIssue');
        } else {
          eventHub.$emit('newDetailIssue', this.issue);
          Store.detail.list = this.list;
        }
      }
    },
  },
};
</script>

<template>
  <li class="card"
    :class="{ 'user-can-drag': !disabled && issue.id, 'is-disabled': disabled || !issue.id, 'is-active': issueDetailVisible }"
    :index="index"
    :data-issue-id="issue.id"
    @mousedown="mouseDown"
    @mousemove="mouseMove"
    @mouseup="showIssue($event)">
    <issue-card-inner
      :list="list"
      :issue="issue"
      :issue-link-base="issueLinkBase"
      :root-path="rootPath"
      :update-filters="true" />
  </li>
</template>

=====================================output=====================================
<script>
import "./issue_card_inner";
import eventHub from "../eventhub";

const Store = gl.issueBoards.BoardsStore;

export default {
  name: "BoardsIssueCard",
  components: {
    "issue-card-inner": gl.issueBoards.IssueCardInner,
  },
  props: {
    list: Object,
    issue: Object,
    issueLinkBase: String,
    disabled: Boolean,
    index: Number,
    rootPath: String,
  },
  data() {
    return {
      showDetail: false,
      detailIssue: Store.detail,
    };
  },
  computed: {
    issueDetailVisible() {
      return (
        this.detailIssue.issue && this.detailIssue.issue.id === this.issue.id
      );
    },
  },
  methods: {
    mouseDown() {
      this.showDetail = true;
    },
    mouseMove() {
      this.showDetail = false;
    },
    showIssue(e) {
      if (e.target.classList.contains("js-no-trigger")) return;

      if (this.showDetail) {
        this.showDetail = false;

        if (Store.detail.issue && Store.detail.issue.id === this.issue.id) {
          eventHub.$emit("clearDetailIssue");
        } else {
          eventHub.$emit("newDetailIssue", this.issue);
          Store.detail.list = this.list;
        }
      }
    },
  },
};
</script>

<template>
  <li
    class="card"
    :class="{
      'user-can-drag': !disabled && issue.id,
      'is-disabled': disabled || !issue.id,
      'is-active': issueDetailVisible,
    }"
    :index="index"
    :data-issue-id="issue.id"
    @mousedown="mouseDown"
    @mousemove="mouseMove"
    @mouseup="showIssue($event)"
  >
    <issue-card-inner
      :list="list"
      :issue="issue"
      :issue-link-base="issueLinkBase"
      :root-path="rootPath"
      :update-filters="true"
    />
  </li>
</template>

================================================================================
`;

exports[`case-sensitive-tags.vue - {"semi":false} format 1`] = `
====================================options=====================================
parsers: ["vue"]
printWidth: 80
semi: false
                                                                                | printWidth
=====================================input======================================
<template>
	<Input></Input>
</template>

=====================================output=====================================
<template>
  <Input></Input>
</template>

================================================================================
`;

exports[`case-sensitive-tags.vue - {"trailingComma":"none"} format 1`] = `
====================================options=====================================
parsers: ["vue"]
printWidth: 80
trailingComma: "none"
                                                                                | printWidth
=====================================input======================================
<template>
	<Input></Input>
</template>

=====================================output=====================================
<template>
  <Input></Input>
</template>

================================================================================
`;

exports[`case-sensitive-tags.vue format 1`] = `
====================================options=====================================
parsers: ["vue"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
<template>
	<Input></Input>
</template>

=====================================output=====================================
<template>
  <Input></Input>
</template>

================================================================================
`;

exports[`custom-block.vue - {"semi":false} format 1`] = `
====================================options=====================================
parsers: ["vue"]
printWidth: 80
semi: false
                                                                                | printWidth
=====================================input======================================
<i18n>
  en:
    one: One
    two: Two
</i18n>

<html><head></head><body></body></html>

=====================================output=====================================
<i18n>
  en:
    one: One
    two: Two
</i18n>

<html>
  <head></head>
  <body></body>
</html>

================================================================================
`;

exports[`custom-block.vue - {"trailingComma":"none"} format 1`] = `
====================================options=====================================
parsers: ["vue"]
printWidth: 80
trailingComma: "none"
                                                                                | printWidth
=====================================input======================================
<i18n>
  en:
    one: One
    two: Two
</i18n>

<html><head></head><body></body></html>

=====================================output=====================================
<i18n>
  en:
    one: One
    two: Two
</i18n>

<html>
  <head></head>
  <body></body>
</html>

================================================================================
`;

exports[`custom-block.vue format 1`] = `
====================================options=====================================
parsers: ["vue"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
<i18n>
  en:
    one: One
    two: Two
</i18n>

<html><head></head><body></body></html>

=====================================output=====================================
<i18n>
  en:
    one: One
    two: Two
</i18n>

<html>
  <head></head>
  <body></body>
</html>

================================================================================
`;

exports[`expression-binding.vue - {"semi":false} format 1`] = `
====================================options=====================================
parsers: ["vue"]
printWidth: 80
semi: false
                                                                                | printWidth
=====================================input======================================
<!-- #7396 -->
<template>
<MyComponent :attr="\`loooooooooooooooooooooooooooooooooooooooooooooooooooooooooooog \${foo} template literal value\`"/>
</template>
<template>
<MyComponent :attr="\`\${first} loooooooooooooooooooooooooooooooooooooooooooooooooooooooooooog \${template} \${literal}\`
+\`\${second} loooooooooooooooooooooooooooooooooooooooooooooooooooooooooooog \${template} \${literal}\`"/>
</template>
<template>
<MyComponent :attr="\`loooooooooooooooooooooooooooooooooooooooooooooooooooooooooooog \${foo +               bar} template literal value\`"/>
</template>
<template>
<MyComponent :src="'loooooooooooooooooooooooooooooooooooooooooooooooooooooooooooog literal string value'"/>
</template>
<template>
<MyComponent :src="'first loooooooooooooooooooooooooooooooooooooooooooooooooooooooooooog' + 'second loooooooooooooooooooooooooooooooooooooooooooooooooooooooooooog'"/>
</template>
<template>
<MyComponent :src="100000000000000000000000000000000000000000000000000000000000000000000000000"/>
</template>

=====================================output=====================================
<!-- #7396 -->
<template>
  <MyComponent
    :attr="\`loooooooooooooooooooooooooooooooooooooooooooooooooooooooooooog \${foo} template literal value\`"
  />
</template>
<template>
  <MyComponent
    :attr="
      \`\${first} loooooooooooooooooooooooooooooooooooooooooooooooooooooooooooog \${template} \${literal}\` +
      \`\${second} loooooooooooooooooooooooooooooooooooooooooooooooooooooooooooog \${template} \${literal}\`
    "
  />
</template>
<template>
  <MyComponent
    :attr="\`loooooooooooooooooooooooooooooooooooooooooooooooooooooooooooog \${
      foo + bar
    } template literal value\`"
  />
</template>
<template>
  <MyComponent
    :src="'loooooooooooooooooooooooooooooooooooooooooooooooooooooooooooog literal string value'"
  />
</template>
<template>
  <MyComponent
    :src="
      'first loooooooooooooooooooooooooooooooooooooooooooooooooooooooooooog' +
      'second loooooooooooooooooooooooooooooooooooooooooooooooooooooooooooog'
    "
  />
</template>
<template>
  <MyComponent
    :src="
      100000000000000000000000000000000000000000000000000000000000000000000000000
    "
  />
</template>

================================================================================
`;

exports[`expression-binding.vue - {"trailingComma":"none"} format 1`] = `
====================================options=====================================
parsers: ["vue"]
printWidth: 80
trailingComma: "none"
                                                                                | printWidth
=====================================input======================================
<!-- #7396 -->
<template>
<MyComponent :attr="\`loooooooooooooooooooooooooooooooooooooooooooooooooooooooooooog \${foo} template literal value\`"/>
</template>
<template>
<MyComponent :attr="\`\${first} loooooooooooooooooooooooooooooooooooooooooooooooooooooooooooog \${template} \${literal}\`
+\`\${second} loooooooooooooooooooooooooooooooooooooooooooooooooooooooooooog \${template} \${literal}\`"/>
</template>
<template>
<MyComponent :attr="\`loooooooooooooooooooooooooooooooooooooooooooooooooooooooooooog \${foo +               bar} template literal value\`"/>
</template>
<template>
<MyComponent :src="'loooooooooooooooooooooooooooooooooooooooooooooooooooooooooooog literal string value'"/>
</template>
<template>
<MyComponent :src="'first loooooooooooooooooooooooooooooooooooooooooooooooooooooooooooog' + 'second loooooooooooooooooooooooooooooooooooooooooooooooooooooooooooog'"/>
</template>
<template>
<MyComponent :src="100000000000000000000000000000000000000000000000000000000000000000000000000"/>
</template>

=====================================output=====================================
<!-- #7396 -->
<template>
  <MyComponent
    :attr="\`loooooooooooooooooooooooooooooooooooooooooooooooooooooooooooog \${foo} template literal value\`"
  />
</template>
<template>
  <MyComponent
    :attr="
      \`\${first} loooooooooooooooooooooooooooooooooooooooooooooooooooooooooooog \${template} \${literal}\` +
      \`\${second} loooooooooooooooooooooooooooooooooooooooooooooooooooooooooooog \${template} \${literal}\`
    "
  />
</template>
<template>
  <MyComponent
    :attr="\`loooooooooooooooooooooooooooooooooooooooooooooooooooooooooooog \${
      foo + bar
    } template literal value\`"
  />
</template>
<template>
  <MyComponent
    :src="'loooooooooooooooooooooooooooooooooooooooooooooooooooooooooooog literal string value'"
  />
</template>
<template>
  <MyComponent
    :src="
      'first loooooooooooooooooooooooooooooooooooooooooooooooooooooooooooog' +
      'second loooooooooooooooooooooooooooooooooooooooooooooooooooooooooooog'
    "
  />
</template>
<template>
  <MyComponent
    :src="
      100000000000000000000000000000000000000000000000000000000000000000000000000
    "
  />
</template>

================================================================================
`;

exports[`expression-binding.vue format 1`] = `
====================================options=====================================
parsers: ["vue"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
<!-- #7396 -->
<template>
<MyComponent :attr="\`loooooooooooooooooooooooooooooooooooooooooooooooooooooooooooog \${foo} template literal value\`"/>
</template>
<template>
<MyComponent :attr="\`\${first} loooooooooooooooooooooooooooooooooooooooooooooooooooooooooooog \${template} \${literal}\`
+\`\${second} loooooooooooooooooooooooooooooooooooooooooooooooooooooooooooog \${template} \${literal}\`"/>
</template>
<template>
<MyComponent :attr="\`loooooooooooooooooooooooooooooooooooooooooooooooooooooooooooog \${foo +               bar} template literal value\`"/>
</template>
<template>
<MyComponent :src="'loooooooooooooooooooooooooooooooooooooooooooooooooooooooooooog literal string value'"/>
</template>
<template>
<MyComponent :src="'first loooooooooooooooooooooooooooooooooooooooooooooooooooooooooooog' + 'second loooooooooooooooooooooooooooooooooooooooooooooooooooooooooooog'"/>
</template>
<template>
<MyComponent :src="100000000000000000000000000000000000000000000000000000000000000000000000000"/>
</template>

=====================================output=====================================
<!-- #7396 -->
<template>
  <MyComponent
    :attr="\`loooooooooooooooooooooooooooooooooooooooooooooooooooooooooooog \${foo} template literal value\`"
  />
</template>
<template>
  <MyComponent
    :attr="
      \`\${first} loooooooooooooooooooooooooooooooooooooooooooooooooooooooooooog \${template} \${literal}\` +
      \`\${second} loooooooooooooooooooooooooooooooooooooooooooooooooooooooooooog \${template} \${literal}\`
    "
  />
</template>
<template>
  <MyComponent
    :attr="\`loooooooooooooooooooooooooooooooooooooooooooooooooooooooooooog \${
      foo + bar
    } template literal value\`"
  />
</template>
<template>
  <MyComponent
    :src="'loooooooooooooooooooooooooooooooooooooooooooooooooooooooooooog literal string value'"
  />
</template>
<template>
  <MyComponent
    :src="
      'first loooooooooooooooooooooooooooooooooooooooooooooooooooooooooooog' +
      'second loooooooooooooooooooooooooooooooooooooooooooooooooooooooooooog'
    "
  />
</template>
<template>
  <MyComponent
    :src="
      100000000000000000000000000000000000000000000000000000000000000000000000000
    "
  />
</template>

================================================================================
`;

exports[`filter.vue - {"semi":false} format 1`] = `
====================================options=====================================
parsers: ["vue"]
printWidth: 80
semi: false
                                                                                | printWidth
=====================================input======================================
<!-- vue filters are only allowed in v-bind and interpolation -->
<template>
  <div class="allowed">{{value | thisIsARealSuperLongFilterPipe("arg1", arg2) | anotherPipeLongJustForFun | pipeTheThird}}</div>
  <div class="allowed" v-bind:something='value | thisIsARealSuperLongFilterPipe("arg1", arg2) | anotherPipeLongJustForFun | pipeTheThird'></div>
  <div class="allowed" :class='value | thisIsARealSuperLongFilterPipe("arg1", arg2) | anotherPipeLongJustForFun | pipeTheThird'></div>
  <div class="not-allowed" v-if='value | thisIsARealSuperLongFilterPipe("arg1", arg2) | anotherPipeLongJustForFun | pipeTheThird'></div>
</template>

=====================================output=====================================
<!-- vue filters are only allowed in v-bind and interpolation -->
<template>
  <div class="allowed">
    {{
      value
        | thisIsARealSuperLongFilterPipe("arg1", arg2)
        | anotherPipeLongJustForFun
        | pipeTheThird
    }}
  </div>
  <div
    class="allowed"
    v-bind:something="
      value
        | thisIsARealSuperLongFilterPipe('arg1', arg2)
        | anotherPipeLongJustForFun
        | pipeTheThird
    "
  ></div>
  <div
    class="allowed"
    :class="
      value
        | thisIsARealSuperLongFilterPipe('arg1', arg2)
        | anotherPipeLongJustForFun
        | pipeTheThird
    "
  ></div>
  <div
    class="not-allowed"
    v-if="
      value |
        thisIsARealSuperLongFilterPipe('arg1', arg2) |
        anotherPipeLongJustForFun |
        pipeTheThird
    "
  ></div>
</template>

================================================================================
`;

exports[`filter.vue - {"trailingComma":"none"} format 1`] = `
====================================options=====================================
parsers: ["vue"]
printWidth: 80
trailingComma: "none"
                                                                                | printWidth
=====================================input======================================
<!-- vue filters are only allowed in v-bind and interpolation -->
<template>
  <div class="allowed">{{value | thisIsARealSuperLongFilterPipe("arg1", arg2) | anotherPipeLongJustForFun | pipeTheThird}}</div>
  <div class="allowed" v-bind:something='value | thisIsARealSuperLongFilterPipe("arg1", arg2) | anotherPipeLongJustForFun | pipeTheThird'></div>
  <div class="allowed" :class='value | thisIsARealSuperLongFilterPipe("arg1", arg2) | anotherPipeLongJustForFun | pipeTheThird'></div>
  <div class="not-allowed" v-if='value | thisIsARealSuperLongFilterPipe("arg1", arg2) | anotherPipeLongJustForFun | pipeTheThird'></div>
</template>

=====================================output=====================================
<!-- vue filters are only allowed in v-bind and interpolation -->
<template>
  <div class="allowed">
    {{
      value
        | thisIsARealSuperLongFilterPipe("arg1", arg2)
        | anotherPipeLongJustForFun
        | pipeTheThird
    }}
  </div>
  <div
    class="allowed"
    v-bind:something="
      value
        | thisIsARealSuperLongFilterPipe('arg1', arg2)
        | anotherPipeLongJustForFun
        | pipeTheThird
    "
  ></div>
  <div
    class="allowed"
    :class="
      value
        | thisIsARealSuperLongFilterPipe('arg1', arg2)
        | anotherPipeLongJustForFun
        | pipeTheThird
    "
  ></div>
  <div
    class="not-allowed"
    v-if="
      value |
        thisIsARealSuperLongFilterPipe('arg1', arg2) |
        anotherPipeLongJustForFun |
        pipeTheThird
    "
  ></div>
</template>

================================================================================
`;

exports[`filter.vue format 1`] = `
====================================options=====================================
parsers: ["vue"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
<!-- vue filters are only allowed in v-bind and interpolation -->
<template>
  <div class="allowed">{{value | thisIsARealSuperLongFilterPipe("arg1", arg2) | anotherPipeLongJustForFun | pipeTheThird}}</div>
  <div class="allowed" v-bind:something='value | thisIsARealSuperLongFilterPipe("arg1", arg2) | anotherPipeLongJustForFun | pipeTheThird'></div>
  <div class="allowed" :class='value | thisIsARealSuperLongFilterPipe("arg1", arg2) | anotherPipeLongJustForFun | pipeTheThird'></div>
  <div class="not-allowed" v-if='value | thisIsARealSuperLongFilterPipe("arg1", arg2) | anotherPipeLongJustForFun | pipeTheThird'></div>
</template>

=====================================output=====================================
<!-- vue filters are only allowed in v-bind and interpolation -->
<template>
  <div class="allowed">
    {{
      value
        | thisIsARealSuperLongFilterPipe("arg1", arg2)
        | anotherPipeLongJustForFun
        | pipeTheThird
    }}
  </div>
  <div
    class="allowed"
    v-bind:something="
      value
        | thisIsARealSuperLongFilterPipe('arg1', arg2)
        | anotherPipeLongJustForFun
        | pipeTheThird
    "
  ></div>
  <div
    class="allowed"
    :class="
      value
        | thisIsARealSuperLongFilterPipe('arg1', arg2)
        | anotherPipeLongJustForFun
        | pipeTheThird
    "
  ></div>
  <div
    class="not-allowed"
    v-if="
      value |
        thisIsARealSuperLongFilterPipe('arg1', arg2) |
        anotherPipeLongJustForFun |
        pipeTheThird
    "
  ></div>
</template>

================================================================================
`;

exports[`interpolations.vue - {"semi":false} format 1`] = `
====================================options=====================================
parsers: ["vue"]
printWidth: 80
semi: false
                                                                                | printWidth
=====================================input======================================
<template>
<div>Fuga magnam facilis. Voluptatem quaerat porro.{{


x => {
    const hello = 'world'
    return hello;
}



}} Magni consectetur in et molestias neque esse voluptatibus voluptas. {{  
    
    
    some_variable 



}} Eum quia nihil nulla esse. Dolorem asperiores vero est error {{

                    preserve

                    invalid
                    
                    interpolation

}} reprehenderit voluptates minus {{console.log(  short_interpolation )}} nemo.</div>

<script type="text/jsx">
  export default {
    render (h) {
      return (
        <ul
          class={{
            'a': b,
            'c': d,
            "e": f
          }}
        >
          { this.xyz }
        </ul>
    )
  };
</script>

<div>
  1234567890123456789012345678901234567890123456789012345678901234567890{{ something }}1234567890
</div>
<div>
  1234567890123456789012345678901234567890123456789012345678901234567890 {{ something }}1234567890
</div>
<div>
  1234567890123456789012345678901234567890123456789012345678901234567890{{ something }} 1234567890
</div>
<div>
  1234567890123456789012345678901234567890123456789012345678901234567890 {{ something }} 1234567890
</div>
</template>

=====================================output=====================================
<template>
  <div>
    Fuga magnam facilis. Voluptatem quaerat porro.{{
      (x) => {
        const hello = "world"
        return hello
      }
    }}
    Magni consectetur in et molestias neque esse voluptatibus voluptas.
    {{ some_variable }} Eum quia nihil nulla esse. Dolorem asperiores vero est
    error
    {{

                    preserve

                    invalid
                    
                    interpolation

    }}
    reprehenderit voluptates minus {{ console.log(short_interpolation) }} nemo.
  </div>

  <script type="text/jsx">
    export default {
      render (h) {
        return (
          <ul
            class={{
              'a': b,
              'c': d,
              "e": f
            }}
          >
            { this.xyz }
          </ul>
      )
    };
  </script>

  <div>
    1234567890123456789012345678901234567890123456789012345678901234567890{{
      something
    }}1234567890
  </div>
  <div>
    1234567890123456789012345678901234567890123456789012345678901234567890
    {{ something }}1234567890
  </div>
  <div>
    1234567890123456789012345678901234567890123456789012345678901234567890{{
      something
    }}
    1234567890
  </div>
  <div>
    1234567890123456789012345678901234567890123456789012345678901234567890
    {{ something }} 1234567890
  </div>
</template>

================================================================================
`;

exports[`interpolations.vue - {"trailingComma":"none"} format 1`] = `
====================================options=====================================
parsers: ["vue"]
printWidth: 80
trailingComma: "none"
                                                                                | printWidth
=====================================input======================================
<template>
<div>Fuga magnam facilis. Voluptatem quaerat porro.{{


x => {
    const hello = 'world'
    return hello;
}



}} Magni consectetur in et molestias neque esse voluptatibus voluptas. {{  
    
    
    some_variable 



}} Eum quia nihil nulla esse. Dolorem asperiores vero est error {{

                    preserve

                    invalid
                    
                    interpolation

}} reprehenderit voluptates minus {{console.log(  short_interpolation )}} nemo.</div>

<script type="text/jsx">
  export default {
    render (h) {
      return (
        <ul
          class={{
            'a': b,
            'c': d,
            "e": f
          }}
        >
          { this.xyz }
        </ul>
    )
  };
</script>

<div>
  1234567890123456789012345678901234567890123456789012345678901234567890{{ something }}1234567890
</div>
<div>
  1234567890123456789012345678901234567890123456789012345678901234567890 {{ something }}1234567890
</div>
<div>
  1234567890123456789012345678901234567890123456789012345678901234567890{{ something }} 1234567890
</div>
<div>
  1234567890123456789012345678901234567890123456789012345678901234567890 {{ something }} 1234567890
</div>
</template>

=====================================output=====================================
<template>
  <div>
    Fuga magnam facilis. Voluptatem quaerat porro.{{
      (x) => {
        const hello = "world";
        return hello;
      }
    }}
    Magni consectetur in et molestias neque esse voluptatibus voluptas.
    {{ some_variable }} Eum quia nihil nulla esse. Dolorem asperiores vero est
    error
    {{

                    preserve

                    invalid
                    
                    interpolation

    }}
    reprehenderit voluptates minus {{ console.log(short_interpolation) }} nemo.
  </div>

  <script type="text/jsx">
    export default {
      render (h) {
        return (
          <ul
            class={{
              'a': b,
              'c': d,
              "e": f
            }}
          >
            { this.xyz }
          </ul>
      )
    };
  </script>

  <div>
    1234567890123456789012345678901234567890123456789012345678901234567890{{
      something
    }}1234567890
  </div>
  <div>
    1234567890123456789012345678901234567890123456789012345678901234567890
    {{ something }}1234567890
  </div>
  <div>
    1234567890123456789012345678901234567890123456789012345678901234567890{{
      something
    }}
    1234567890
  </div>
  <div>
    1234567890123456789012345678901234567890123456789012345678901234567890
    {{ something }} 1234567890
  </div>
</template>

================================================================================
`;

exports[`interpolations.vue format 1`] = `
====================================options=====================================
parsers: ["vue"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
<template>
<div>Fuga magnam facilis. Voluptatem quaerat porro.{{


x => {
    const hello = 'world'
    return hello;
}



}} Magni consectetur in et molestias neque esse voluptatibus voluptas. {{  
    
    
    some_variable 



}} Eum quia nihil nulla esse. Dolorem asperiores vero est error {{

                    preserve

                    invalid
                    
                    interpolation

}} reprehenderit voluptates minus {{console.log(  short_interpolation )}} nemo.</div>

<script type="text/jsx">
  export default {
    render (h) {
      return (
        <ul
          class={{
            'a': b,
            'c': d,
            "e": f
          }}
        >
          { this.xyz }
        </ul>
    )
  };
</script>

<div>
  1234567890123456789012345678901234567890123456789012345678901234567890{{ something }}1234567890
</div>
<div>
  1234567890123456789012345678901234567890123456789012345678901234567890 {{ something }}1234567890
</div>
<div>
  1234567890123456789012345678901234567890123456789012345678901234567890{{ something }} 1234567890
</div>
<div>
  1234567890123456789012345678901234567890123456789012345678901234567890 {{ something }} 1234567890
</div>
</template>

=====================================output=====================================
<template>
  <div>
    Fuga magnam facilis. Voluptatem quaerat porro.{{
      (x) => {
        const hello = "world";
        return hello;
      }
    }}
    Magni consectetur in et molestias neque esse voluptatibus voluptas.
    {{ some_variable }} Eum quia nihil nulla esse. Dolorem asperiores vero est
    error
    {{

                    preserve

                    invalid
                    
                    interpolation

    }}
    reprehenderit voluptates minus {{ console.log(short_interpolation) }} nemo.
  </div>

  <script type="text/jsx">
    export default {
      render (h) {
        return (
          <ul
            class={{
              'a': b,
              'c': d,
              "e": f
            }}
          >
            { this.xyz }
          </ul>
      )
    };
  </script>

  <div>
    1234567890123456789012345678901234567890123456789012345678901234567890{{
      something
    }}1234567890
  </div>
  <div>
    1234567890123456789012345678901234567890123456789012345678901234567890
    {{ something }}1234567890
  </div>
  <div>
    1234567890123456789012345678901234567890123456789012345678901234567890{{
      something
    }}
    1234567890
  </div>
  <div>
    1234567890123456789012345678901234567890123456789012345678901234567890
    {{ something }} 1234567890
  </div>
</template>

================================================================================
`;

exports[`multiple-template1.vue - {"semi":false} format 1`] = `
====================================options=====================================
parsers: ["vue"]
printWidth: 80
semi: false
                                                                                | printWidth
=====================================input======================================
<template></template>
<template lang=unknown>
<a>
</template>
cloned.

=====================================output=====================================
<template></template>
<template lang="unknown">
<a>
</template>
cloned.

================================================================================
`;

exports[`multiple-template1.vue - {"trailingComma":"none"} format 1`] = `
====================================options=====================================
parsers: ["vue"]
printWidth: 80
trailingComma: "none"
                                                                                | printWidth
=====================================input======================================
<template></template>
<template lang=unknown>
<a>
</template>
cloned.

=====================================output=====================================
<template></template>
<template lang="unknown">
<a>
</template>
cloned.

================================================================================
`;

exports[`multiple-template1.vue format 1`] = `
====================================options=====================================
parsers: ["vue"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
<template></template>
<template lang=unknown>
<a>
</template>
cloned.

=====================================output=====================================
<template></template>
<template lang="unknown">
<a>
</template>
cloned.

================================================================================
`;

exports[`multiple-template2.vue - {"semi":false} format 1`] = `
====================================options=====================================
parsers: ["vue"]
printWidth: 80
semi: false
                                                                                | printWidth
=====================================input======================================
<template></template>
<template lang=unknown>
<a>
</template>
<template></template >

=====================================output=====================================
<template></template>
<template lang="unknown">
<a>
</template>
<template></template>

================================================================================
`;

exports[`multiple-template2.vue - {"trailingComma":"none"} format 1`] = `
====================================options=====================================
parsers: ["vue"]
printWidth: 80
trailingComma: "none"
                                                                                | printWidth
=====================================input======================================
<template></template>
<template lang=unknown>
<a>
</template>
<template></template >

=====================================output=====================================
<template></template>
<template lang="unknown">
<a>
</template>
<template></template>

================================================================================
`;

exports[`multiple-template2.vue format 1`] = `
====================================options=====================================
parsers: ["vue"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
<template></template>
<template lang=unknown>
<a>
</template>
<template></template >

=====================================output=====================================
<template></template>
<template lang="unknown">
<a>
</template>
<template></template>

================================================================================
`;

exports[`nested-template.vue - {"semi":false} format 1`] = `
====================================options=====================================
parsers: ["vue"]
printWidth: 80
semi: false
                                                                                | printWidth
=====================================input======================================
<template>
  <div>
      <template>
        <div></div>
      </template>
      <div>
               Do not go out, you'll got yourself cloned by bad bad people.
      </div>
  </div>
</template>

=====================================output=====================================
<template>
  <div>
    <template>
      <div></div>
    </template>
    <div>Do not go out, you'll got yourself cloned by bad bad people.</div>
  </div>
</template>

================================================================================
`;

exports[`nested-template.vue - {"trailingComma":"none"} format 1`] = `
====================================options=====================================
parsers: ["vue"]
printWidth: 80
trailingComma: "none"
                                                                                | printWidth
=====================================input======================================
<template>
  <div>
      <template>
        <div></div>
      </template>
      <div>
               Do not go out, you'll got yourself cloned by bad bad people.
      </div>
  </div>
</template>

=====================================output=====================================
<template>
  <div>
    <template>
      <div></div>
    </template>
    <div>Do not go out, you'll got yourself cloned by bad bad people.</div>
  </div>
</template>

================================================================================
`;

exports[`nested-template.vue format 1`] = `
====================================options=====================================
parsers: ["vue"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
<template>
  <div>
      <template>
        <div></div>
      </template>
      <div>
               Do not go out, you'll got yourself cloned by bad bad people.
      </div>
  </div>
</template>

=====================================output=====================================
<template>
  <div>
    <template>
      <div></div>
    </template>
    <div>Do not go out, you'll got yourself cloned by bad bad people.</div>
  </div>
</template>

================================================================================
`;

exports[`one-line-template1.vue - {"semi":false} format 1`] = `
====================================options=====================================
parsers: ["vue"]
printWidth: 80
semi: false
                                                                                | printWidth
=====================================input======================================
<template><p>foo</p><div>foo</div></template>

=====================================output=====================================
<template>
  <p>foo</p>
  <div>foo</div>
</template>

================================================================================
`;

exports[`one-line-template1.vue - {"trailingComma":"none"} format 1`] = `
====================================options=====================================
parsers: ["vue"]
printWidth: 80
trailingComma: "none"
                                                                                | printWidth
=====================================input======================================
<template><p>foo</p><div>foo</div></template>

=====================================output=====================================
<template>
  <p>foo</p>
  <div>foo</div>
</template>

================================================================================
`;

exports[`one-line-template1.vue format 1`] = `
====================================options=====================================
parsers: ["vue"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
<template><p>foo</p><div>foo</div></template>

=====================================output=====================================
<template>
  <p>foo</p>
  <div>foo</div>
</template>

================================================================================
`;

exports[`one-line-template2.vue - {"semi":false} format 1`] = `
====================================options=====================================
parsers: ["vue"]
printWidth: 80
semi: false
                                                                                | printWidth
=====================================input======================================
<template><div><p>foo</p><div>bar</div></div></template>

=====================================output=====================================
<template>
  <div>
    <p>foo</p>
    <div>bar</div>
  </div>
</template>

================================================================================
`;

exports[`one-line-template2.vue - {"trailingComma":"none"} format 1`] = `
====================================options=====================================
parsers: ["vue"]
printWidth: 80
trailingComma: "none"
                                                                                | printWidth
=====================================input======================================
<template><div><p>foo</p><div>bar</div></div></template>

=====================================output=====================================
<template>
  <div>
    <p>foo</p>
    <div>bar</div>
  </div>
</template>

================================================================================
`;

exports[`one-line-template2.vue format 1`] = `
====================================options=====================================
parsers: ["vue"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
<template><div><p>foo</p><div>bar</div></div></template>

=====================================output=====================================
<template>
  <div>
    <p>foo</p>
    <div>bar</div>
  </div>
</template>

================================================================================
`;

exports[`pre-child.vue - {"semi":false} format 1`] = `
====================================options=====================================
parsers: ["vue"]
printWidth: 80
semi: false
                                                                                | printWidth
=====================================input======================================
<template>
<!-- copied from https://github.com/gitlabhq/gitlabhq/blob/master/app/assets/javascripts/ide/components/jobs/detail.vue -->
<pre
  ref="buildTrace"
  class="build-trace mb-0 h-100"
  @scroll="scrollBuildLog"
>
  <code
    v-show="!detailJob.isLoading"
    class="bash"
    v-html="jobOutput"
  >
  </code>
  <div
    v-show="detailJob.isLoading"
    class="build-loader-animation"
  >
    <div class="dot"></div>
    <div class="dot"></div>
    <div class="dot"></div>
  </div>
</pre>
</template>

<!-- copied from https://github.com/gitlabhq/gitlabhq/blob/master/app/assets/javascripts/vue_shared/components/code_block.vue -->
<template>
  <pre class="code-block rounded">
    <code class="d-block">{{ code }}</code>
  </pre>
</template>

<template>
<pre class='woot'>
  {{ stuff }}
  </pre>
</template>

<template>
<pre class='woot'>
  123{{ wqeqwwqwqweqweqwewwq || wqeqwwqwqweqweqwewwq || wqeqwwqwqweqweqwewwq || wqeqwwqwqweqweqwewwq }}123
  123{{ wqeqwwqwqweqweqwewwq || wqeqwwqwqweqweqwewwq || wqeqwwqwqweqweqwewwq || wqeqwwqwqweqweqwewwq }}123
    </pre>
</template>

=====================================output=====================================
<template>
  <!-- copied from https://github.com/gitlabhq/gitlabhq/blob/master/app/assets/javascripts/ide/components/jobs/detail.vue -->
  <pre ref="buildTrace" class="build-trace mb-0 h-100" @scroll="scrollBuildLog">
  <code
    v-show="!detailJob.isLoading"
    class="bash"
    v-html="jobOutput"
  >
  </code>
  <div
    v-show="detailJob.isLoading"
    class="build-loader-animation"
  >
    <div class="dot"></div>
    <div class="dot"></div>
    <div class="dot"></div>
  </div>
</pre>
</template>

<!-- copied from https://github.com/gitlabhq/gitlabhq/blob/master/app/assets/javascripts/vue_shared/components/code_block.vue -->
<template>
  <pre class="code-block rounded">
    <code class="d-block">{{ code }}</code>
  </pre>
</template>

<template>
  <pre class="woot">
  {{ stuff }}
  </pre>
</template>

<template>
  <pre class="woot">
  123{{
      wqeqwwqwqweqweqwewwq ||
      wqeqwwqwqweqweqwewwq ||
      wqeqwwqwqweqweqwewwq ||
      wqeqwwqwqweqweqwewwq
    }}123
  123{{
      wqeqwwqwqweqweqwewwq ||
      wqeqwwqwqweqweqwewwq ||
      wqeqwwqwqweqweqwewwq ||
      wqeqwwqwqweqweqwewwq
    }}123
    </pre
  >
</template>

================================================================================
`;

exports[`pre-child.vue - {"trailingComma":"none"} format 1`] = `
====================================options=====================================
parsers: ["vue"]
printWidth: 80
trailingComma: "none"
                                                                                | printWidth
=====================================input======================================
<template>
<!-- copied from https://github.com/gitlabhq/gitlabhq/blob/master/app/assets/javascripts/ide/components/jobs/detail.vue -->
<pre
  ref="buildTrace"
  class="build-trace mb-0 h-100"
  @scroll="scrollBuildLog"
>
  <code
    v-show="!detailJob.isLoading"
    class="bash"
    v-html="jobOutput"
  >
  </code>
  <div
    v-show="detailJob.isLoading"
    class="build-loader-animation"
  >
    <div class="dot"></div>
    <div class="dot"></div>
    <div class="dot"></div>
  </div>
</pre>
</template>

<!-- copied from https://github.com/gitlabhq/gitlabhq/blob/master/app/assets/javascripts/vue_shared/components/code_block.vue -->
<template>
  <pre class="code-block rounded">
    <code class="d-block">{{ code }}</code>
  </pre>
</template>

<template>
<pre class='woot'>
  {{ stuff }}
  </pre>
</template>

<template>
<pre class='woot'>
  123{{ wqeqwwqwqweqweqwewwq || wqeqwwqwqweqweqwewwq || wqeqwwqwqweqweqwewwq || wqeqwwqwqweqweqwewwq }}123
  123{{ wqeqwwqwqweqweqwewwq || wqeqwwqwqweqweqwewwq || wqeqwwqwqweqweqwewwq || wqeqwwqwqweqweqwewwq }}123
    </pre>
</template>

=====================================output=====================================
<template>
  <!-- copied from https://github.com/gitlabhq/gitlabhq/blob/master/app/assets/javascripts/ide/components/jobs/detail.vue -->
  <pre ref="buildTrace" class="build-trace mb-0 h-100" @scroll="scrollBuildLog">
  <code
    v-show="!detailJob.isLoading"
    class="bash"
    v-html="jobOutput"
  >
  </code>
  <div
    v-show="detailJob.isLoading"
    class="build-loader-animation"
  >
    <div class="dot"></div>
    <div class="dot"></div>
    <div class="dot"></div>
  </div>
</pre>
</template>

<!-- copied from https://github.com/gitlabhq/gitlabhq/blob/master/app/assets/javascripts/vue_shared/components/code_block.vue -->
<template>
  <pre class="code-block rounded">
    <code class="d-block">{{ code }}</code>
  </pre>
</template>

<template>
  <pre class="woot">
  {{ stuff }}
  </pre>
</template>

<template>
  <pre class="woot">
  123{{
      wqeqwwqwqweqweqwewwq ||
      wqeqwwqwqweqweqwewwq ||
      wqeqwwqwqweqweqwewwq ||
      wqeqwwqwqweqweqwewwq
    }}123
  123{{
      wqeqwwqwqweqweqwewwq ||
      wqeqwwqwqweqweqwewwq ||
      wqeqwwqwqweqweqwewwq ||
      wqeqwwqwqweqweqwewwq
    }}123
    </pre
  >
</template>

================================================================================
`;

exports[`pre-child.vue format 1`] = `
====================================options=====================================
parsers: ["vue"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
<template>
<!-- copied from https://github.com/gitlabhq/gitlabhq/blob/master/app/assets/javascripts/ide/components/jobs/detail.vue -->
<pre
  ref="buildTrace"
  class="build-trace mb-0 h-100"
  @scroll="scrollBuildLog"
>
  <code
    v-show="!detailJob.isLoading"
    class="bash"
    v-html="jobOutput"
  >
  </code>
  <div
    v-show="detailJob.isLoading"
    class="build-loader-animation"
  >
    <div class="dot"></div>
    <div class="dot"></div>
    <div class="dot"></div>
  </div>
</pre>
</template>

<!-- copied from https://github.com/gitlabhq/gitlabhq/blob/master/app/assets/javascripts/vue_shared/components/code_block.vue -->
<template>
  <pre class="code-block rounded">
    <code class="d-block">{{ code }}</code>
  </pre>
</template>

<template>
<pre class='woot'>
  {{ stuff }}
  </pre>
</template>

<template>
<pre class='woot'>
  123{{ wqeqwwqwqweqweqwewwq || wqeqwwqwqweqweqwewwq || wqeqwwqwqweqweqwewwq || wqeqwwqwqweqweqwewwq }}123
  123{{ wqeqwwqwqweqweqwewwq || wqeqwwqwqweqweqwewwq || wqeqwwqwqweqweqwewwq || wqeqwwqwqweqweqwewwq }}123
    </pre>
</template>

=====================================output=====================================
<template>
  <!-- copied from https://github.com/gitlabhq/gitlabhq/blob/master/app/assets/javascripts/ide/components/jobs/detail.vue -->
  <pre ref="buildTrace" class="build-trace mb-0 h-100" @scroll="scrollBuildLog">
  <code
    v-show="!detailJob.isLoading"
    class="bash"
    v-html="jobOutput"
  >
  </code>
  <div
    v-show="detailJob.isLoading"
    class="build-loader-animation"
  >
    <div class="dot"></div>
    <div class="dot"></div>
    <div class="dot"></div>
  </div>
</pre>
</template>

<!-- copied from https://github.com/gitlabhq/gitlabhq/blob/master/app/assets/javascripts/vue_shared/components/code_block.vue -->
<template>
  <pre class="code-block rounded">
    <code class="d-block">{{ code }}</code>
  </pre>
</template>

<template>
  <pre class="woot">
  {{ stuff }}
  </pre>
</template>

<template>
  <pre class="woot">
  123{{
      wqeqwwqwqweqweqwewwq ||
      wqeqwwqwqweqweqwewwq ||
      wqeqwwqwqweqweqwewwq ||
      wqeqwwqwqweqweqwewwq
    }}123
  123{{
      wqeqwwqwqweqweqwewwq ||
      wqeqwwqwqweqweqwewwq ||
      wqeqwwqwqweqweqwewwq ||
      wqeqwwqwqweqweqwewwq
    }}123
    </pre
  >
</template>

================================================================================
`;

exports[`script_src.vue - {"semi":false} format 1`] = `
====================================options=====================================
parsers: ["vue"]
printWidth: 80
semi: false
                                                                                | printWidth
=====================================input======================================
<script src="https://www.gstatic.com/firebasejs/4.10.1/firebase.js"></script>
<script src="https://www.gstatic.com/firebasejs/4.10.1/firebase-firestore.js"></script>

=====================================output=====================================
<script src="https://www.gstatic.com/firebasejs/4.10.1/firebase.js"></script>
<script src="https://www.gstatic.com/firebasejs/4.10.1/firebase-firestore.js"></script>

================================================================================
`;

exports[`script_src.vue - {"trailingComma":"none"} format 1`] = `
====================================options=====================================
parsers: ["vue"]
printWidth: 80
trailingComma: "none"
                                                                                | printWidth
=====================================input======================================
<script src="https://www.gstatic.com/firebasejs/4.10.1/firebase.js"></script>
<script src="https://www.gstatic.com/firebasejs/4.10.1/firebase-firestore.js"></script>

=====================================output=====================================
<script src="https://www.gstatic.com/firebasejs/4.10.1/firebase.js"></script>
<script src="https://www.gstatic.com/firebasejs/4.10.1/firebase-firestore.js"></script>

================================================================================
`;

exports[`script_src.vue format 1`] = `
====================================options=====================================
parsers: ["vue"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
<script src="https://www.gstatic.com/firebasejs/4.10.1/firebase.js"></script>
<script src="https://www.gstatic.com/firebasejs/4.10.1/firebase-firestore.js"></script>

=====================================output=====================================
<script src="https://www.gstatic.com/firebasejs/4.10.1/firebase.js"></script>
<script src="https://www.gstatic.com/firebasejs/4.10.1/firebase-firestore.js"></script>

================================================================================
`;

exports[`self_closing.vue - {"semi":false} format 1`] = `
====================================options=====================================
parsers: ["vue"]
printWidth: 80
semi: false
                                                                                | printWidth
=====================================input======================================
<template>
  <div />
</template>

<script>
foo( )
</script>

<template>
<div class="container">
  <HomeH />
  <HomeA />
  <HomeX />
  <HomeY />
</div>
</template>

<template>
  <Foo><Bar
         attr
                                     /></Foo>
</template>

=====================================output=====================================
<template>
  <div />
</template>

<script>
foo()
</script>

<template>
  <div class="container">
    <HomeH />
    <HomeA />
    <HomeX />
    <HomeY />
  </div>
</template>

<template>
  <Foo><Bar attr /></Foo>
</template>

================================================================================
`;

exports[`self_closing.vue - {"trailingComma":"none"} format 1`] = `
====================================options=====================================
parsers: ["vue"]
printWidth: 80
trailingComma: "none"
                                                                                | printWidth
=====================================input======================================
<template>
  <div />
</template>

<script>
foo( )
</script>

<template>
<div class="container">
  <HomeH />
  <HomeA />
  <HomeX />
  <HomeY />
</div>
</template>

<template>
  <Foo><Bar
         attr
                                     /></Foo>
</template>

=====================================output=====================================
<template>
  <div />
</template>

<script>
foo();
</script>

<template>
  <div class="container">
    <HomeH />
    <HomeA />
    <HomeX />
    <HomeY />
  </div>
</template>

<template>
  <Foo><Bar attr /></Foo>
</template>

================================================================================
`;

exports[`self_closing.vue format 1`] = `
====================================options=====================================
parsers: ["vue"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
<template>
  <div />
</template>

<script>
foo( )
</script>

<template>
<div class="container">
  <HomeH />
  <HomeA />
  <HomeX />
  <HomeY />
</div>
</template>

<template>
  <Foo><Bar
         attr
                                     /></Foo>
</template>

=====================================output=====================================
<template>
  <div />
</template>

<script>
foo();
</script>

<template>
  <div class="container">
    <HomeH />
    <HomeA />
    <HomeX />
    <HomeY />
  </div>
</template>

<template>
  <Foo><Bar attr /></Foo>
</template>

================================================================================
`;

exports[`self_closing_style.vue - {"semi":false} format 1`] = `
====================================options=====================================
parsers: ["vue"]
printWidth: 80
semi: false
                                                                                | printWidth
=====================================input======================================
<template>
  <span :class="$style.root"><slot /></span>
</template>

<style src="./style.css" module />

=====================================output=====================================
<template>
  <span :class="$style.root"><slot /></span>
</template>

<style src="./style.css" module />

================================================================================
`;

exports[`self_closing_style.vue - {"trailingComma":"none"} format 1`] = `
====================================options=====================================
parsers: ["vue"]
printWidth: 80
trailingComma: "none"
                                                                                | printWidth
=====================================input======================================
<template>
  <span :class="$style.root"><slot /></span>
</template>

<style src="./style.css" module />

=====================================output=====================================
<template>
  <span :class="$style.root"><slot /></span>
</template>

<style src="./style.css" module />

================================================================================
`;

exports[`self_closing_style.vue format 1`] = `
====================================options=====================================
parsers: ["vue"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
<template>
  <span :class="$style.root"><slot /></span>
</template>

<style src="./style.css" module />

=====================================output=====================================
<template>
  <span :class="$style.root"><slot /></span>
</template>

<style src="./style.css" module />

================================================================================
`;

exports[`style.vue - {"semi":false} format 1`] = `
====================================options=====================================
parsers: ["vue"]
printWidth: 80
semi: false
                                                                                | printWidth
=====================================input======================================
<script>
</script>

<style>
#foo1{ color: #f00;
}
</style>
<style scoped>
#foo2{ color: #f00;
}
</style>

<style lang="css">
#foo3{ color: #f00;
}
</style>
<style lang="css" scoped>
#foo4{ color: #f00;
}
</style>

<style lang="less">
#foo5{ color: #f00;
}
</style>
<style lang="less" scoped>
#foo6{ 
         @color: #f00;
  color: @color;
}
</style>


<style lang="scss">
#foo8{ 
         $color: #f00;
  color: $color;
}
</style>
<style lang="scss" scoped>
#foo8{ 
         $color: #f00;
  color: $color;
}
</style>


=====================================output=====================================
<script></script>

<style>
#foo1 {
  color: #f00;
}
</style>
<style scoped>
#foo2 {
  color: #f00;
}
</style>

<style lang="css">
#foo3 {
  color: #f00;
}
</style>
<style lang="css" scoped>
#foo4 {
  color: #f00;
}
</style>

<style lang="less">
#foo5 {
  color: #f00;
}
</style>
<style lang="less" scoped>
#foo6 {
  @color: #f00;
  color: @color;
}
</style>

<style lang="scss">
#foo8 {
  $color: #f00;
  color: $color;
}
</style>
<style lang="scss" scoped>
#foo8 {
  $color: #f00;
  color: $color;
}
</style>

================================================================================
`;

exports[`style.vue - {"trailingComma":"none"} format 1`] = `
====================================options=====================================
parsers: ["vue"]
printWidth: 80
trailingComma: "none"
                                                                                | printWidth
=====================================input======================================
<script>
</script>

<style>
#foo1{ color: #f00;
}
</style>
<style scoped>
#foo2{ color: #f00;
}
</style>

<style lang="css">
#foo3{ color: #f00;
}
</style>
<style lang="css" scoped>
#foo4{ color: #f00;
}
</style>

<style lang="less">
#foo5{ color: #f00;
}
</style>
<style lang="less" scoped>
#foo6{ 
         @color: #f00;
  color: @color;
}
</style>


<style lang="scss">
#foo8{ 
         $color: #f00;
  color: $color;
}
</style>
<style lang="scss" scoped>
#foo8{ 
         $color: #f00;
  color: $color;
}
</style>


=====================================output=====================================
<script></script>

<style>
#foo1 {
  color: #f00;
}
</style>
<style scoped>
#foo2 {
  color: #f00;
}
</style>

<style lang="css">
#foo3 {
  color: #f00;
}
</style>
<style lang="css" scoped>
#foo4 {
  color: #f00;
}
</style>

<style lang="less">
#foo5 {
  color: #f00;
}
</style>
<style lang="less" scoped>
#foo6 {
  @color: #f00;
  color: @color;
}
</style>

<style lang="scss">
#foo8 {
  $color: #f00;
  color: $color;
}
</style>
<style lang="scss" scoped>
#foo8 {
  $color: #f00;
  color: $color;
}
</style>

================================================================================
`;

exports[`style.vue format 1`] = `
====================================options=====================================
parsers: ["vue"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
<script>
</script>

<style>
#foo1{ color: #f00;
}
</style>
<style scoped>
#foo2{ color: #f00;
}
</style>

<style lang="css">
#foo3{ color: #f00;
}
</style>
<style lang="css" scoped>
#foo4{ color: #f00;
}
</style>

<style lang="less">
#foo5{ color: #f00;
}
</style>
<style lang="less" scoped>
#foo6{ 
         @color: #f00;
  color: @color;
}
</style>


<style lang="scss">
#foo8{ 
         $color: #f00;
  color: $color;
}
</style>
<style lang="scss" scoped>
#foo8{ 
         $color: #f00;
  color: $color;
}
</style>


=====================================output=====================================
<script></script>

<style>
#foo1 {
  color: #f00;
}
</style>
<style scoped>
#foo2 {
  color: #f00;
}
</style>

<style lang="css">
#foo3 {
  color: #f00;
}
</style>
<style lang="css" scoped>
#foo4 {
  color: #f00;
}
</style>

<style lang="less">
#foo5 {
  color: #f00;
}
</style>
<style lang="less" scoped>
#foo6 {
  @color: #f00;
  color: @color;
}
</style>

<style lang="scss">
#foo8 {
  $color: #f00;
  color: $color;
}
</style>
<style lang="scss" scoped>
#foo8 {
  $color: #f00;
  color: $color;
}
</style>

================================================================================
`;

exports[`tag-name.vue - {"semi":false} format 1`] = `
====================================options=====================================
parsers: ["vue"]
printWidth: 80
semi: false
                                                                                | printWidth
=====================================input======================================
<template>
  <Table></Table>
</template>

=====================================output=====================================
<template>
  <Table></Table>
</template>

================================================================================
`;

exports[`tag-name.vue - {"trailingComma":"none"} format 1`] = `
====================================options=====================================
parsers: ["vue"]
printWidth: 80
trailingComma: "none"
                                                                                | printWidth
=====================================input======================================
<template>
  <Table></Table>
</template>

=====================================output=====================================
<template>
  <Table></Table>
</template>

================================================================================
`;

exports[`tag-name.vue format 1`] = `
====================================options=====================================
parsers: ["vue"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
<template>
  <Table></Table>
</template>

=====================================output=====================================
<template>
  <Table></Table>
</template>

================================================================================
`;

exports[`template.vue - {"semi":false} format 1`] = `
====================================options=====================================
parsers: ["vue"]
printWidth: 80
semi: false
                                                                                | printWidth
=====================================input======================================
<!--copied from https://github.com/gitlabhq/gitlabhq/blob/master/app/assets/javascripts/vue_shared/components/content_viewer/viewers/image_viewer.vue-->
<template>
  <div class="file-container">
    <div class="file-content image_file">
      <img
        ref="contentImg"
        :class="{ 'is-zoomable': isZoomable, 'is-zoomed': isZoomed }"
        :src="path"
        :alt="path"
        @load="onImgLoad"
        @click="onImgClick"/>
      <p
        v-if="renderInfo"
        class="file-info prepend-top-10">
        <template v-if="fileSize>0">
          {{ fileSizeReadable }}
        </template>
        <template v-if="fileSize>0 && width && height">
          |
        </template>
        <template v-if="width && height">
          W: {{ width }} | H: {{ height }}
        </template>
      </p>
    </div>
  </div>
</template>

=====================================output=====================================
<!--copied from https://github.com/gitlabhq/gitlabhq/blob/master/app/assets/javascripts/vue_shared/components/content_viewer/viewers/image_viewer.vue-->
<template>
  <div class="file-container">
    <div class="file-content image_file">
      <img
        ref="contentImg"
        :class="{ 'is-zoomable': isZoomable, 'is-zoomed': isZoomed }"
        :src="path"
        :alt="path"
        @load="onImgLoad"
        @click="onImgClick"
      />
      <p v-if="renderInfo" class="file-info prepend-top-10">
        <template v-if="fileSize > 0">
          {{ fileSizeReadable }}
        </template>
        <template v-if="fileSize > 0 && width && height"> | </template>
        <template v-if="width && height">
          W: {{ width }} | H: {{ height }}
        </template>
      </p>
    </div>
  </div>
</template>

================================================================================
`;

exports[`template.vue - {"trailingComma":"none"} format 1`] = `
====================================options=====================================
parsers: ["vue"]
printWidth: 80
trailingComma: "none"
                                                                                | printWidth
=====================================input======================================
<!--copied from https://github.com/gitlabhq/gitlabhq/blob/master/app/assets/javascripts/vue_shared/components/content_viewer/viewers/image_viewer.vue-->
<template>
  <div class="file-container">
    <div class="file-content image_file">
      <img
        ref="contentImg"
        :class="{ 'is-zoomable': isZoomable, 'is-zoomed': isZoomed }"
        :src="path"
        :alt="path"
        @load="onImgLoad"
        @click="onImgClick"/>
      <p
        v-if="renderInfo"
        class="file-info prepend-top-10">
        <template v-if="fileSize>0">
          {{ fileSizeReadable }}
        </template>
        <template v-if="fileSize>0 && width && height">
          |
        </template>
        <template v-if="width && height">
          W: {{ width }} | H: {{ height }}
        </template>
      </p>
    </div>
  </div>
</template>

=====================================output=====================================
<!--copied from https://github.com/gitlabhq/gitlabhq/blob/master/app/assets/javascripts/vue_shared/components/content_viewer/viewers/image_viewer.vue-->
<template>
  <div class="file-container">
    <div class="file-content image_file">
      <img
        ref="contentImg"
        :class="{ 'is-zoomable': isZoomable, 'is-zoomed': isZoomed }"
        :src="path"
        :alt="path"
        @load="onImgLoad"
        @click="onImgClick"
      />
      <p v-if="renderInfo" class="file-info prepend-top-10">
        <template v-if="fileSize > 0">
          {{ fileSizeReadable }}
        </template>
        <template v-if="fileSize > 0 && width && height"> | </template>
        <template v-if="width && height">
          W: {{ width }} | H: {{ height }}
        </template>
      </p>
    </div>
  </div>
</template>

================================================================================
`;

exports[`template.vue format 1`] = `
====================================options=====================================
parsers: ["vue"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
<!--copied from https://github.com/gitlabhq/gitlabhq/blob/master/app/assets/javascripts/vue_shared/components/content_viewer/viewers/image_viewer.vue-->
<template>
  <div class="file-container">
    <div class="file-content image_file">
      <img
        ref="contentImg"
        :class="{ 'is-zoomable': isZoomable, 'is-zoomed': isZoomed }"
        :src="path"
        :alt="path"
        @load="onImgLoad"
        @click="onImgClick"/>
      <p
        v-if="renderInfo"
        class="file-info prepend-top-10">
        <template v-if="fileSize>0">
          {{ fileSizeReadable }}
        </template>
        <template v-if="fileSize>0 && width && height">
          |
        </template>
        <template v-if="width && height">
          W: {{ width }} | H: {{ height }}
        </template>
      </p>
    </div>
  </div>
</template>

=====================================output=====================================
<!--copied from https://github.com/gitlabhq/gitlabhq/blob/master/app/assets/javascripts/vue_shared/components/content_viewer/viewers/image_viewer.vue-->
<template>
  <div class="file-container">
    <div class="file-content image_file">
      <img
        ref="contentImg"
        :class="{ 'is-zoomable': isZoomable, 'is-zoomed': isZoomed }"
        :src="path"
        :alt="path"
        @load="onImgLoad"
        @click="onImgClick"
      />
      <p v-if="renderInfo" class="file-info prepend-top-10">
        <template v-if="fileSize > 0">
          {{ fileSizeReadable }}
        </template>
        <template v-if="fileSize > 0 && width && height"> | </template>
        <template v-if="width && height">
          W: {{ width }} | H: {{ height }}
        </template>
      </p>
    </div>
  </div>
</template>

================================================================================
`;

exports[`template-dom.html - {"semi":false} format 1`] = `
====================================options=====================================
parsers: ["vue"]
printWidth: 80
semi: false
                                                                                | printWidth
=====================================input======================================
<!DOCTYPE html><html>
  <body>
    <div v-if="foo ===    'foo'">

</div>
    <script>
new Vue({el: '#app'})
    </script>
  </body>
</html>

=====================================output=====================================
<!DOCTYPE html>
<html>
  <body>
    <div v-if="foo === 'foo'"></div>
    <script>
      new Vue({ el: "#app" })
    </script>
  </body>
</html>

================================================================================
`;

exports[`template-dom.html - {"trailingComma":"none"} format 1`] = `
====================================options=====================================
parsers: ["vue"]
printWidth: 80
trailingComma: "none"
                                                                                | printWidth
=====================================input======================================
<!DOCTYPE html><html>
  <body>
    <div v-if="foo ===    'foo'">

</div>
    <script>
new Vue({el: '#app'})
    </script>
  </body>
</html>

=====================================output=====================================
<!DOCTYPE html>
<html>
  <body>
    <div v-if="foo === 'foo'"></div>
    <script>
      new Vue({ el: "#app" });
    </script>
  </body>
</html>

================================================================================
`;

exports[`template-dom.html format 1`] = `
====================================options=====================================
parsers: ["vue"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
<!DOCTYPE html><html>
  <body>
    <div v-if="foo ===    'foo'">

</div>
    <script>
new Vue({el: '#app'})
    </script>
  </body>
</html>

=====================================output=====================================
<!DOCTYPE html>
<html>
  <body>
    <div v-if="foo === 'foo'"></div>
    <script>
      new Vue({ el: "#app" });
    </script>
  </body>
</html>

================================================================================
`;

exports[`template-lang.vue - {"semi":false} format 1`] = `
====================================options=====================================
parsers: ["vue"]
printWidth: 80
semi: false
                                                                                | printWidth
=====================================input======================================
<template lang="pug">
  .test
    #foo
  .bla
</template>

<template 


   
   lang='pug'>
  .test
    #foo
  .bla
</template>

<template lang="unknown">
  #container
    some-component(tag='<some-tag>')
</template>

=====================================output=====================================
<template lang="pug">
  .test
    #foo
  .bla
</template>

<template lang="pug">
  .test
    #foo
  .bla
</template>

<template lang="unknown">
  #container
    some-component(tag='<some-tag>')
</template>

================================================================================
`;

exports[`template-lang.vue - {"trailingComma":"none"} format 1`] = `
====================================options=====================================
parsers: ["vue"]
printWidth: 80
trailingComma: "none"
                                                                                | printWidth
=====================================input======================================
<template lang="pug">
  .test
    #foo
  .bla
</template>

<template 


   
   lang='pug'>
  .test
    #foo
  .bla
</template>

<template lang="unknown">
  #container
    some-component(tag='<some-tag>')
</template>

=====================================output=====================================
<template lang="pug">
  .test
    #foo
  .bla
</template>

<template lang="pug">
  .test
    #foo
  .bla
</template>

<template lang="unknown">
  #container
    some-component(tag='<some-tag>')
</template>

================================================================================
`;

exports[`template-lang.vue format 1`] = `
====================================options=====================================
parsers: ["vue"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
<template lang="pug">
  .test
    #foo
  .bla
</template>

<template 


   
   lang='pug'>
  .test
    #foo
  .bla
</template>

<template lang="unknown">
  #container
    some-component(tag='<some-tag>')
</template>

=====================================output=====================================
<template lang="pug">
  .test
    #foo
  .bla
</template>

<template lang="pug">
  .test
    #foo
  .bla
</template>

<template lang="unknown">
  #container
    some-component(tag='<some-tag>')
</template>

================================================================================
`;

exports[`test.vue - {"semi":false} format 1`] = `
====================================options=====================================
parsers: ["vue"]
printWidth: 80
semi: false
                                                                                | printWidth
=====================================input======================================
<script>
</script>

<template>
  <br />
  <footer>
    foo
    <br/>
  </footer>
</template>

=====================================output=====================================
<script></script>

<template>
  <br />
  <footer>
    foo
    <br />
  </footer>
</template>

================================================================================
`;

exports[`test.vue - {"trailingComma":"none"} format 1`] = `
====================================options=====================================
parsers: ["vue"]
printWidth: 80
trailingComma: "none"
                                                                                | printWidth
=====================================input======================================
<script>
</script>

<template>
  <br />
  <footer>
    foo
    <br/>
  </footer>
</template>

=====================================output=====================================
<script></script>

<template>
  <br />
  <footer>
    foo
    <br />
  </footer>
</template>

================================================================================
`;

exports[`test.vue format 1`] = `
====================================options=====================================
parsers: ["vue"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
<script>
</script>

<template>
  <br />
  <footer>
    foo
    <br/>
  </footer>
</template>

=====================================output=====================================
<script></script>

<template>
  <br />
  <footer>
    foo
    <br />
  </footer>
</template>

================================================================================
`;

exports[`v-if.vue - {"semi":false} format 1`] = `
====================================options=====================================
parsers: ["vue"]
printWidth: 80
semi: false
                                                                                | printWidth
=====================================input======================================
<template>
<root>
  <and v-if="
long_long_long_long_long_long_long_condition_1 && long_long_long_long_long_long_long_condition_2 && short_1 && short_2 &&
long_long_long_long_long_long_long_condition_3 &&
long_long_long_long_long_long_long_condition_4
"></and>
  <and v-if="
(long_long_long_long_long_long_long_condition_1 && long_long_long_long_long_long_long_condition_2 && (short_1 && short_2) ) &&
long_long_long_long_long_long_long_condition_3 &&
long_long_long_long_long_long_long_condition_4
"></and>
  <or v-if="
long_long_long_long_long_long_long_condition_1 || long_long_long_long_long_long_long_condition_2 ||short_1 || short_2 ||
long_long_long_long_long_long_long_condition_3 ||
long_long_long_long_long_long_long_condition_4
"></or>
  <or v-if="
(long_long_long_long_long_long_long_condition_1 || long_long_long_long_long_long_long_condition_2 || (short_1 || short_2) ||
long_long_long_long_long_long_long_condition_3) ||
long_long_long_long_long_long_long_condition_4
"></or>
  <mixed v-if="
long_long_long_long_long_long_long_condition_1 && long_long_long_long_long_long_long_condition_2 ||  ((short_1 && short_2) &&
long_long_long_long_long_long_long_condition_3 &&
long_long_long_long_long_long_long_condition_4)
"></mixed>
  <mixed v-if="
long_long_long_long_long_long_long_condition_1 && long_long_long_long_long_long_long_condition_2 || short_1 && short_2 &&
long_long_long_long_long_long_long_condition_3 ||
long_long_long_long_long_long_long_condition_4
"></mixed>
</root>
</template>

=====================================output=====================================
<template>
  <root>
    <and
      v-if="
        long_long_long_long_long_long_long_condition_1 &&
        long_long_long_long_long_long_long_condition_2 &&
        short_1 &&
        short_2 &&
        long_long_long_long_long_long_long_condition_3 &&
        long_long_long_long_long_long_long_condition_4
      "
    ></and>
    <and
      v-if="
        long_long_long_long_long_long_long_condition_1 &&
        long_long_long_long_long_long_long_condition_2 &&
        short_1 &&
        short_2 &&
        long_long_long_long_long_long_long_condition_3 &&
        long_long_long_long_long_long_long_condition_4
      "
    ></and>
    <or
      v-if="
        long_long_long_long_long_long_long_condition_1 ||
        long_long_long_long_long_long_long_condition_2 ||
        short_1 ||
        short_2 ||
        long_long_long_long_long_long_long_condition_3 ||
        long_long_long_long_long_long_long_condition_4
      "
    ></or>
    <or
      v-if="
        long_long_long_long_long_long_long_condition_1 ||
        long_long_long_long_long_long_long_condition_2 ||
        short_1 ||
        short_2 ||
        long_long_long_long_long_long_long_condition_3 ||
        long_long_long_long_long_long_long_condition_4
      "
    ></or>
    <mixed
      v-if="
        (long_long_long_long_long_long_long_condition_1 &&
          long_long_long_long_long_long_long_condition_2) ||
        (short_1 &&
          short_2 &&
          long_long_long_long_long_long_long_condition_3 &&
          long_long_long_long_long_long_long_condition_4)
      "
    ></mixed>
    <mixed
      v-if="
        (long_long_long_long_long_long_long_condition_1 &&
          long_long_long_long_long_long_long_condition_2) ||
        (short_1 &&
          short_2 &&
          long_long_long_long_long_long_long_condition_3) ||
        long_long_long_long_long_long_long_condition_4
      "
    ></mixed>
  </root>
</template>

================================================================================
`;

exports[`v-if.vue - {"trailingComma":"none"} format 1`] = `
====================================options=====================================
parsers: ["vue"]
printWidth: 80
trailingComma: "none"
                                                                                | printWidth
=====================================input======================================
<template>
<root>
  <and v-if="
long_long_long_long_long_long_long_condition_1 && long_long_long_long_long_long_long_condition_2 && short_1 && short_2 &&
long_long_long_long_long_long_long_condition_3 &&
long_long_long_long_long_long_long_condition_4
"></and>
  <and v-if="
(long_long_long_long_long_long_long_condition_1 && long_long_long_long_long_long_long_condition_2 && (short_1 && short_2) ) &&
long_long_long_long_long_long_long_condition_3 &&
long_long_long_long_long_long_long_condition_4
"></and>
  <or v-if="
long_long_long_long_long_long_long_condition_1 || long_long_long_long_long_long_long_condition_2 ||short_1 || short_2 ||
long_long_long_long_long_long_long_condition_3 ||
long_long_long_long_long_long_long_condition_4
"></or>
  <or v-if="
(long_long_long_long_long_long_long_condition_1 || long_long_long_long_long_long_long_condition_2 || (short_1 || short_2) ||
long_long_long_long_long_long_long_condition_3) ||
long_long_long_long_long_long_long_condition_4
"></or>
  <mixed v-if="
long_long_long_long_long_long_long_condition_1 && long_long_long_long_long_long_long_condition_2 ||  ((short_1 && short_2) &&
long_long_long_long_long_long_long_condition_3 &&
long_long_long_long_long_long_long_condition_4)
"></mixed>
  <mixed v-if="
long_long_long_long_long_long_long_condition_1 && long_long_long_long_long_long_long_condition_2 || short_1 && short_2 &&
long_long_long_long_long_long_long_condition_3 ||
long_long_long_long_long_long_long_condition_4
"></mixed>
</root>
</template>

=====================================output=====================================
<template>
  <root>
    <and
      v-if="
        long_long_long_long_long_long_long_condition_1 &&
        long_long_long_long_long_long_long_condition_2 &&
        short_1 &&
        short_2 &&
        long_long_long_long_long_long_long_condition_3 &&
        long_long_long_long_long_long_long_condition_4
      "
    ></and>
    <and
      v-if="
        long_long_long_long_long_long_long_condition_1 &&
        long_long_long_long_long_long_long_condition_2 &&
        short_1 &&
        short_2 &&
        long_long_long_long_long_long_long_condition_3 &&
        long_long_long_long_long_long_long_condition_4
      "
    ></and>
    <or
      v-if="
        long_long_long_long_long_long_long_condition_1 ||
        long_long_long_long_long_long_long_condition_2 ||
        short_1 ||
        short_2 ||
        long_long_long_long_long_long_long_condition_3 ||
        long_long_long_long_long_long_long_condition_4
      "
    ></or>
    <or
      v-if="
        long_long_long_long_long_long_long_condition_1 ||
        long_long_long_long_long_long_long_condition_2 ||
        short_1 ||
        short_2 ||
        long_long_long_long_long_long_long_condition_3 ||
        long_long_long_long_long_long_long_condition_4
      "
    ></or>
    <mixed
      v-if="
        (long_long_long_long_long_long_long_condition_1 &&
          long_long_long_long_long_long_long_condition_2) ||
        (short_1 &&
          short_2 &&
          long_long_long_long_long_long_long_condition_3 &&
          long_long_long_long_long_long_long_condition_4)
      "
    ></mixed>
    <mixed
      v-if="
        (long_long_long_long_long_long_long_condition_1 &&
          long_long_long_long_long_long_long_condition_2) ||
        (short_1 &&
          short_2 &&
          long_long_long_long_long_long_long_condition_3) ||
        long_long_long_long_long_long_long_condition_4
      "
    ></mixed>
  </root>
</template>

================================================================================
`;

exports[`v-if.vue format 1`] = `
====================================options=====================================
parsers: ["vue"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
<template>
<root>
  <and v-if="
long_long_long_long_long_long_long_condition_1 && long_long_long_long_long_long_long_condition_2 && short_1 && short_2 &&
long_long_long_long_long_long_long_condition_3 &&
long_long_long_long_long_long_long_condition_4
"></and>
  <and v-if="
(long_long_long_long_long_long_long_condition_1 && long_long_long_long_long_long_long_condition_2 && (short_1 && short_2) ) &&
long_long_long_long_long_long_long_condition_3 &&
long_long_long_long_long_long_long_condition_4
"></and>
  <or v-if="
long_long_long_long_long_long_long_condition_1 || long_long_long_long_long_long_long_condition_2 ||short_1 || short_2 ||
long_long_long_long_long_long_long_condition_3 ||
long_long_long_long_long_long_long_condition_4
"></or>
  <or v-if="
(long_long_long_long_long_long_long_condition_1 || long_long_long_long_long_long_long_condition_2 || (short_1 || short_2) ||
long_long_long_long_long_long_long_condition_3) ||
long_long_long_long_long_long_long_condition_4
"></or>
  <mixed v-if="
long_long_long_long_long_long_long_condition_1 && long_long_long_long_long_long_long_condition_2 ||  ((short_1 && short_2) &&
long_long_long_long_long_long_long_condition_3 &&
long_long_long_long_long_long_long_condition_4)
"></mixed>
  <mixed v-if="
long_long_long_long_long_long_long_condition_1 && long_long_long_long_long_long_long_condition_2 || short_1 && short_2 &&
long_long_long_long_long_long_long_condition_3 ||
long_long_long_long_long_long_long_condition_4
"></mixed>
</root>
</template>

=====================================output=====================================
<template>
  <root>
    <and
      v-if="
        long_long_long_long_long_long_long_condition_1 &&
        long_long_long_long_long_long_long_condition_2 &&
        short_1 &&
        short_2 &&
        long_long_long_long_long_long_long_condition_3 &&
        long_long_long_long_long_long_long_condition_4
      "
    ></and>
    <and
      v-if="
        long_long_long_long_long_long_long_condition_1 &&
        long_long_long_long_long_long_long_condition_2 &&
        short_1 &&
        short_2 &&
        long_long_long_long_long_long_long_condition_3 &&
        long_long_long_long_long_long_long_condition_4
      "
    ></and>
    <or
      v-if="
        long_long_long_long_long_long_long_condition_1 ||
        long_long_long_long_long_long_long_condition_2 ||
        short_1 ||
        short_2 ||
        long_long_long_long_long_long_long_condition_3 ||
        long_long_long_long_long_long_long_condition_4
      "
    ></or>
    <or
      v-if="
        long_long_long_long_long_long_long_condition_1 ||
        long_long_long_long_long_long_long_condition_2 ||
        short_1 ||
        short_2 ||
        long_long_long_long_long_long_long_condition_3 ||
        long_long_long_long_long_long_long_condition_4
      "
    ></or>
    <mixed
      v-if="
        (long_long_long_long_long_long_long_condition_1 &&
          long_long_long_long_long_long_long_condition_2) ||
        (short_1 &&
          short_2 &&
          long_long_long_long_long_long_long_condition_3 &&
          long_long_long_long_long_long_long_condition_4)
      "
    ></mixed>
    <mixed
      v-if="
        (long_long_long_long_long_long_long_condition_1 &&
          long_long_long_long_long_long_long_condition_2) ||
        (short_1 &&
          short_2 &&
          long_long_long_long_long_long_long_condition_3) ||
        long_long_long_long_long_long_long_condition_4
      "
    ></mixed>
  </root>
</template>

================================================================================
`;
