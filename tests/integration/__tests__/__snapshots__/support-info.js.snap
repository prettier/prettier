// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`API getSupportInfo() 1`] = `
{
  "languages": {
    "Angular": [
      "angular",
    ],
    "CSS": [
      "css",
    ],
    "Flow": [
      "flow",
      "babel-flow",
    ],
    "GraphQL": [
      "graphql",
    ],
    "HTML": [
      "html",
    ],
    "Handlebars": [
      "glimmer",
    ],
    "JSON": [
      "json",
    ],
    "JSON with Comments": [
      "jsonc",
    ],
    "JSON.stringify": [
      "json-stringify",
    ],
    "JSON5": [
      "json5",
    ],
    "JSX": [
      "babel",
      "babel-flow",
      "babel-ts",
      "flow",
      "typescript",
      "espree",
      "meriyah",
    ],
    "JavaScript": [
      "babel",
      "acorn",
      "espree",
      "meriyah",
      "babel-flow",
      "babel-ts",
      "flow",
      "typescript",
    ],
    "Less": [
      "less",
    ],
    "Lightning Web Components": [
      "lwc",
    ],
    "MDX": [
      "mdx",
    ],
    "Markdown": [
      "markdown",
    ],
    "PostCSS": [
      "css",
    ],
    "SCSS": [
      "scss",
    ],
    "TSX": [
      "typescript",
      "babel-ts",
    ],
    "TypeScript": [
      "typescript",
      "babel-ts",
    ],
    "Vue": [
      "vue",
    ],
    "YAML": [
      "yaml",
    ],
  },
  "options": {
    "arrowParens": {
      "choices": [
        "always",
        "avoid",
      ],
      "default": "always",
      "type": "choice",
    },
    "bracketSameLine": {
      "default": false,
      "type": "boolean",
    },
    "bracketSpacing": {
      "default": true,
      "type": "boolean",
    },
    "cursorOffset": {
      "default": -1,
      "range": {
        "end": Infinity,
        "start": -1,
        "step": 1,
      },
      "type": "int",
    },
    "embeddedLanguageFormatting": {
      "choices": [
        "auto",
        "off",
      ],
      "default": "auto",
      "type": "choice",
    },
    "endOfLine": {
      "choices": [
        "lf",
        "crlf",
        "cr",
        "auto",
      ],
      "default": "lf",
      "type": "choice",
    },
    "experimentalTernaries": {
      "default": false,
      "type": "boolean",
    },
    "filepath": {
      "default": undefined,
      "type": "path",
    },
    "htmlWhitespaceSensitivity": {
      "choices": [
        "css",
        "strict",
        "ignore",
      ],
      "default": "css",
      "type": "choice",
    },
    "insertPragma": {
      "default": false,
      "type": "boolean",
    },
    "jsxSingleQuote": {
      "default": false,
      "type": "boolean",
    },
    "parser": {
      "choices": [
        "flow",
        "babel",
        "babel-flow",
        "babel-ts",
        "typescript",
        "acorn",
        "espree",
        "meriyah",
        "css",
        "less",
        "scss",
        "json",
        "json5",
        "jsonc",
        "json-stringify",
        "graphql",
        "markdown",
        "mdx",
        "vue",
        "yaml",
        "glimmer",
        "html",
        "angular",
        "lwc",
      ],
      "default": undefined,
      "type": "choice",
    },
    "plugins": {
      "default": [],
      "type": "path",
    },
    "printWidth": {
      "default": 80,
      "range": {
        "end": Infinity,
        "start": 0,
        "step": 1,
      },
      "type": "int",
    },
    "proseWrap": {
      "choices": [
        "always",
        "never",
        "preserve",
      ],
      "default": "preserve",
      "type": "choice",
    },
    "quoteProps": {
      "choices": [
        "as-needed",
        "consistent",
        "preserve",
      ],
      "default": "as-needed",
      "type": "choice",
    },
    "rangeEnd": {
      "default": Infinity,
      "range": {
        "end": Infinity,
        "start": 0,
        "step": 1,
      },
      "type": "int",
    },
    "rangeStart": {
      "default": 0,
      "range": {
        "end": Infinity,
        "start": 0,
        "step": 1,
      },
      "type": "int",
    },
    "requirePragma": {
      "default": false,
      "type": "boolean",
    },
    "semi": {
      "default": true,
      "type": "boolean",
    },
    "singleAttributePerLine": {
      "default": false,
      "type": "boolean",
    },
    "singleQuote": {
      "default": false,
      "type": "boolean",
    },
    "tabWidth": {
      "default": 2,
      "range": {
        "end": Infinity,
        "start": 0,
        "step": 1,
      },
      "type": "int",
    },
    "trailingComma": {
      "choices": [
        "all",
        "es5",
        "none",
      ],
      "default": "all",
      "type": "choice",
    },
    "useTabs": {
      "default": false,
      "type": "boolean",
    },
    "vueIndentScriptAndStyle": {
      "default": false,
      "type": "boolean",
    },
  },
}
`;

exports[`CLI --support-info (stderr) 1`] = `""`;

exports[`CLI --support-info (stdout) 1`] = `
"{
  "languages": [
    {
      "aceMode": "html",
      "aliases": ["xhtml"],
      "codemirrorMimeType": "text/html",
      "codemirrorMode": "htmlmixed",
      "color": "#e34c26",
      "extensions": [".component.html"],
      "filenames": [],
      "linguistLanguageId": 146,
      "name": "Angular",
      "parsers": ["angular"],
      "tmScope": "text.html.basic",
      "type": "markup",
      "vscodeLanguageIds": ["html"]
    },
    {
      "aceMode": "css",
      "codemirrorMimeType": "text/css",
      "codemirrorMode": "css",
      "color": "#563d7c",
      "extensions": [".css", ".wxss"],
      "linguistLanguageId": 50,
      "name": "CSS",
      "parsers": ["css"],
      "tmScope": "source.css",
      "type": "markup",
      "vscodeLanguageIds": ["css"]
    },
    {
      "aceMode": "javascript",
      "aliases": [],
      "codemirrorMimeType": "text/javascript",
      "codemirrorMode": "javascript",
      "color": "#f1e05a",
      "extensions": [".js.flow"],
      "filenames": [],
      "interpreters": [
        "chakra",
        "d8",
        "gjs",
        "js",
        "node",
        "nodejs",
        "qjs",
        "rhino",
        "v8",
        "v8-shell"
      ],
      "linguistLanguageId": 183,
      "name": "Flow",
      "parsers": ["flow", "babel-flow"],
      "tmScope": "source.js",
      "type": "programming",
      "vscodeLanguageIds": ["javascript"]
    },
    {
      "aceMode": "text",
      "color": "#e10098",
      "extensions": [".graphql", ".gql", ".graphqls"],
      "linguistLanguageId": 139,
      "name": "GraphQL",
      "parsers": ["graphql"],
      "tmScope": "source.graphql",
      "type": "data",
      "vscodeLanguageIds": ["graphql"]
    },
    {
      "aceMode": "handlebars",
      "aliases": ["hbs", "htmlbars"],
      "color": "#f7931e",
      "extensions": [".handlebars", ".hbs"],
      "linguistLanguageId": 155,
      "name": "Handlebars",
      "parsers": ["glimmer"],
      "tmScope": "text.html.handlebars",
      "type": "markup",
      "vscodeLanguageIds": ["handlebars"]
    },
    {
      "aceMode": "html",
      "aliases": ["xhtml"],
      "codemirrorMimeType": "text/html",
      "codemirrorMode": "htmlmixed",
      "color": "#e34c26",
      "extensions": [
        ".html",
        ".hta",
        ".htm",
        ".html.hl",
        ".inc",
        ".xht",
        ".xhtml",
        ".mjml"
      ],
      "linguistLanguageId": 146,
      "name": "HTML",
      "parsers": ["html"],
      "tmScope": "text.html.basic",
      "type": "markup",
      "vscodeLanguageIds": ["html"]
    },
    {
      "aceMode": "javascript",
      "aliases": ["js", "node"],
      "codemirrorMimeType": "text/javascript",
      "codemirrorMode": "javascript",
      "color": "#f1e05a",
      "extensions": [
        ".js",
        "._js",
        ".bones",
        ".cjs",
        ".es",
        ".es6",
        ".frag",
        ".gs",
        ".jake",
        ".javascript",
        ".jsb",
        ".jscad",
        ".jsfl",
        ".jslib",
        ".jsm",
        ".jspre",
        ".jss",
        ".mjs",
        ".njs",
        ".pac",
        ".sjs",
        ".ssjs",
        ".xsjs",
        ".xsjslib",
        ".wxs"
      ],
      "filenames": ["Jakefile"],
      "interpreters": [
        "chakra",
        "d8",
        "gjs",
        "js",
        "node",
        "nodejs",
        "qjs",
        "rhino",
        "v8",
        "v8-shell",
        "zx"
      ],
      "linguistLanguageId": 183,
      "name": "JavaScript",
      "parsers": [
        "babel",
        "acorn",
        "espree",
        "meriyah",
        "babel-flow",
        "babel-ts",
        "flow",
        "typescript"
      ],
      "tmScope": "source.js",
      "type": "programming",
      "vscodeLanguageIds": ["javascript", "mongo"]
    },
    {
      "aceMode": "json",
      "aliases": ["geojson", "jsonl", "topojson"],
      "codemirrorMimeType": "application/json",
      "codemirrorMode": "javascript",
      "color": "#292929",
      "extensions": [
        ".json",
        ".4DForm",
        ".4DProject",
        ".avsc",
        ".geojson",
        ".gltf",
        ".har",
        ".ice",
        ".JSON-tmLanguage",
        ".mcmeta",
        ".tfstate",
        ".tfstate.backup",
        ".topojson",
        ".webapp",
        ".webmanifest",
        ".yy",
        ".yyp"
      ],
      "filenames": [
        ".all-contributorsrc",
        ".arcconfig",
        ".auto-changelog",
        ".c8rc",
        ".htmlhintrc",
        ".imgbotconfig",
        ".nycrc",
        ".tern-config",
        ".tern-project",
        ".watchmanconfig",
        "Pipfile.lock",
        "composer.lock",
        "flake.lock",
        "mcmod.info",
        ".babelrc",
        ".jscsrc",
        ".jshintrc",
        ".jslintrc",
        ".swcrc"
      ],
      "linguistLanguageId": 174,
      "name": "JSON",
      "parsers": ["json"],
      "tmScope": "source.json",
      "type": "data",
      "vscodeLanguageIds": ["json"]
    },
    {
      "aceMode": "javascript",
      "aliases": ["jsonc"],
      "codemirrorMimeType": "text/javascript",
      "codemirrorMode": "javascript",
      "color": "#292929",
      "extensions": [
        ".jsonc",
        ".code-snippets",
        ".code-workspace",
        ".sublime-build",
        ".sublime-commands",
        ".sublime-completions",
        ".sublime-keymap",
        ".sublime-macro",
        ".sublime-menu",
        ".sublime-mousemap",
        ".sublime-project",
        ".sublime-settings",
        ".sublime-theme",
        ".sublime-workspace",
        ".sublime_metrics",
        ".sublime_session"
      ],
      "filenames": [],
      "group": "JSON",
      "linguistLanguageId": 423,
      "name": "JSON with Comments",
      "parsers": ["jsonc"],
      "tmScope": "source.js",
      "type": "data",
      "vscodeLanguageIds": ["jsonc"]
    },
    {
      "aceMode": "json",
      "aliases": ["geojson", "jsonl", "topojson"],
      "codemirrorMimeType": "application/json",
      "codemirrorMode": "javascript",
      "color": "#292929",
      "extensions": [".importmap"],
      "filenames": ["package.json", "package-lock.json", "composer.json"],
      "linguistLanguageId": 174,
      "name": "JSON.stringify",
      "parsers": ["json-stringify"],
      "tmScope": "source.json",
      "type": "data",
      "vscodeLanguageIds": ["json"]
    },
    {
      "aceMode": "javascript",
      "codemirrorMimeType": "application/json",
      "codemirrorMode": "javascript",
      "color": "#267CB9",
      "extensions": [".json5"],
      "linguistLanguageId": 175,
      "name": "JSON5",
      "parsers": ["json5"],
      "tmScope": "source.js",
      "type": "data",
      "vscodeLanguageIds": ["json5"]
    },
    {
      "aceMode": "javascript",
      "codemirrorMimeType": "text/jsx",
      "codemirrorMode": "jsx",
      "extensions": [".jsx"],
      "group": "JavaScript",
      "linguistLanguageId": 183,
      "name": "JSX",
      "parsers": [
        "babel",
        "babel-flow",
        "babel-ts",
        "flow",
        "typescript",
        "espree",
        "meriyah"
      ],
      "tmScope": "source.js.jsx",
      "type": "programming",
      "vscodeLanguageIds": ["javascriptreact"]
    },
    {
      "aceMode": "less",
      "aliases": ["less-css"],
      "codemirrorMimeType": "text/css",
      "codemirrorMode": "css",
      "color": "#1d365d",
      "extensions": [".less"],
      "linguistLanguageId": 198,
      "name": "Less",
      "parsers": ["less"],
      "tmScope": "source.css.less",
      "type": "markup",
      "vscodeLanguageIds": ["less"]
    },
    {
      "aceMode": "html",
      "aliases": ["xhtml"],
      "codemirrorMimeType": "text/html",
      "codemirrorMode": "htmlmixed",
      "color": "#e34c26",
      "extensions": [],
      "filenames": [],
      "linguistLanguageId": 146,
      "name": "Lightning Web Components",
      "parsers": ["lwc"],
      "tmScope": "text.html.basic",
      "type": "markup",
      "vscodeLanguageIds": ["html"]
    },
    {
      "aceMode": "markdown",
      "aliases": ["md", "pandoc"],
      "codemirrorMimeType": "text/x-gfm",
      "codemirrorMode": "gfm",
      "color": "#083fa1",
      "extensions": [
        ".md",
        ".livemd",
        ".markdown",
        ".mdown",
        ".mdwn",
        ".mkd",
        ".mkdn",
        ".mkdown",
        ".ronn",
        ".scd",
        ".workbook"
      ],
      "filenames": ["contents.lr", "README"],
      "linguistLanguageId": 222,
      "name": "Markdown",
      "parsers": ["markdown"],
      "tmScope": "text.md",
      "type": "prose",
      "vscodeLanguageIds": ["markdown"],
      "wrap": true
    },
    {
      "aceMode": "markdown",
      "aliases": ["md", "pandoc"],
      "codemirrorMimeType": "text/x-gfm",
      "codemirrorMode": "gfm",
      "color": "#083fa1",
      "extensions": [".mdx"],
      "filenames": [],
      "linguistLanguageId": 222,
      "name": "MDX",
      "parsers": ["mdx"],
      "tmScope": "text.md",
      "type": "prose",
      "vscodeLanguageIds": ["mdx"],
      "wrap": true
    },
    {
      "aceMode": "text",
      "color": "#dc3a0c",
      "extensions": [".pcss", ".postcss"],
      "group": "CSS",
      "linguistLanguageId": 262764437,
      "name": "PostCSS",
      "parsers": ["css"],
      "tmScope": "source.postcss",
      "type": "markup",
      "vscodeLanguageIds": ["postcss"]
    },
    {
      "aceMode": "scss",
      "codemirrorMimeType": "text/x-scss",
      "codemirrorMode": "css",
      "color": "#c6538c",
      "extensions": [".scss"],
      "linguistLanguageId": 329,
      "name": "SCSS",
      "parsers": ["scss"],
      "tmScope": "source.css.scss",
      "type": "markup",
      "vscodeLanguageIds": ["scss"]
    },
    {
      "aceMode": "javascript",
      "codemirrorMimeType": "text/jsx",
      "codemirrorMode": "jsx",
      "color": "#3178c6",
      "extensions": [".tsx"],
      "group": "TypeScript",
      "linguistLanguageId": 94901924,
      "name": "TSX",
      "parsers": ["typescript", "babel-ts"],
      "tmScope": "source.tsx",
      "type": "programming",
      "vscodeLanguageIds": ["typescriptreact"]
    },
    {
      "aceMode": "typescript",
      "aliases": ["ts"],
      "codemirrorMimeType": "application/typescript",
      "codemirrorMode": "javascript",
      "color": "#3178c6",
      "extensions": [".ts", ".cts", ".mts"],
      "interpreters": ["deno", "ts-node"],
      "linguistLanguageId": 378,
      "name": "TypeScript",
      "parsers": ["typescript", "babel-ts"],
      "tmScope": "source.ts",
      "type": "programming",
      "vscodeLanguageIds": ["typescript"]
    },
    {
      "aceMode": "html",
      "color": "#41b883",
      "extensions": [".vue"],
      "linguistLanguageId": 391,
      "name": "Vue",
      "parsers": ["vue"],
      "tmScope": "text.html.vue",
      "type": "markup",
      "vscodeLanguageIds": ["vue"]
    },
    {
      "aceMode": "yaml",
      "aliases": ["yml"],
      "codemirrorMimeType": "text/x-yaml",
      "codemirrorMode": "yaml",
      "color": "#cb171e",
      "extensions": [
        ".yml",
        ".mir",
        ".reek",
        ".rviz",
        ".sublime-syntax",
        ".syntax",
        ".yaml",
        ".yaml-tmlanguage",
        ".yaml.sed",
        ".yml.mysql"
      ],
      "filenames": [
        ".clang-format",
        ".clang-tidy",
        ".gemrc",
        "CITATION.cff",
        "glide.lock",
        ".prettierrc",
        ".stylelintrc",
        ".lintstagedrc"
      ],
      "linguistLanguageId": 407,
      "name": "YAML",
      "parsers": ["yaml"],
      "tmScope": "source.yaml",
      "type": "data",
      "vscodeLanguageIds": ["yaml", "ansible", "home-assistant"]
    }
  ],
  "options": [
    {
      "category": "JavaScript",
      "choices": [
        {
          "description": "Always include parens. Example: \`(x) => x\`",
          "value": "always"
        },
        {
          "description": "Omit parens when possible. Example: \`x => x\`",
          "value": "avoid"
        }
      ],
      "default": "always",
      "description": "Include parentheses around a sole arrow function parameter.",
      "name": "arrowParens",
      "pluginDefaults": {},
      "type": "choice"
    },
    {
      "category": "Common",
      "default": false,
      "description": "Put > of opening tags on the last line instead of on a new line.",
      "name": "bracketSameLine",
      "pluginDefaults": {},
      "type": "boolean"
    },
    {
      "category": "Common",
      "default": true,
      "description": "Print spaces between brackets.",
      "name": "bracketSpacing",
      "oppositeDescription": "Do not print spaces between brackets.",
      "pluginDefaults": {},
      "type": "boolean"
    },
    {
      "category": "Special",
      "default": -1,
      "description": "Print (to stderr) where a cursor at the given position would move to after formatting.",
      "name": "cursorOffset",
      "pluginDefaults": {},
      "range": { "end": null, "start": -1, "step": 1 },
      "type": "int"
    },
    {
      "category": "Global",
      "choices": [
        {
          "description": "Format embedded code if Prettier can automatically identify it.",
          "value": "auto"
        },
        {
          "description": "Never automatically format embedded code.",
          "value": "off"
        }
      ],
      "default": "auto",
      "description": "Control how Prettier formats quoted code embedded in the file.",
      "name": "embeddedLanguageFormatting",
      "pluginDefaults": {},
      "type": "choice"
    },
    {
      "category": "Global",
      "choices": [
        {
          "description": "Line Feed only (\\\\n), common on Linux and macOS as well as inside git repos",
          "value": "lf"
        },
        {
          "description": "Carriage Return + Line Feed characters (\\\\r\\\\n), common on Windows",
          "value": "crlf"
        },
        {
          "description": "Carriage Return character only (\\\\r), used very rarely",
          "value": "cr"
        },
        {
          "description": "Maintain existing\\n(mixed values within one file are normalised by looking at what's used after the first line)",
          "value": "auto"
        }
      ],
      "default": "lf",
      "description": "Which end of line characters to apply.",
      "name": "endOfLine",
      "pluginDefaults": {},
      "type": "choice"
    },
    {
      "category": "JavaScript",
      "default": false,
      "description": "Use curious ternaries, with the question mark after the condition.",
      "name": "experimentalTernaries",
      "oppositeDescription": "Default behavior of ternaries; keep question marks on the same line as the consequent.",
      "pluginDefaults": {},
      "type": "boolean"
    },
    {
      "category": "Special",
      "description": "Specify the input filepath. This will be used to do parser inference.",
      "name": "filepath",
      "pluginDefaults": {},
      "type": "path"
    },
    {
      "category": "HTML",
      "choices": [
        {
          "description": "Respect the default value of CSS display property.",
          "value": "css"
        },
        {
          "description": "Whitespaces are considered sensitive.",
          "value": "strict"
        },
        {
          "description": "Whitespaces are considered insensitive.",
          "value": "ignore"
        }
      ],
      "default": "css",
      "description": "How to handle whitespaces in HTML.",
      "name": "htmlWhitespaceSensitivity",
      "pluginDefaults": {},
      "type": "choice"
    },
    {
      "category": "Special",
      "default": false,
      "description": "Insert @format pragma into file's first docblock comment.",
      "name": "insertPragma",
      "pluginDefaults": {},
      "type": "boolean"
    },
    {
      "category": "JavaScript",
      "default": false,
      "description": "Use single quotes in JSX.",
      "name": "jsxSingleQuote",
      "pluginDefaults": {},
      "type": "boolean"
    },
    {
      "category": "Global",
      "choices": [
        { "description": "Flow", "value": "flow" },
        { "description": "JavaScript", "value": "babel" },
        { "description": "Flow", "value": "babel-flow" },
        { "description": "TypeScript", "value": "babel-ts" },
        { "description": "TypeScript", "value": "typescript" },
        { "description": "JavaScript", "value": "acorn" },
        { "description": "JavaScript", "value": "espree" },
        { "description": "JavaScript", "value": "meriyah" },
        { "description": "CSS", "value": "css" },
        { "description": "Less", "value": "less" },
        { "description": "SCSS", "value": "scss" },
        { "description": "JSON", "value": "json" },
        { "description": "JSON5", "value": "json5" },
        { "description": "JSON with Comments", "value": "jsonc" },
        { "description": "JSON.stringify", "value": "json-stringify" },
        { "description": "GraphQL", "value": "graphql" },
        { "description": "Markdown", "value": "markdown" },
        { "description": "MDX", "value": "mdx" },
        { "description": "Vue", "value": "vue" },
        { "description": "YAML", "value": "yaml" },
        { "description": "Ember / Handlebars", "value": "glimmer" },
        { "description": "HTML", "value": "html" },
        { "description": "Angular", "value": "angular" },
        { "description": "Lightning Web Components", "value": "lwc" }
      ],
      "description": "Which parser to use.",
      "name": "parser",
      "pluginDefaults": {},
      "type": "choice"
    },
    {
      "array": true,
      "category": "Global",
      "default": [],
      "description": "Add a plugin. Multiple plugins can be passed as separate \`--plugin\`s.",
      "name": "plugins",
      "pluginDefaults": {},
      "type": "path"
    },
    {
      "category": "Global",
      "default": 80,
      "description": "The line length where Prettier will try wrap.",
      "name": "printWidth",
      "pluginDefaults": {},
      "range": { "end": null, "start": 0, "step": 1 },
      "type": "int"
    },
    {
      "category": "Common",
      "choices": [
        {
          "description": "Wrap prose if it exceeds the print width.",
          "value": "always"
        },
        { "description": "Do not wrap prose.", "value": "never" },
        { "description": "Wrap prose as-is.", "value": "preserve" }
      ],
      "default": "preserve",
      "description": "How to wrap prose.",
      "name": "proseWrap",
      "pluginDefaults": {},
      "type": "choice"
    },
    {
      "category": "JavaScript",
      "choices": [
        {
          "description": "Only add quotes around object properties where required.",
          "value": "as-needed"
        },
        {
          "description": "If at least one property in an object requires quotes, quote all properties.",
          "value": "consistent"
        },
        {
          "description": "Respect the input use of quotes in object properties.",
          "value": "preserve"
        }
      ],
      "default": "as-needed",
      "description": "Change when properties in objects are quoted.",
      "name": "quoteProps",
      "pluginDefaults": {},
      "type": "choice"
    },
    {
      "category": "Special",
      "default": null,
      "description": "Format code ending at a given character offset (exclusive).\\nThe range will extend forwards to the end of the selected statement.",
      "name": "rangeEnd",
      "pluginDefaults": {},
      "range": { "end": null, "start": 0, "step": 1 },
      "type": "int"
    },
    {
      "category": "Special",
      "default": 0,
      "description": "Format code starting at a given character offset.\\nThe range will extend backwards to the start of the first line containing the selected statement.",
      "name": "rangeStart",
      "pluginDefaults": {},
      "range": { "end": null, "start": 0, "step": 1 },
      "type": "int"
    },
    {
      "category": "Special",
      "default": false,
      "description": "Require either '@prettier' or '@format' to be present in the file's first docblock comment\\nin order for it to be formatted.",
      "name": "requirePragma",
      "pluginDefaults": {},
      "type": "boolean"
    },
    {
      "category": "JavaScript",
      "default": true,
      "description": "Print semicolons.",
      "name": "semi",
      "oppositeDescription": "Do not print semicolons, except at the beginning of lines which may need them.",
      "pluginDefaults": {},
      "type": "boolean"
    },
    {
      "category": "Common",
      "default": false,
      "description": "Enforce single attribute per line in HTML, Vue and JSX.",
      "name": "singleAttributePerLine",
      "pluginDefaults": {},
      "type": "boolean"
    },
    {
      "category": "Common",
      "default": false,
      "description": "Use single quotes instead of double quotes.",
      "name": "singleQuote",
      "pluginDefaults": {},
      "type": "boolean"
    },
    {
      "category": "Global",
      "default": 2,
      "description": "Number of spaces per indentation level.",
      "name": "tabWidth",
      "pluginDefaults": {},
      "range": { "end": null, "start": 0, "step": 1 },
      "type": "int"
    },
    {
      "category": "JavaScript",
      "choices": [
        {
          "description": "Trailing commas wherever possible (including function arguments).",
          "value": "all"
        },
        {
          "description": "Trailing commas where valid in ES5 (objects, arrays, etc.)",
          "value": "es5"
        },
        { "description": "No trailing commas.", "value": "none" }
      ],
      "default": "all",
      "description": "Print trailing commas wherever possible when multi-line.",
      "name": "trailingComma",
      "pluginDefaults": {},
      "type": "choice"
    },
    {
      "category": "Global",
      "default": false,
      "description": "Indent with tabs instead of spaces.",
      "name": "useTabs",
      "pluginDefaults": {},
      "type": "boolean"
    },
    {
      "category": "HTML",
      "default": false,
      "description": "Indent script and style tags in Vue files.",
      "name": "vueIndentScriptAndStyle",
      "pluginDefaults": {},
      "type": "boolean"
    }
  ]
}
"
`;

exports[`CLI --support-info (write) 1`] = `[]`;
