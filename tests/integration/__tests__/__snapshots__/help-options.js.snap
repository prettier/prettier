// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`show detailed usage with --help align-object-properties (stderr) 1`] = `""`;

exports[`show detailed usage with --help align-object-properties (stdout) 1`] = `
"--align-object-properties

  Align colons in multiline object literals.

Default: false
"
`;

exports[`show detailed usage with --help align-object-properties (write) 1`] = `Array []`;

exports[`show detailed usage with --help array-bracket-spacing (stderr) 1`] = `""`;

exports[`show detailed usage with --help array-bracket-spacing (stdout) 1`] = `
"--array-bracket-spacing

  Put spaces between array brackets (similar to the corresponding eslint option). Status: experimental, with limited testing.

Default: false
"
`;

exports[`show detailed usage with --help array-bracket-spacing (write) 1`] = `Array []`;

exports[`show detailed usage with --help arrow-parens (stderr) 1`] = `""`;

exports[`show detailed usage with --help arrow-parens (stdout) 1`] = `
"--arrow-parens <always|avoid>

  Include parentheses around a sole arrow function parameter.

Valid options:

  always   Always include parens. Example: \`(x) => x\`
  avoid    Omit parens when possible. Example: \`x => x\`

Default: always
"
`;

exports[`show detailed usage with --help arrow-parens (write) 1`] = `Array []`;

exports[`show detailed usage with --help break-before-else (stderr) 1`] = `""`;

exports[`show detailed usage with --help break-before-else (stdout) 1`] = `
"--break-before-else

  Always add a line break before else.

Default: false
"
`;

exports[`show detailed usage with --help break-before-else (write) 1`] = `Array []`;

exports[`show detailed usage with --help break-long-method-chains (stderr) 1`] = `""`;

exports[`show detailed usage with --help break-long-method-chains (stdout) 1`] = `
"--break-long-method-chains

  Break method chains with more than 3 method calls, like Prettier 1.x.

Default: false
"
`;

exports[`show detailed usage with --help break-long-method-chains (write) 1`] = `Array []`;

exports[`show detailed usage with --help check (stderr) 1`] = `""`;

exports[`show detailed usage with --help check (stdout) 1`] = `
"-c, --check

  Check if the given files are formatted, print a human-friendly summary
  message and paths to unformatted files (see also --list-different).
"
`;

exports[`show detailed usage with --help check (write) 1`] = `Array []`;

exports[`show detailed usage with --help color (stderr) 1`] = `""`;

exports[`show detailed usage with --help color (stdout) 1`] = `
"--color

  Colorize error messages.

Default: true
"
`;

exports[`show detailed usage with --help color (write) 1`] = `Array []`;

exports[`show detailed usage with --help computed-property-spacing (stderr) 1`] = `""`;

exports[`show detailed usage with --help computed-property-spacing (stdout) 1`] = `
"--computed-property-spacing

  Put spaces between computed property brackets (similar to the corresponding eslint option). Status: experimental, with limited testing.

Default: false
"
`;

exports[`show detailed usage with --help computed-property-spacing (write) 1`] = `Array []`;

exports[`show detailed usage with --help config (stderr) 1`] = `""`;

exports[`show detailed usage with --help config (stdout) 1`] = `
"--config <path>

  Path to a Prettier configuration file (.prettierrc, package.json, prettier.config.js).
"
`;

exports[`show detailed usage with --help config (write) 1`] = `Array []`;

exports[`show detailed usage with --help config-precedence (stderr) 1`] = `""`;

exports[`show detailed usage with --help config-precedence (stdout) 1`] = `
"--config-precedence <cli-override|file-override|prefer-file>

  Define in which order config files and CLI options should be evaluated.

Valid options:

  cli-override    CLI options take precedence over config file
  file-override   Config file take precedence over CLI options
  prefer-file     If a config file is found will evaluate it and ignore other CLI options.
                  If no config file is found CLI options will evaluate as normal.

Default: cli-override
"
`;

exports[`show detailed usage with --help config-precedence (write) 1`] = `Array []`;

exports[`show detailed usage with --help css-paren-spacing (stderr) 1`] = `""`;

exports[`show detailed usage with --help css-paren-spacing (stdout) 1`] = `
"--css-paren-spacing

  Print spaces between parens in CSS, WordPress style. Status: experimental, with limited testing.

Default: false
"
`;

exports[`show detailed usage with --help css-paren-spacing (write) 1`] = `Array []`;

exports[`show detailed usage with --help cursor-offset (stderr) 1`] = `""`;

exports[`show detailed usage with --help cursor-offset (stdout) 1`] = `
"--cursor-offset <int>

  Print (to stderr) where a cursor at the given position would move to after formatting.
  This option cannot be used with --range-start and --range-end.

Default: -1
"
`;

exports[`show detailed usage with --help cursor-offset (write) 1`] = `Array []`;

exports[`show detailed usage with --help editorconfig (stderr) 1`] = `""`;

exports[`show detailed usage with --help editorconfig (stdout) 1`] = `
"--editorconfig

  Take .editorconfig into account when parsing configuration.

Default: true
"
`;

exports[`show detailed usage with --help editorconfig (write) 1`] = `Array []`;

exports[`show detailed usage with --help embedded-language-formatting (stderr) 1`] = `""`;

exports[`show detailed usage with --help embedded-language-formatting (stdout) 1`] = `
"--embedded-language-formatting <auto|off>

  Control how Prettier formats quoted code embedded in the file.

Valid options:

  auto   Format embedded code if Prettier can automatically identify it.
  off    Never automatically format embedded code.

Default: auto
"
`;

exports[`show detailed usage with --help embedded-language-formatting (write) 1`] = `Array []`;

exports[`show detailed usage with --help end-of-line (stderr) 1`] = `""`;

exports[`show detailed usage with --help end-of-line (stdout) 1`] = `
"--end-of-line <lf|crlf|cr|auto>

  Which end of line characters to apply.

Valid options:

  lf     Line Feed only (\\\\n), common on Linux and macOS as well as inside git repos
  crlf   Carriage Return + Line Feed characters (\\\\r\\\\n), common on Windows
  cr     Carriage Return character only (\\\\r), used very rarely
  auto   Maintain existing
         (mixed values within one file are normalised by looking at what's used after the first line)

Default: lf
"
`;

exports[`show detailed usage with --help end-of-line (write) 1`] = `Array []`;

exports[`show detailed usage with --help export-curly-spacing (stderr) 1`] = `""`;

exports[`show detailed usage with --help export-curly-spacing (stdout) 1`] = `
"--export-curly-spacing

  Put spaces between export curly braces.

Default: true
"
`;

exports[`show detailed usage with --help export-curly-spacing (write) 1`] = `Array []`;

exports[`show detailed usage with --help file-info (stderr) 1`] = `""`;

exports[`show detailed usage with --help file-info (stdout) 1`] = `
"--file-info <path>

  Extract the following info (as JSON) for a given file path. Reported fields:
  * ignored (boolean) - true if file path is filtered by --ignore-path
  * inferredParser (string | null) - name of parser inferred from file path
"
`;

exports[`show detailed usage with --help file-info (write) 1`] = `Array []`;

exports[`show detailed usage with --help find-config-path (stderr) 1`] = `""`;

exports[`show detailed usage with --help find-config-path (stdout) 1`] = `
"--find-config-path <path>

  Find and print the path to a configuration file for the given input file.
"
`;

exports[`show detailed usage with --help find-config-path (write) 1`] = `Array []`;

exports[`show detailed usage with --help generator-star-spacing (stderr) 1`] = `""`;

exports[`show detailed usage with --help generator-star-spacing (stdout) 1`] = `
"--generator-star-spacing

  Put spaces around the star (\`*\`) in generator functions (before and after - similar to the corresponding eslint option). (Default is after only.)

Default: false
"
`;

exports[`show detailed usage with --help generator-star-spacing (write) 1`] = `Array []`;

exports[`show detailed usage with --help graphql-curly-spacing (stderr) 1`] = `""`;

exports[`show detailed usage with --help graphql-curly-spacing (stdout) 1`] = `
"--graphql-curly-spacing

  Put spaces between curly braces for GraphQL.

Default: true
"
`;

exports[`show detailed usage with --help graphql-curly-spacing (write) 1`] = `Array []`;

exports[`show detailed usage with --help help (stderr) 1`] = `""`;

exports[`show detailed usage with --help help (stdout) 1`] = `
"-h, --help <flag>

  Show CLI usage, or details about the given flag.
  Example: --help write
"
`;

exports[`show detailed usage with --help help (write) 1`] = `Array []`;

exports[`show detailed usage with --help html-void-tags (stderr) 1`] = `""`;

exports[`show detailed usage with --help html-void-tags (stdout) 1`] = `
"--html-void-tags

  Format void HTML elements as void tags.

Default: false
"
`;

exports[`show detailed usage with --help html-void-tags (write) 1`] = `Array []`;

exports[`show detailed usage with --help html-whitespace-sensitivity (stderr) 1`] = `""`;

exports[`show detailed usage with --help html-whitespace-sensitivity (stdout) 1`] = `
"--html-whitespace-sensitivity <css|strict|ignore>

  How to handle whitespaces in HTML.

Valid options:

  css      Respect the default value of CSS display property.
  strict   Whitespaces are considered sensitive.
  ignore   Whitespaces are considered insensitive.

Default: css
"
`;

exports[`show detailed usage with --help html-whitespace-sensitivity (write) 1`] = `Array []`;

exports[`show detailed usage with --help ignore-path (stderr) 1`] = `""`;

exports[`show detailed usage with --help ignore-path (stdout) 1`] = `
"--ignore-path <path>

  Path to a file with patterns describing files to ignore.

Default: .prettierignore
"
`;

exports[`show detailed usage with --help ignore-path (write) 1`] = `Array []`;

exports[`show detailed usage with --help ignore-unknown (stderr) 1`] = `""`;

exports[`show detailed usage with --help ignore-unknown (stdout) 1`] = `
"-u, --ignore-unknown

  Ignore unknown files.
"
`;

exports[`show detailed usage with --help ignore-unknown (write) 1`] = `Array []`;

exports[`show detailed usage with --help import-curly-spacing (stderr) 1`] = `""`;

exports[`show detailed usage with --help import-curly-spacing (stdout) 1`] = `
"--import-curly-spacing

  Put spaces between import curly braces.

Default: true
"
`;

exports[`show detailed usage with --help import-curly-spacing (write) 1`] = `Array []`;

exports[`show detailed usage with --help import-formatting (stderr) 1`] = `""`;

exports[`show detailed usage with --help import-formatting (stdout) 1`] = `
"--import-formatting <auto|oneline>

  Formatting of import statements, may be \`oneline\` to avoid conflict with VSCode \\"Organize Imports\\" feature.

Valid options:

  auto      automatic formatting, like Prettier
  oneline   keep import statements on one line

Default: auto
"
`;

exports[`show detailed usage with --help import-formatting (write) 1`] = `Array []`;

exports[`show detailed usage with --help indent-chains (stderr) 1`] = `""`;

exports[`show detailed usage with --help indent-chains (stdout) 1`] = `
"--indent-chains

  Put indents at the start of chained calls.

Default: true
"
`;

exports[`show detailed usage with --help indent-chains (write) 1`] = `Array []`;

exports[`show detailed usage with --help insert-pragma (stderr) 1`] = `""`;

exports[`show detailed usage with --help insert-pragma (stdout) 1`] = `
"--insert-pragma

  Insert @format pragma into file's first docblock comment.

Default: false
"
`;

exports[`show detailed usage with --help insert-pragma (write) 1`] = `Array []`;

exports[`show detailed usage with --help jsx-bracket-same-line (stderr) 1`] = `""`;

exports[`show detailed usage with --help jsx-bracket-same-line (stdout) 1`] = `
"--jsx-bracket-same-line

  Put > on the last line instead of at a new line.

Default: false
"
`;

exports[`show detailed usage with --help jsx-bracket-same-line (write) 1`] = `Array []`;

exports[`show detailed usage with --help jsx-single-quote (stderr) 1`] = `""`;

exports[`show detailed usage with --help jsx-single-quote (stdout) 1`] = `
"--jsx-single-quote

  Use single quotes in JSX.

Default: false
"
`;

exports[`show detailed usage with --help jsx-single-quote (write) 1`] = `Array []`;

exports[`show detailed usage with --help list-different (stderr) 1`] = `""`;

exports[`show detailed usage with --help list-different (stdout) 1`] = `
"-l, --list-different

  Print the names of files that are different from Prettier's formatting (see also --check).
"
`;

exports[`show detailed usage with --help list-different (write) 1`] = `Array []`;

exports[`show detailed usage with --help loglevel (stderr) 1`] = `""`;

exports[`show detailed usage with --help loglevel (stdout) 1`] = `
"--loglevel <silent|error|warn|log|debug>

  What level of logs to report.

Valid options:

  silent   
  error    
  warn     
  log      
  debug    

Default: log
"
`;

exports[`show detailed usage with --help loglevel (write) 1`] = `Array []`;

exports[`show detailed usage with --help no-color (stderr) 1`] = `""`;

exports[`show detailed usage with --help no-color (stdout) 1`] = `
"--no-color

  Do not colorize error messages.
"
`;

exports[`show detailed usage with --help no-color (write) 1`] = `Array []`;

exports[`show detailed usage with --help no-config (stderr) 1`] = `""`;

exports[`show detailed usage with --help no-config (stdout) 1`] = `
"--no-config

  Do not look for a configuration file.
"
`;

exports[`show detailed usage with --help no-config (write) 1`] = `Array []`;

exports[`show detailed usage with --help no-editorconfig (stderr) 1`] = `""`;

exports[`show detailed usage with --help no-editorconfig (stdout) 1`] = `
"--no-editorconfig

  Don't take .editorconfig into account when parsing configuration.
"
`;

exports[`show detailed usage with --help no-editorconfig (write) 1`] = `Array []`;

exports[`show detailed usage with --help no-error-on-unmatched-pattern (stderr) 1`] = `""`;

exports[`show detailed usage with --help no-error-on-unmatched-pattern (stdout) 1`] = `
"--no-error-on-unmatched-pattern

  Prevent errors when pattern is unmatched.
"
`;

exports[`show detailed usage with --help no-error-on-unmatched-pattern (write) 1`] = `Array []`;

exports[`show detailed usage with --help no-export-curly-spacing (stderr) 1`] = `""`;

exports[`show detailed usage with --help no-export-curly-spacing (stdout) 1`] = `
"--no-export-curly-spacing

  Disable spaces between export curly braces.
"
`;

exports[`show detailed usage with --help no-export-curly-spacing (write) 1`] = `Array []`;

exports[`show detailed usage with --help no-graphql-curly-spacing (stderr) 1`] = `""`;

exports[`show detailed usage with --help no-graphql-curly-spacing (stdout) 1`] = `
"--no-graphql-curly-spacing

  Do not put spaces between curly braces for GraphQL.
"
`;

exports[`show detailed usage with --help no-graphql-curly-spacing (write) 1`] = `Array []`;

exports[`show detailed usage with --help no-import-curly-spacing (stderr) 1`] = `""`;

exports[`show detailed usage with --help no-import-curly-spacing (stdout) 1`] = `
"--no-import-curly-spacing

  Disable spaces between import curly braces.
"
`;

exports[`show detailed usage with --help no-import-curly-spacing (write) 1`] = `Array []`;

exports[`show detailed usage with --help no-indent-chains (stderr) 1`] = `""`;

exports[`show detailed usage with --help no-indent-chains (stdout) 1`] = `
"--no-indent-chains

  Disable indents at the start of chained calls.
"
`;

exports[`show detailed usage with --help no-indent-chains (write) 1`] = `Array []`;

exports[`show detailed usage with --help no-object-curly-spacing (stderr) 1`] = `""`;

exports[`show detailed usage with --help no-object-curly-spacing (stdout) 1`] = `
"--no-object-curly-spacing

  Disable spaces between object curly braces.
"
`;

exports[`show detailed usage with --help no-object-curly-spacing (write) 1`] = `Array []`;

exports[`show detailed usage with --help no-semi (stderr) 1`] = `""`;

exports[`show detailed usage with --help no-semi (stdout) 1`] = `
"--no-semi

  Do not print semicolons, except at the beginning of lines which may need them.
"
`;

exports[`show detailed usage with --help no-semi (write) 1`] = `Array []`;

exports[`show detailed usage with --help no-type-curly-spacing (stderr) 1`] = `""`;

exports[`show detailed usage with --help no-type-curly-spacing (stdout) 1`] = `
"--no-type-curly-spacing

  Disable spaces between type curly braces.
"
`;

exports[`show detailed usage with --help no-type-curly-spacing (write) 1`] = `Array []`;

exports[`show detailed usage with --help no-yaml-bracket-spacing (stderr) 1`] = `""`;

exports[`show detailed usage with --help no-yaml-bracket-spacing (stdout) 1`] = `
"--no-yaml-bracket-spacing

  Do not put spaces between brackets / curly braces for YAML.
"
`;

exports[`show detailed usage with --help no-yaml-bracket-spacing (write) 1`] = `Array []`;

exports[`show detailed usage with --help object-curly-spacing (stderr) 1`] = `""`;

exports[`show detailed usage with --help object-curly-spacing (stdout) 1`] = `
"--object-curly-spacing

  Put spaces between object curly braces (similar to the corresponding eslint option).

Default: true
"
`;

exports[`show detailed usage with --help object-curly-spacing (write) 1`] = `Array []`;

exports[`show detailed usage with --help offset-ternary-expressions (stderr) 1`] = `""`;

exports[`show detailed usage with --help offset-ternary-expressions (stdout) 1`] = `
"--offset-ternary-expressions

  Indent and align ternary expression branches more consistently with \\"Standard JS\\" (similar to the corresponding eslint option).

Default: false
"
`;

exports[`show detailed usage with --help offset-ternary-expressions (write) 1`] = `Array []`;

exports[`show detailed usage with --help parser (stderr) 1`] = `""`;

exports[`show detailed usage with --help parser (stdout) 1`] = `
"--parser <flow|babel|babel-flow|babel-ts|typescript|espree|meriyah|css|less|scss|json|json5|json-stringify|graphql|markdown|mdx|vue|yaml|glimmer|html|angular|lwc>

  Which parser to use.

Valid options:

  flow             Flow
  babel            JavaScript
  babel-flow       Flow
  babel-ts         TypeScript
  typescript       TypeScript
  espree           JavaScript
  meriyah          JavaScript
  css              CSS
  less             Less
  scss             SCSS
  json             JSON
  json5            JSON5
  json-stringify   JSON.stringify
  graphql          GraphQL
  markdown         Markdown
  mdx              MDX
  vue              Vue
  yaml             YAML
  glimmer          Ember / Handlebars
  html             HTML
  angular          Angular
  lwc              Lightning Web Components
"
`;

exports[`show detailed usage with --help parser (write) 1`] = `Array []`;

exports[`show detailed usage with --help plugin (stderr) 1`] = `""`;

exports[`show detailed usage with --help plugin (stdout) 1`] = `
"--plugin <path>

  Add a plugin. Multiple plugins can be passed as separate \`--plugin\`s.

Default: []
"
`;

exports[`show detailed usage with --help plugin (write) 1`] = `Array []`;

exports[`show detailed usage with --help plugin-search-dir (stderr) 1`] = `""`;

exports[`show detailed usage with --help plugin-search-dir (stdout) 1`] = `
"--plugin-search-dir <path>

  Custom directory that contains prettier plugins in node_modules subdirectory.
  Overrides default behavior when plugins are searched relatively to the location of Prettier.
  Multiple values are accepted.

Default: []
"
`;

exports[`show detailed usage with --help plugin-search-dir (write) 1`] = `Array []`;

exports[`show detailed usage with --help print-width (stderr) 1`] = `""`;

exports[`show detailed usage with --help print-width (stdout) 1`] = `
"--print-width <int>

  The line length where Prettier will try wrap.

Default: 80
"
`;

exports[`show detailed usage with --help print-width (write) 1`] = `Array []`;

exports[`show detailed usage with --help prose-wrap (stderr) 1`] = `""`;

exports[`show detailed usage with --help prose-wrap (stdout) 1`] = `
"--prose-wrap <always|never|preserve>

  How to wrap prose.

Valid options:

  always     Wrap prose if it exceeds the print width.
  never      Do not wrap prose.
  preserve   Wrap prose as-is.

Default: preserve
"
`;

exports[`show detailed usage with --help prose-wrap (write) 1`] = `Array []`;

exports[`show detailed usage with --help quote-props (stderr) 1`] = `""`;

exports[`show detailed usage with --help quote-props (stdout) 1`] = `
"--quote-props <as-needed|consistent|preserve>

  Change when properties in objects are quoted.

Valid options:

  as-needed    Only add quotes around object properties where required.
  consistent   If at least one property in an object requires quotes, quote all properties.
  preserve     Respect the input use of quotes in object properties.

Default: as-needed
"
`;

exports[`show detailed usage with --help quote-props (write) 1`] = `Array []`;

exports[`show detailed usage with --help range-end (stderr) 1`] = `""`;

exports[`show detailed usage with --help range-end (stdout) 1`] = `
"--range-end <int>

  Format code ending at a given character offset (exclusive).
  The range will extend forwards to the end of the selected statement.
  This option cannot be used with --cursor-offset.

Default: Infinity
"
`;

exports[`show detailed usage with --help range-end (write) 1`] = `Array []`;

exports[`show detailed usage with --help range-start (stderr) 1`] = `""`;

exports[`show detailed usage with --help range-start (stdout) 1`] = `
"--range-start <int>

  Format code starting at a given character offset.
  The range will extend backwards to the start of the first line containing the selected statement.
  This option cannot be used with --cursor-offset.

Default: 0
"
`;

exports[`show detailed usage with --help range-start (write) 1`] = `Array []`;

exports[`show detailed usage with --help require-pragma (stderr) 1`] = `""`;

exports[`show detailed usage with --help require-pragma (stdout) 1`] = `
"--require-pragma

  Require either '@prettier' or '@format' to be present in the file's first docblock comment
  in order for it to be formatted.

Default: false
"
`;

exports[`show detailed usage with --help require-pragma (write) 1`] = `Array []`;

exports[`show detailed usage with --help semi (stderr) 1`] = `""`;

exports[`show detailed usage with --help semi (stdout) 1`] = `
"--semi

  Print semicolons.

Default: true
"
`;

exports[`show detailed usage with --help semi (write) 1`] = `Array []`;

exports[`show detailed usage with --help single-quote (stderr) 1`] = `""`;

exports[`show detailed usage with --help single-quote (stdout) 1`] = `
"--single-quote

  Use single quotes instead of double quotes.

Default: false
"
`;

exports[`show detailed usage with --help single-quote (write) 1`] = `Array []`;

exports[`show detailed usage with --help space-before-function-paren (stderr) 1`] = `""`;

exports[`show detailed usage with --help space-before-function-paren (stdout) 1`] = `
"--space-before-function-paren

  Put a space before function parenthesis in all declarations (similar to the corresponding eslint option). (Default is to put a space before function parenthesis for untyped anonymous functions only.)

Default: false
"
`;

exports[`show detailed usage with --help space-before-function-paren (write) 1`] = `Array []`;

exports[`show detailed usage with --help space-in-parens (stderr) 1`] = `""`;

exports[`show detailed usage with --help space-in-parens (stdout) 1`] = `
"--space-in-parens

  Print spaces in between parens, WordPress style (similar to the corresponding eslint option). Not recommended in combination with the default \`arrowParens: \\"always\\"\` option. Status: experimental, with limited testing.

Default: false
"
`;

exports[`show detailed usage with --help space-in-parens (write) 1`] = `Array []`;

exports[`show detailed usage with --help space-unary-ops (stderr) 1`] = `""`;

exports[`show detailed usage with --help space-unary-ops (stdout) 1`] = `
"--space-unary-ops

  Put spaces after unary operator symbols, except in the middle of \`!!\` (similar to the corresponding eslint option). Status: experimental, with limited testing.

Default: false
"
`;

exports[`show detailed usage with --help space-unary-ops (write) 1`] = `Array []`;

exports[`show detailed usage with --help stdin-filepath (stderr) 1`] = `""`;

exports[`show detailed usage with --help stdin-filepath (stdout) 1`] = `
"--stdin-filepath <path>

  Path to the file to pretend that stdin comes from.
"
`;

exports[`show detailed usage with --help stdin-filepath (write) 1`] = `Array []`;

exports[`show detailed usage with --help support-info (stderr) 1`] = `""`;

exports[`show detailed usage with --help support-info (stdout) 1`] = `
"--support-info

  Print support information as JSON.
"
`;

exports[`show detailed usage with --help support-info (write) 1`] = `Array []`;

exports[`show detailed usage with --help tab-width (stderr) 1`] = `""`;

exports[`show detailed usage with --help tab-width (stdout) 1`] = `
"--tab-width <int>

  Number of spaces per indentation level.

Default: 2
"
`;

exports[`show detailed usage with --help tab-width (write) 1`] = `Array []`;

exports[`show detailed usage with --help template-curly-spacing (stderr) 1`] = `""`;

exports[`show detailed usage with --help template-curly-spacing (stdout) 1`] = `
"--template-curly-spacing

  Put spaces between template curly brackets (similar to the corresponding eslint option). Status: experimental, with limited testing.

Default: false
"
`;

exports[`show detailed usage with --help template-curly-spacing (write) 1`] = `Array []`;

exports[`show detailed usage with --help trailing-comma (stderr) 1`] = `""`;

exports[`show detailed usage with --help trailing-comma (stdout) 1`] = `
"--trailing-comma <es5|none|all>

  Print trailing commas wherever possible when multi-line.

Valid options:

  es5    Trailing commas where valid in ES5 (objects, arrays, etc.)
  none   No trailing commas.
  all    Trailing commas wherever possible (including function arguments).

Default: es5
"
`;

exports[`show detailed usage with --help trailing-comma (write) 1`] = `Array []`;

exports[`show detailed usage with --help type-angle-bracket-spacing (stderr) 1`] = `""`;

exports[`show detailed usage with --help type-angle-bracket-spacing (stdout) 1`] = `
"--type-angle-bracket-spacing

  Put spaces between type angle brackets. Status: experimental, with limited testing.

Default: false
"
`;

exports[`show detailed usage with --help type-angle-bracket-spacing (write) 1`] = `Array []`;

exports[`show detailed usage with --help type-bracket-spacing (stderr) 1`] = `""`;

exports[`show detailed usage with --help type-bracket-spacing (stdout) 1`] = `
"--type-bracket-spacing

  Print spaces between type brackets. Status: experimental, with limited testing.

Default: false
"
`;

exports[`show detailed usage with --help type-bracket-spacing (write) 1`] = `Array []`;

exports[`show detailed usage with --help type-curly-spacing (stderr) 1`] = `""`;

exports[`show detailed usage with --help type-curly-spacing (stdout) 1`] = `
"--type-curly-spacing

  Put spaces between type curly braces.

Default: true
"
`;

exports[`show detailed usage with --help type-curly-spacing (write) 1`] = `Array []`;

exports[`show detailed usage with --help use-tabs (stderr) 1`] = `""`;

exports[`show detailed usage with --help use-tabs (stdout) 1`] = `
"--use-tabs

  Indent with tabs instead of spaces.

Default: false
"
`;

exports[`show detailed usage with --help use-tabs (write) 1`] = `Array []`;

exports[`show detailed usage with --help version (stderr) 1`] = `""`;

exports[`show detailed usage with --help version (stdout) 1`] = `
"-v, --version

  Print Prettier version.
"
`;

exports[`show detailed usage with --help version (write) 1`] = `Array []`;

exports[`show detailed usage with --help vue-indent-script-and-style (stderr) 1`] = `""`;

exports[`show detailed usage with --help vue-indent-script-and-style (stdout) 1`] = `
"--vue-indent-script-and-style

  Indent script and style tags in Vue files.

Default: false
"
`;

exports[`show detailed usage with --help vue-indent-script-and-style (write) 1`] = `Array []`;

exports[`show detailed usage with --help with-node-modules (stderr) 1`] = `""`;

exports[`show detailed usage with --help with-node-modules (stdout) 1`] = `
"--with-node-modules

  Process files inside 'node_modules' directory.
"
`;

exports[`show detailed usage with --help with-node-modules (write) 1`] = `Array []`;

exports[`show detailed usage with --help write (stderr) 1`] = `""`;

exports[`show detailed usage with --help write (stdout) 1`] = `
"-w, --write

  Edit files in-place. (Beware!)
"
`;

exports[`show detailed usage with --help write (write) 1`] = `Array []`;

exports[`show detailed usage with --help yaml-bracket-spacing (stderr) 1`] = `""`;

exports[`show detailed usage with --help yaml-bracket-spacing (stdout) 1`] = `
"--yaml-bracket-spacing

  Put spaces between brackets / curly braces for YAML.

Default: true
"
`;

exports[`show detailed usage with --help yaml-bracket-spacing (write) 1`] = `Array []`;

exports[`show detailed usage with --help yield-star-spacing (stderr) 1`] = `""`;

exports[`show detailed usage with --help yield-star-spacing (stdout) 1`] = `
"--yield-star-spacing

  Put spaces around the star (\`*\`) in \`yield*\` expressions (before and after - similar to the corresponding eslint option). (Default is after only.)

Default: false
"
`;

exports[`show detailed usage with --help yield-star-spacing (write) 1`] = `Array []`;
